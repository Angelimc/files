<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()> -> _SINK_
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> -> _SINK_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()> -> _SINK_
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()> -> _SINK_
<android.telephony.SmsCbLocation: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()> -> _SINK_
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()> -> _SINK_
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SINK_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()> -> _SINK_
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> -> _SINK_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.location.GpsSatellite: int getPrn()> -> _SINK_
<android.location.Address: java.lang.String getFeatureName()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()> -> _SINK_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> -> _SINK_
<android.location.Address: java.lang.String getAdminArea()> -> _SINK_
<android.location.Location: float getSpeed()> -> _SINK_
<com.android.server.location.MockProvider: long getStatusUpdateTime()> -> _SINK_
<android.location.Address: java.util.Locale getLocale()> -> _SINK_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SINK_
<android.location.Address: java.lang.String getCountryName()> -> _SINK_
<android.telephony.SmsCbLocation: int getLac()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> -> _SINK_
<android.location.GpsSatellite: float getSnr()> -> _SINK_
<android.location.GeocoderParams: java.util.Locale getLocale()> -> _SINK_
<android.renderscript.Allocation: int getBytesSize()> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> -> _SINK_
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> -> _SINK_
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> -> _SINK_
<com.android.server.location.PassiveProvider: java.lang.String getName()> -> _SINK_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SINK_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> -> _SINK_
<android.location.Address: int getMaxAddressLineIndex()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> -> _SINK_
<android.location.Criteria: int getVerticalAccuracy()> -> _SINK_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> -> _SINK_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SINK_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SINK_
<android.location.Location: double getLatitude()> -> _SINK_
<android.location.Location: float getBearing()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> -> _SINK_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationProvider: java.lang.String getName()> -> _SINK_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SINK_
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)> -> _SINK_
<android.location.Location: android.os.Bundle getExtras()> -> _SINK_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SINK_
<android.location.Criteria: int getPowerRequirement()> -> _SINK_
<android.telephony.gsm.GsmCellLocation: int getPsc()> -> _SINK_
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SINK_
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()> -> _SINK_
<android.location.Address: java.lang.String getPremises()> -> _SINK_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SINK_
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> -> _SINK_
<com.android.server.location.LocationProviderProxy: java.lang.String getName()> -> _SINK_
<android.location.Address: java.lang.String getThoroughfare()> -> _SINK_
<com.android.camera.RecordLocationPreference: java.lang.String getValue()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.location.LocationRequest: java.lang.String getProvider()> -> _SINK_
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationRequest: int getQuality()> -> _SINK_
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SINK_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SINK_
<android.location.Location: long getTime()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Element getElement()> -> _SINK_
<android.location.Address: java.lang.String getAddressLine(int)> -> _SINK_
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> -> _SINK_
<com.android.server.location.MockProvider: java.lang.String getName()> -> _SINK_
<android.location.Country: int getSource()> -> _SINK_
<com.android.server.location.GeofenceState: double getDistanceToBoundary()> -> _SINK_
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.location.Address: java.lang.String getPhone()> -> _SINK_
<android.location.Geofence: double getLongitude()> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> -> _SINK_
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationRequest: long getInterval()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.Address: java.lang.String getUrl()> -> _SINK_
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)> -> _SINK_
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()> -> _SINK_
<android.location.Address: java.lang.String getLocality()> -> _SINK_
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()> -> _SINK_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> -> _SINK_
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.location.Location: java.lang.String getProvider()> -> _SINK_
<android.location.LocationProvider: int getPowerRequirement()> -> _SINK_
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()> -> _SINK_
<com.android.server.LocationManagerService: java.util.List getAllProviders()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SINK_
<android.location.Criteria: int getSpeedAccuracy()> -> _SINK_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SINK_
<android.location.Geofence: int getType()> -> _SINK_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SINK_
<android.location.Geofence: float getRadius()> -> _SINK_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> -> _SINK_
<android.location.Geofence: double getLatitude()> -> _SINK_
<android.location.Address: android.os.Bundle getExtras()> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> -> _SINK_
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SINK_
<android.location.Location: double getAltitude()> -> _SINK_
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SINK_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<android.location.Address: double getLongitude()> -> _SINK_
<android.location.GpsSatellite: float getElevation()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Type getType()> -> _SINK_
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)> -> _SINK_
<android.renderscript.Allocation: android.view.Surface getSurface()> -> _SINK_
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> -> _SINK_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> -> _SINK_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SINK_
<android.location.Country: java.lang.String getCountryIso()> -> _SINK_
<android.location.LocationProvider: int getAccuracy()> -> _SINK_
<android.location.GpsStatus: int getMaxSatellites()> -> _SINK_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> -> _SINK_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)> -> _SINK_
<android.location.GeocoderParams: java.lang.String getClientPackage()> -> _SINK_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> -> _SINK_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SINK_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> -> _SINK_
<android.location.LocationRequest: long getExpireAt()> -> _SINK_
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SINK_
<android.location.LocationManager: android.location.Location getLastLocation()> -> _SINK_
<com.android.server.location.GpsLocationProvider: java.lang.String getName()> -> _SINK_
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SINK_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> -> _SINK_
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()> -> _SINK_
<android.location.Address: java.lang.String getPostalCode()> -> _SINK_
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()> -> _SINK_
<android.location.GpsSatellite: float getAzimuth()> -> _SINK_
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()> -> _SINK_
<android.location.Country: long getTimestamp()> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()> -> _SINK_
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)> -> _SINK_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> -> _SINK_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SINK_
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)> -> _SINK_
<android.location.LocationRequest: long getFastestInterval()> -> _SINK_
<android.location.Address: java.lang.String getSubLocality()> -> _SINK_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SINK_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SINK_
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)> -> _SINK_
<android.location.Address: double getLatitude()> -> _SINK_
<android.location.Criteria: int getHorizontalAccuracy()> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SINK_
<android.renderscript.Allocation: int getUsage()> -> _SINK_
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()> -> _SINK_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()> -> _SINK_
<android.telephony.SmsCbLocation: int getCid()> -> _SINK_
<android.location.LocationRequest: int getNumUpdates()> -> _SINK_
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()> -> _SINK_
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)> -> _SINK_
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)> -> _SINK_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.location.LocationRequest: float getSmallestDisplacement()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> -> _SINK_
<android.location.Address: java.lang.String getCountryCode()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getNetworkType()> -> _SINK_
<android.location.Location: float getAccuracy()> -> _SINK_
<android.location.Location: double getLongitude()> -> _SINK_
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()> -> _SINK_
<android.location.Criteria: int getAccuracy()> -> _SINK_
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)> -> _SINK_
<android.location.Criteria: int getBearingAccuracy()> -> _SINK_
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> -> _SINK_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> -> _SINK_
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()> -> _SINK_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SINK_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State getState()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()> -> _SINK_
<com.android.server.sip.SipService: android.os.Looper access$1800()> -> _SINK_
<android.net.Uri$HierarchicalUri: android.net.Uri$Builder buildUpon()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamMaxVolume()> -> _SINK_
<com.android.internal.telephony.IccRefreshResponse: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService getServiceForMailbox(android.content.Context,com.android.emailcommon.provider.Mailbox)> -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: int getPremiumSmsPermission(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> -> _SINK_
<android.telephony.ServiceState: int getRilRadioTechnology()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SINK_
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)> -> _SINK_
<com.android.server.MountService$ObbState: android.os.IBinder getBinder()> -> _SINK_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)> -> _SINK_
<android.telephony.CellSignalStrengthGsm: int getDbm()> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int getPremiumSmsPermission(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getSerialNumber()> -> _SINK_
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputInnerLocked()> -> _SINK_
<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()> -> _SINK_
<android.net.http.Headers: int getConnectionType()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getAttributeNames()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: int getRemotePort()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryDev()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()> -> _SINK_
<android.media.AudioService: int getMasterVolume()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()> -> _SINK_
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: int getPort()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()> -> _SINK_
<com.android.internal.telephony.Connection: int getCnapNamePresentation()> -> _SINK_
<java.lang.ClassLoader: java.lang.Package[] getPackages()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> -> _SINK_
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()> -> _SINK_
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()> -> _SINK_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()> -> _SINK_
<com.android.email.mail.transport.MailTransport: java.lang.String getHost()> -> _SINK_
<android.telephony.CellInfo: long getTimeStamp()> -> _SINK_
<com.android.internal.telephony.DataConnection: java.lang.String getWhatToString(int)> -> _SINK_
<com.android.server.MountService: java.lang.String getMountedObbPath(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()> -> _SINK_
<android.net.wifi.WifiStateTracker: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.MmiCode$State getState()> -> _SINK_
<android.net.MobileDataStateTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<android.net.http.HttpConnection: java.lang.String getScheme()> -> _SINK_
<android.net.LocalSocketImpl: java.lang.Object getOption(int)> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()> -> _SINK_
<android.net.Proxy: java.lang.String getHost(android.content.Context)> -> _SINK_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()> -> _SINK_
<android.telephony.SmsMessage: byte[] getPdu()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimEprlLoaded: java.lang.String getEfName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getAlgorithm()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()> -> _SINK_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> -> _SINK_
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: long getPeriodEnd()> -> _SINK_
<android.net.nsd.NsdServiceInfo: int getPort()> -> _SINK_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCardApplication getUiccCardApplication(int)> -> _SINK_
<android.net.http.Request: java.lang.String getHostPort()> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()> -> _SINK_
<com.android.server.am.ActivityManagerService: int[] getUsersLocked()> -> _SINK_
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()> -> _SINK_
<android.net.NetworkPolicyManager: int getUidPolicy(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> -> _SINK_
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<android.media.AudioService: int getLastAudibleStreamVolume(int)> -> _SINK_
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String getPeerHostName()> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(int)> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getPendingMmiCodes(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()> -> _SINK_
<android.net.Uri: java.lang.String access$600()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> -> _SINK_
<com.android.internal.telephony.ApnSetting: java.lang.String toString()> -> _SINK_
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)> -> _SINK_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponent()> -> _SINK_
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()> -> _SINK_
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()> -> _SINK_
<android.net.http.SslCertificate$DName: java.lang.String getDName()> -> _SINK_
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()> -> _SINK_
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getWrappedPort()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getForegroundCall()> -> _SINK_
<android.telephony.SignalStrength: int getGsmLevel()> -> _SINK_
<com.android.server.ConnectivityService: int getNetworkPreference()> -> _SINK_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getResourcePath()> -> _SINK_
<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()> -> _SINK_
<com.android.internal.telephony.SmsResponse: java.lang.String toString()> -> _SINK_
<android.net.nsd.DnsSdTxtRecord: byte[] getRawData()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)> -> _SINK_
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()> -> _SINK_
<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()> -> _SINK_
<com.android.exchange.ExchangeService: int getStatusType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()> -> _SINK_
<android.net.EthernetDataTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> -> _SINK_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()> -> _SINK_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])> -> _SINK_
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> -> _SINK_
<android.telephony.CellSignalStrengthLte: int getLevel()> -> _SINK_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()> -> _SINK_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)> -> _SINK_
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getBgCallConnections()> -> _SINK_
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionKey()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)> -> _SINK_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()> -> _SINK_
<java.lang.ClassLoader: java.lang.ClassLoader access$000()> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()> -> _SINK_
<android.net.NetworkIdentity: boolean getRoaming()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()> -> _SINK_
<android.telephony.SignalStrength: int getLteAsuLevel()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()> -> _SINK_
<android.telephony.ServiceState: int getState()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: int getState()> -> _SINK_
<android.telephony.SmsCbCmasInfo: java.lang.String toString()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()> -> _SINK_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getWantClientAuth()> -> _SINK_
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)> -> _SINK_
<android.media.AudioService: int getStreamVolume(int)> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getProfileName()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$1300(android.net.sip.SipAudioCall)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: android.database.Cursor doInBackground(java.lang.Void[])> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int getApiLevel()> -> _SINK_
<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()> -> _SINK_
<android.service.wallpaper.IWallpaperService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> -> _SINK_
<android.inputmethodservice.Keyboard: int getHeight()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()> -> _SINK_
<android.net.rtp.RtpStream: int getSocket()> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<android.net.NetworkTemplate: java.lang.String getSubscriberId()> -> _SINK_
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()> -> _SINK_
<android.net.Uri: java.lang.String access$300()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategoryResult()> -> _SINK_
<com.android.internal.telephony.RetryManager: int getRetryTimer()> -> _SINK_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()> -> _SINK_
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> -> _SINK_
<android.net.EthernetDataTracker: int getDefaultGatewayAddr()> -> _SINK_
<android.telephony.SignalStrength: int getGsmDbm()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getStringParam(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)> -> _SINK_
<android.net.http.RequestHandle: java.lang.String getMethod()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)> -> _SINK_
<android.service.wallpaper.IWallpaperService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()> -> _SINK_
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()> -> _SINK_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.DSAPrivateKey)> -> _SINK_
<com.android.server.ConnectivityService: android.net.ProxyProperties getGlobalProxy()> -> _SINK_
<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()> -> _SINK_
<com.android.email.service.AttachmentDownloadService: int getSize()> -> _SINK_
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()> -> _SINK_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()> -> _SINK_
<java.security.Provider$Service: java.lang.String getAlgorithm()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$1: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getFormat()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getDisplayName()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call$State getActiveFgCallState()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> -> _SINK_
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()> -> _SINK_
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.pm.UserManagerService getUserManagerLocked()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: boolean getCsimSpnDisplayCondition()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getPath()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()> -> _SINK_
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> -> _SINK_
<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: float getWindowCompatibilityScale(android.os.IBinder)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()> -> _SINK_
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> -> _SINK_
<android.net.WebAddress: java.lang.String getHost()> -> _SINK_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> -> _SINK_
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: int getFrequencyBand()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()> -> _SINK_
<android.net.ConnectivityManager: int getNetworkPreference()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])> -> _SINK_
<com.android.server.ServiceWatcher: android.os.IBinder getBinder()> -> _SINK_
<android.net.http.Headers: java.lang.String getContentDisposition()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()> -> _SINK_
<com.android.server.ClipboardService: android.content.ClipData getPrimaryClip(java.lang.String)> -> _SINK_
<android.service.wallpaper.WallpaperService: java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()> -> _SINK_
<android.net.LinkCapabilities: java.lang.String get(int)> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getLevel()> -> _SINK_
<com.android.email.service.AccountService$1: android.os.Bundle getConfigurationData(java.lang.String)> -> _SINK_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> -> _SINK_
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()> -> _SINK_
<android.net.http.SslError: int getPrimaryError()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SINK_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()> -> _SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()> -> _SINK_
<android.net.TrafficStats: long getMobileRxPackets()> -> _SINK_
<com.android.internal.telephony.WspTypeDecoder: long getValue32()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String getOwnerAddr(int)> -> _SINK_
<android.telephony.TelephonyManager: int getPhoneType()> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()> -> _SINK_
<com.android.server.WallpaperManagerService: int getHeightHint()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SINK_
<android.net.EthernetDataTracker: android.net.EthernetDataTracker getInstance()> -> _SINK_
<android.net.TrafficStats: int getThreadStatsTag()> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)> -> _SINK_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()> -> _SINK_
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()> -> _SINK_
<android.service.dreams.IDreamService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SINK_
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()> -> _SINK_
<com.android.internal.telephony.Connection: java.lang.String getCnapName()> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()> -> _SINK_
<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getLegacyVpnConfig()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call getCall()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SINK_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getMasterStreamType()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()> -> _SINK_
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()> -> _SINK_
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String,int)> -> _SINK_
<android.net.http.RequestQueue: android.net.http.Request getRequest()> -> _SINK_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket()> -> _SINK_
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$500(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.internal.telephony.ims.IsimFileHandler: java.lang.String getEFPath(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)> -> _SINK_
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()> -> _SINK_
<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)> -> _SINK_
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()> -> _SINK_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.SmsRawData: byte[] getBytes()> -> _SINK_
<android.telephony.SmsCbEtwsInfo: int getWarningType()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()> -> _SINK_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)> -> _SINK_
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: int getPkeyContext()> -> _SINK_
<android.net.LocalSocket: java.io.InputStream getInputStream()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()> -> _SINK_
<com.android.server.input.InputManagerService: int[] getInputDeviceIds()> -> _SINK_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()> -> _SINK_
<com.android.server.pm.UserManagerService: android.graphics.Bitmap getUserIcon(int)> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()> -> _SINK_
<android.media.AudioService: int getValueForVibrateSetting(int,int,int)> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.NetworkInfo: int getSubtype()> -> _SINK_
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()> -> _SINK_
<android.net.BaseNetworkStateTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: int getCurrentUserId()> -> _SINK_
<android.net.sip.SipProfile: boolean getSendKeepAlive()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()> -> _SINK_
<com.android.server.BatteryService: int getBatteryLevel()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: int getOperation()> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getServiceCategory()> -> _SINK_
<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfo(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> -> _SINK_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()> -> _SINK_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getNotInDictEmptySuggestions()> -> _SINK_
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getSecureRandomService()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SINK_
<android.app.ContextImpl$StaticServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()> -> _SINK_
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> -> _SINK_
<android.net.EthernetDataTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<com.android.server.TwilightService$TwilightState: long getTodaySunrise()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()> -> _SINK_
<android.net.wifi.WifiInfo: int getRssi()> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()> -> _SINK_
<android.content.IContentService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()> -> _SINK_
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SINK_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SINK_
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()> -> _SINK_
<android.net.http.Connection: byte[] getBuf()> -> _SINK_
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> -> _SINK_
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()> -> _SINK_
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> -> _SINK_
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()> -> _SINK_
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> -> _SINK_
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getAlgorithm()> -> _SINK_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: int getCdmaSubscriptionSource()> -> _SINK_
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)> -> _SINK_
<com.android.server.WifiService: android.os.Messenger getWifiStateMachineMessenger()> -> _SINK_
<com.android.server.am.ActivityManagerService: int getTaskForActivityLocked(android.os.IBinder,boolean)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.StitchingService: android.net.Uri access$700(com.google.android.apps.lightcycle.panorama.StitchingService,java.lang.String,android.net.Uri)> -> _SINK_
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()> -> _SINK_
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> -> _SINK_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()> -> _SINK_
<android.net.http.SslError: java.lang.String getUrl()> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> -> _SINK_
<android.net.LinkProperties: java.util.Collection getAddresses()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getBackgroundCall()> -> _SINK_
<com.android.server.AppWidgetService: int[] getAppWidgetIdsForHost(int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: int getPremiumSmsPermission(java.lang.String)> -> _SINK_
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)> -> _SINK_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService: java.io.File access$2200(com.android.server.pm.PackageManagerService,java.io.File)> -> _SINK_
<android.net.wifi.WifiStateMachine: int getFrequencyBand()> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getCategory()> -> _SINK_
<android.net.wifi.WifiInfo: boolean getMeteredHint()> -> _SINK_
<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()> -> _SINK_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()> -> _SINK_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()> -> _SINK_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplication(int)> -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()> -> _SINK_
<android.net.http.Headers: java.lang.String getCacheControl()> -> _SINK_
<android.net.wifi.WifiNative: java.lang.String getNetworkVariable(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getBackgroundCalls()> -> _SINK_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardStatus$PinState PinStateFromRILInt(int)> -> _SINK_
<javax.net.ssl.SSLEngine: int getPeerPort()> -> _SINK_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()> -> _SINK_
<com.android.server.connectivity.Vpn: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> -> _SINK_
<com.android.email.RefreshManager: long getLastMessageListRefreshTime(long)> -> _SINK_
<com.android.internal.telephony.ApnContext: int getRetryCount()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> -> _SINK_
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.telephony.CellSignalStrengthLte: int getAsuLevel()> -> _SINK_
<android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)> -> _SINK_
<android.net.DummyDataStateTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<com.android.internal.util.AsyncService: android.os.Handler getHandler()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()> -> _SINK_
<com.android.server.WallpaperManagerService: int getWidthHint()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()> -> _SINK_
<android.net.NetworkTemplate: int getMatchRule()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)> -> _SINK_
<android.media.AudioService$RcClientDeathHandler: android.os.IBinder getBinder()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()> -> _SINK_
<android.net.SntpClient: long getNtpTimeReference()> -> _SINK_
<android.telephony.SignalStrength: int getAsuLevel()> -> _SINK_
<android.telephony.CellIdentityCdma: int getLatitude()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()> -> _SINK_
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()> -> _SINK_
<com.android.server.AppWidgetServiceImpl: java.io.File getSettingsFile(int)> -> _SINK_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)> -> _SINK_
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()> -> _SINK_
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbEtwsInfo getEtwsInfo()> -> _SINK_
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getPassword()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccFileHandler getIccFileHandler()> -> _SINK_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getMasterVolume()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()> -> _SINK_
<android.telephony.CellInfo$1: android.telephony.CellInfo createFromParcel(android.os.Parcel)> -> _SINK_
<android.telephony.SignalStrength: int getEvdoDbm()> -> _SINK_
<com.android.server.RecognitionManagerService: android.content.ComponentName findAvailRecognizer(java.lang.String,int)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: float findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdn()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()> -> _SINK_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(int,android.net.NetworkStatsHistory$Entry)> -> _SINK_
<android.telephony.SignalStrength: int getLteDbm()> -> _SINK_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> -> _SINK_
<android.telephony.CellIdentityCdma: int getBasestationId()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.Connection: com.android.internal.telephony.Call$State getState()> -> _SINK_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMin()> -> _SINK_
<android.telephony.SignalStrength: int getLteCqi()> -> _SINK_
<com.android.server.NsdService$NsdStateMachine: java.lang.String getWhatToString(int)> -> _SINK_
<com.android.internal.telephony.DataCallState: java.lang.String toString()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SINK_
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.telephony.SmsMessage: int getProtocolIdentifier()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: java.security.PrivateKey getPrivateKeyById(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: int getCapitalizationType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getNid()> -> _SINK_
<android.telephony.SmsMessage: int getIndexOnIcc()> -> _SINK_
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()> -> _SINK_
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)> -> _SINK_
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()> -> _SINK_
<android.net.wifi.WifiManager: int getWifiState()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.DhcpInfoInternal getIpConfiguration(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)> -> _SINK_
<android.net.MobileDataStateTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()> -> _SINK_
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)> -> _SINK_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()> -> _SINK_
<android.net.wifi.WifiManager: int getWifiApState()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()> -> _SINK_
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)> -> _SINK_
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> -> _SINK_
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)> -> _SINK_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()> -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: int getApiLevel()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> -> _SINK_
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: byte[] access$300(org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream)> -> _SINK_
<android.net.Uri$Part: java.lang.String getEncoded()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getProxyAddress()> -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.DctConstants$Activity getActivity()> -> _SINK_
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()> -> _SINK_
<com.android.internal.telephony.IccProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.server.am.ActivityManagerService: int getRequestedOrientation(android.os.IBinder)> -> _SINK_
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()> -> _SINK_
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getLanguage()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()> -> _SINK_
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)> -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: android.os.Bundle getConfigurationData(java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getRingerMode()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()> -> _SINK_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccRecords getIccRecords(int)> -> _SINK_
<android.net.ThrottleManager: long getResetTime(java.lang.String)> -> _SINK_
<android.net.LinkProperties: java.util.Collection getRoutes()> -> _SINK_
<com.android.phone.EmergencyCallbackModeService: boolean getEmergencyCallbackModeCallState()> -> _SINK_
<android.net.ProxyProperties: java.lang.String getExclusionList()> -> _SINK_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)> -> _SINK_
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()> -> _SINK_
<android.net.WebAddress: java.lang.String getPath()> -> _SINK_
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> -> _SINK_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SINK_
<android.media.AudioService$VolumeStreamState: int getStreamType()> -> _SINK_
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RetryManager: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> -> _SINK_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()> -> _SINK_
<android.net.MobileDataStateTracker: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> -> _SINK_
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()> -> _SINK_
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)> -> _SINK_
<com.android.server.am.ProcessList: long getMemLevel(int)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategory()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()> -> _SINK_
<android.telephony.SignalStrength: int getGsmAsuLevel()> -> _SINK_
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: java.util.Collection getGroupList()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getRingingPhone()> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SINK_
<android.net.LinkAddress: int getNetworkPrefixLength()> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()> -> _SINK_
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getProtocol()> -> _SINK_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)> -> _SINK_
<android.telephony.CellSignalStrengthLte: int getDbm()> -> _SINK_
<android.net.LocalSocketAddress: java.lang.String getName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandom()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getModulus()> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()> -> _SINK_
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()> -> _SINK_
<android.net.ProxyProperties: int getPort()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getCertainty()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> -> _SINK_
<com.android.internal.telephony.cat.BerTlv: int getTag()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)> -> _SINK_
<android.telephony.SmsMessage: int getIndexOnSim()> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()> -> _SINK_
<com.android.server.pm.UserManagerService: int[] getUserIdsLPr()> -> _SINK_
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte copy()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])> -> _SINK_
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()> -> _SINK_
<android.telephony.SignalStrength: int getLteLevel()> -> _SINK_
<com.android.server.WifiService: int getWifiEnabledState()> -> _SINK_
<com.android.internal.telephony.Connection: java.lang.Object getUserData()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()> -> _SINK_
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.ThrottleService: java.lang.String getHelpUri()> -> _SINK_
<com.android.internal.telephony.DriverCall: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName,int)> -> _SINK_
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getSid()> -> _SINK_
<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()> -> _SINK_
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()> -> _SINK_
<com.android.server.wm.WindowManagerService$4: float getInterpolation(float)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccRecords getIccRecords()> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()> -> _SINK_
<android.net.rtp.AudioGroup: int getMode()> -> _SINK_
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getText()> -> _SINK_
<android.telephony.ServiceState: int getSystemId()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoWriteTimeout()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()> -> _SINK_
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SINK_
<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()> -> _SINK_
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)> -> _SINK_
<android.telephony.CellIdentityLte: int getCi()> -> _SINK_
<com.android.server.pm.PackageManagerService$HandlerParams: android.os.UserHandle getUser()> -> _SINK_
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()> -> _SINK_
<com.android.providers.telephony.SmsProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SINK_
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)> -> _SINK_
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object,int)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> -> _SINK_
<java.lang.ClassLoader: java.lang.ClassLoader getParent()> -> _SINK_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager$StitchSession popNextSession()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLineCtrlZ()> -> _SINK_
<android.telephony.NeighboringCellInfo: int getNetworkType()> -> _SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()> -> _SINK_
<android.media.AudioService: int getRemoteStreamVolume()> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: int getAccountColor(long)> -> _SINK_
<javax.net.ssl.SSLContext: java.lang.String getProtocol()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: int getLanguage()> -> _SINK_
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()> -> _SINK_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()> -> _SINK_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()> -> _SINK_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()> -> _SINK_
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()> -> _SINK_
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getService(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)> -> _SINK_
<android.net.WebAddress: java.lang.String getAuthInfo()> -> _SINK_
<android.telephony.SignalStrength: int getGsmBitErrorRate()> -> _SINK_
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.NetworkStats: long getElapsedRealtimeAge()> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.telephony.SignalStrength: int getCdmaDbm()> -> _SINK_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()> -> _SINK_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> -> _SINK_
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()> -> _SINK_
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimCdmaHomeLoaded: java.lang.String getEfName()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getBackgroundCall()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForToken(android.os.IBinder)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: boolean getActiveWindowBounds(android.graphics.Rect)> -> _SINK_
<android.net.wifi.WifiConfiguration: int getAuthType()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getInDictEmptySuggestions()> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: int getStreamType()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> -> _SINK_
<android.telephony.SmsCbMessage: int getSerialNumber()> -> _SINK_
<android.net.sip.SipProfile: boolean getAutoRegistration()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> -> _SINK_
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint64()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()> -> _SINK_
<android.net.http.Headers: long getTransferEncoding()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> -> _SINK_
<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()> -> _SINK_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()> -> _SINK_
<android.net.Uri: java.util.Set getQueryParameterNames()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()> -> _SINK_
<com.android.internal.telephony.cat.CommandParams: com.android.internal.telephony.cat.AppInterface$CommandType getCommandType()> -> _SINK_
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()> -> _SINK_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()> -> _SINK_
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)> -> _SINK_
<com.android.server.net.NetworkStatsService: java.lang.String[] getMobileIfaces()> -> _SINK_
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> -> _SINK_
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()> -> _SINK_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()> -> _SINK_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)> -> _SINK_
<android.net.ProxyProperties: java.lang.String getHost()> -> _SINK_
<android.telephony.CellIdentityCdma: int getLongitude()> -> _SINK_
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()> -> _SINK_
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()> -> _SINK_
<android.telephony.SignalStrength: int getCdmaEcio()> -> _SINK_
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)> -> _SINK_
<com.android.server.InputMethodManagerService$ImeSubtypeListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()> -> _SINK_
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()> -> _SINK_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodFileManager: java.util.HashMap getAllAdditionalInputMethodSubtypes()> -> _SINK_
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> -> _SINK_
<android.media.AudioService: int getMasterMaxVolume()> -> _SINK_
<android.telephony.SmsCbMessage: int getMessagePriority()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: int getPort()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getFgPhone()> -> _SINK_
<android.telephony.TelephonyManager: int getPhoneType(int)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int getTransactionId()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()> -> _SINK_
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeP()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()> -> _SINK_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()> -> _SINK_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma copy()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()> -> _SINK_
<android.net.NetworkIdentity: int getSubType()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: int getMaxMessages()> -> _SINK_
<com.android.email.RefreshManager$Status: long getLastRefreshTime()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> -> _SINK_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: java.lang.Class loadClass(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)> -> _SINK_
<javax.net.ssl.SSLContext: java.security.Provider getProvider()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getQuery()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimImsimLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.internal.telephony.DataConnection: int getRilRadioTechnology(int)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> -> _SINK_
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()> -> _SINK_
<android.net.INetworkStatsSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.telephony.SignalStrength: int getEvdoSnr()> -> _SINK_
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()> -> _SINK_
<com.android.server.MountService$ObbAction: android.content.res.ObbInfo getObbInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()> -> _SINK_
<com.android.server.am.ActiveServices: java.util.List getRunningServiceInfoLocked(int,int)> -> _SINK_
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getResponseType()> -> _SINK_
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()> -> _SINK_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: java.lang.String getSupplicantQuery()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)> -> _SINK_
<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnection: boolean isRetryForever()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getSipDomain()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo,int)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()> -> _SINK_
<com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()> -> _SINK_
<android.net.http.Headers: java.lang.String getEtag()> -> _SINK_
<android.media.AudioService$VolumeStreamState: int getMaxIndex()> -> _SINK_
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()> -> _SINK_
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.IccCardProxy: boolean getIccRecordsLoaded()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsDetail()> -> _SINK_
<android.net.Uri: java.lang.String toSafeString()> -> _SINK_
<com.android.server.pm.PackageManagerService: int getInstallLocation()> -> _SINK_
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.UiccCard)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getRetrievalAllowingWindowLocked()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()> -> _SINK_
<android.inputmethodservice.Keyboard: java.util.List getKeys()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()> -> _SINK_
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMessageListStatusForTest(long)> -> _SINK_
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityEvent getLastAccessibilityEvent()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleMasterVolume()> -> _SINK_
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()> -> _SINK_
<android.inputmethodservice.Keyboard: int getKeyHeight()> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()> -> _SINK_
<com.android.server.BackupManagerService$PerformFullRestoreTask: com.android.server.BackupManagerService$RestorePolicy readAppManifest(com.android.server.BackupManagerService$FileMetadata,java.io.InputStream)> -> _SINK_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()> -> _SINK_
<com.android.server.wm.WindowManagerService: int getAppOrientation(android.view.IApplicationToken)> -> _SINK_
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getUserName()> -> _SINK_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()> -> _SINK_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()> -> _SINK_
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> -> _SINK_
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()> -> _SINK_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)> -> _SINK_
<android.net.wifi.WifiSsid: java.lang.String getHexString()> -> _SINK_
<android.net.MobileDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()> -> _SINK_
<android.service.dreams.IDreamManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.telephony.SignalStrength: int getDbm()> -> _SINK_
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: int getCurrentUserId()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)> -> _SINK_
<android.net.WebAddress: int getPort()> -> _SINK_
<android.net.WebAddress: java.lang.String getScheme()> -> _SINK_
<com.android.email.widget.WidgetManager: com.android.email.widget.WidgetManager getInstance()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> -> _SINK_
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()> -> _SINK_
<android.media.AudioService$ScoClient: int getCount()> -> _SINK_
<android.net.rtp.RtpStream: int getMode()> -> _SINK_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)> -> _SINK_
<com.android.server.MountService: int getEncryptionState()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> -> _SINK_
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)> -> _SINK_
<android.net.NetworkQuotaInfo: long getEstimatedBytes()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()> -> _SINK_
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)> -> _SINK_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()> -> _SINK_
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()> -> _SINK_
<android.telephony.ServiceState: int getRadioTechnology()> -> _SINK_
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()> -> _SINK_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getSelectedInputMethod()> -> _SINK_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$100(com.android.internal.telephony.cdma.RuimRecords)> -> _SINK_
<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardStatus$PinState getPin1State()> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState PersoSubstateFromRILInt(int)> -> _SINK_
<com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)> -> _SINK_
<com.android.server.TwilightService$TwilightState: long getTomorrowSunrise()> -> _SINK_
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()> -> _SINK_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)> -> _SINK_
<android.net.TrafficStats: long getTxPackets(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)> -> _SINK_
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.TrafficStats: long getTotalRxBytes()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()> -> _SINK_
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryXt()> -> _SINK_
<com.android.internal.telephony.Connection: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)> -> _SINK_
<android.net.wifi.WifiManager: java.util.List getScanResults()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> -> _SINK_
<android.net.wifi.WifiInfo: int getLinkSpeed()> -> _SINK_
<android.net.TrafficStats: long getRxPackets(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> -> _SINK_
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getDeviceType()> -> _SINK_
<com.android.internal.widget.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()> -> _SINK_
<com.android.server.am.ActivityManagerService: int getCurrentUserIdLocked()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()> -> _SINK_
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getFormat()> -> _SINK_
<com.android.internal.telephony.gsm.GsmSmsCbMessage: android.telephony.SmsCbMessage createSmsCbMessage(android.telephony.SmsCbLocation,byte[][])> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)> -> _SINK_
<android.telephony.SignalStrength: int getLevel()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getScheme()> -> _SINK_
<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> -> _SINK_
<android.net.NetworkIdentity: int getType()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getPrivateExponent()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getNeedClientAuth()> -> _SINK_
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()> -> _SINK_
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.lang.String getCallingPackage(android.os.IBinder)> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getX()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getY()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getP()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getQ()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getG()> -> _SINK_
<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveBgCall()> -> _SINK_
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()> -> _SINK_
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: int getResult()> -> _SINK_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()> -> _SINK_
<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> -> _SINK_
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()> -> _SINK_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()> -> _SINK_
<com.android.server.WifiService$Multicaster: int getUid()> -> _SINK_
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> -> _SINK_
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$400(android.net.sip.SipAudioCall,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()> -> _SINK_
<com.android.internal.telephony.Call: long getEarliestConnectTime()> -> _SINK_
<android.net.http.Headers: java.lang.String getPragma()> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: int getDisplayRule(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()> -> _SINK_
<android.net.NetworkInfo: int getType()> -> _SINK_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()> -> _SINK_
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: int getPremiumSmsPermission(java.lang.String)> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)> -> _SINK_
<android.net.nsd.INsdManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()> -> _SINK_
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> -> _SINK_
<com.android.email.activity.RecentMailboxManager: java.util.ArrayList getMostRecent(long,boolean)> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()> -> _SINK_
<com.android.internal.telephony.AdnRecord: java.lang.String toString()> -> _SINK_
<android.net.TrafficStats: long getTotalRxPackets()> -> _SINK_
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()> -> _SINK_
<android.media.AudioService: int getRingerMode()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()> -> _SINK_
<com.android.server.wm.WindowManagerService: int getPendingAppTransition()> -> _SINK_
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$000(com.android.internal.telephony.cdma.RuimRecords)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)> -> _SINK_
<android.telephony.SignalStrength: java.lang.String toString()> -> _SINK_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SINK_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()> -> _SINK_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()> -> _SINK_
<android.media.AudioService$VolumeStreamState: java.util.concurrent.ConcurrentHashMap getAllIndexes(boolean)> -> _SINK_
<android.telephony.CellSignalStrengthGsm: int getLevel()> -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()> -> _SINK_
<android.net.http.Headers: java.lang.String getAcceptRanges()> -> _SINK_
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(int)> -> _SINK_
<com.android.internal.telephony.CsimFileHandler: java.lang.String getEFPath(int)> -> _SINK_
<android.net.wifi.WifiInfo: int getIpAddress()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()> -> _SINK_
<android.media.AudioService: int getRemoteStreamMaxVolume()> -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SINK_
<android.view.textservice.SuggestionsInfo: int getCookie()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getHost()> -> _SINK_
<android.app.Service: java.lang.String getClassName()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()> -> _SINK_
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()> -> _SINK_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> -> _SINK_
<android.net.LocalSocket: int getSendBufferSize()> -> _SINK_
<com.android.exchange.ExchangeService: int getStatusChangeCount(java.lang.String)> -> _SINK_
<android.view.textservice.TextInfo: int getCookie()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()> -> _SINK_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,android.net.NetworkStatsHistory$Entry)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()> -> _SINK_
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)> -> _SINK_
<java.security.Provider$Service: java.util.List getAliases()> -> _SINK_
<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> -> _SINK_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()> -> _SINK_
<java.lang.BootClassLoader: java.net.URL getResource(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)> -> _SINK_
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)> -> _SINK_
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()> -> _SINK_
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()> -> _SINK_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppState AppStateFromRILInt(int)> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()> -> _SINK_
<android.net.rtp.RtpStream: int getRemotePort()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.io.File getDataPathForUser(int)> -> _SINK_
<com.android.server.NotificationManagerService: long[] getLongArray(android.content.res.Resources,int,int,long[])> -> _SINK_
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()> -> _SINK_
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceClient$Stub: android.os.IBinder asBinder()> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccRecords getIccRecords()> -> _SINK_
<com.android.internal.telephony.RestrictedState: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<android.net.NetworkStats: long getElapsedRealtime()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()> -> _SINK_
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SINK_
<com.android.email.service.MailService: java.util.ArrayList getPopImapAccountList(android.content.Context)> -> _SINK_
<android.media.AudioService: int getLastAudibleMasterVolume()> -> _SINK_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()> -> _SINK_
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()> -> _SINK_
<android.net.wifi.WifiSsid: byte[] getOctets()> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getRingingCall()> -> _SINK_
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SINK_
<android.net.Uri$PathPart: java.lang.String getEncoded()> -> _SINK_
<com.android.email.mail.store.ImapStore: java.util.Collection getConnectionPoolForTest()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)> -> _SINK_
<android.net.wifi.WifiNative: int getGroupCapability(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison,int)> -> _SINK_
<android.net.sip.SipAudioCall: int getState()> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: android.os.Bundle getConfigurationData(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)> -> _SINK_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()> -> _SINK_
<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.MagnificationSpec getDisplayMagnificationSpecLocked(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()> -> _SINK_
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: int getPackageScreenCompatMode(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()> -> _SINK_
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()> -> _SINK_
<android.net.ConnectivityManager: int tether(java.lang.String)> -> _SINK_
<com.android.email.RefreshManager: com.android.email.RefreshManager getInstance(android.content.Context)> -> _SINK_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)> -> _SINK_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState getPersoSubState()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> -> _SINK_
<android.app.Service: android.app.Application getApplication()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> -> _SINK_
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)> -> _SINK_
<android.telephony.NeighboringCellInfo: int getLac()> -> _SINK_
<android.net.Uri$PathSegments: java.lang.Object get(int)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()> -> _SINK_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()> -> _SINK_
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()> -> _SINK_
<android.net.SntpClient: long getNtpTime()> -> _SINK_
<android.inputmethodservice.Keyboard: int getVerticalGap()> -> _SINK_
<android.net.NetworkStats: long getTotalBytes()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)> -> _SINK_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()> -> _SINK_
<android.net.Uri$StringUri: android.net.Uri$Builder buildUpon()> -> _SINK_
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()> -> _SINK_
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils: com.android.emailcommon.utility.SSLSocketFactory getHttpSocketFactory(boolean,javax.net.ssl.KeyManager)> -> _SINK_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()> -> _SINK_
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()> -> _SINK_
<android.telephony.SignalStrength: int getCdmaLevel()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: byte[] getEncoded()> -> _SINK_
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> -> _SINK_
<com.android.server.am.ActiveServices: android.app.PendingIntent getRunningServiceControlPanelLocked(android.content.ComponentName)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getUseClientMode()> -> _SINK_
<android.telephony.CellIdentityGsm: int getMnc()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: byte[] read(int)> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getBgPhone()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> -> _SINK_
<com.android.exchange.EasOutboxService$SendMailParser: int getStatus()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()> -> _SINK_
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SINK_
<android.net.NetworkStatsHistory: int getIndexBefore(long)> -> _SINK_
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()> -> _SINK_
<android.net.NetworkInfo: java.lang.String getTypeName()> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()> -> _SINK_
<android.telephony.SmsMessage: int getStatus()> -> _SINK_
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()> -> _SINK_
<android.telephony.CellIdentityGsm: int getMcc()> -> _SINK_
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()> -> _SINK_
<android.net.nsd.NsdServiceInfo: android.net.nsd.DnsSdTxtRecord getTxtRecord()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)> -> _SINK_
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getEmailBody()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)> -> _SINK_
<com.android.server.WifiService: int getWifiApEnabledState()> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()> -> _SINK_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SINK_
<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()> -> _SINK_
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppType getType()> -> _SINK_
<android.net.wifi.NetworkUpdateResult: int getNetworkId()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfPlLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.internal.telephony.CallerInfo: java.lang.String toString()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> -> _SINK_
<android.media.AudioService$ScoClient: android.os.IBinder getBinder()> -> _SINK_
<android.telephony.CellIdentityGsm: int getLac()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()> -> _SINK_
<com.android.phone.BluetoothPhoneService$3: java.lang.String getNetworkOperator()> -> _SINK_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.net.nsd.INsdManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<android.net.wifi.WifiNative: java.lang.String getMacAddress()> -> _SINK_
<android.telephony.NeighboringCellInfo: int getPsc()> -> _SINK_
<android.telephony.SignalStrength: int getCdmaAsuLevel()> -> _SINK_
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getBSSID()> -> _SINK_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()> -> _SINK_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()> -> _SINK_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)> -> _SINK_
<android.telephony.ServiceState: int getCssIndicator()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()> -> _SINK_
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getGeographicalScope()> -> _SINK_
<android.net.wifi.WifiStateTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getUriString()> -> _SINK_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()> -> _SINK_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()> -> _SINK_
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.LinkProperties getLinkProperties(int)> -> _SINK_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()> -> _SINK_
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine(boolean)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()> -> _SINK_
<android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SINK_
<android.net.TrafficStats: long getMobileTxBytes()> -> _SINK_
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getActiveFgCall()> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()> -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: int getApiLevel()> -> _SINK_
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)> -> _SINK_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager getInstance(android.content.Context,com.android.internal.telephony.CommandsInterface,android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.ServiceWatcher: java.lang.String getBestPackageName()> -> _SINK_
<com.android.email.RefreshManager: boolean isRefreshingAnyMessageListForTest()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getInstance(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> -> _SINK_
<android.inputmethodservice.InputMethodService: int getBackDisposition()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppState getState()> -> _SINK_
<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()> -> _SINK_
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()> -> _SINK_
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> -> _SINK_
<com.android.server.wm.WindowManagerService: android.view.WindowInfo getWindowInfo(android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> -> _SINK_
<java.security.Provider$Service: java.lang.String getClassName()> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -> _SINK_
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.OperatorInfo: com.android.internal.telephony.OperatorInfo$State getState()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> -> _SINK_
<com.android.internal.telephony.IccCardApplicationStatus: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamVolume()> -> _SINK_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)> -> _SINK_
<com.android.server.TwilightService$TwilightState: long getTodaySunset()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SINK_
<com.android.server.BackupManagerService: java.util.List allAgentPackages()> -> _SINK_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<org.apache.harmony.security.fortress.Services: int getCacheVersion()> -> _SINK_
<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> -> _SINK_
<android.net.DummyDataStateTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<android.net.wifi.WifiConfiguration: java.lang.String getPrintableSsid()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<android.telephony.ServiceState: int getCdmaRoamingIndicator()> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getUrgency()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getWrappedHostName()> -> _SINK_
<android.media.AudioService$SetModeDeathHandler: int getMode()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()> -> _SINK_
<com.android.server.ClipboardService: android.content.ClipDescription getPrimaryClipDescription()> -> _SINK_
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.Intent createAppErrorIntentLocked(com.android.server.am.ProcessRecord,long,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> -> _SINK_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)> -> _SINK_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()> -> _SINK_
<android.net.NetworkPolicyManager: boolean getRestrictBackground()> -> _SINK_
<android.net.NetworkStatsHistory: long getTotalBytes()> -> _SINK_
<android.net.RouteInfo: java.net.InetAddress getGateway()> -> _SINK_
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)> -> _SINK_
<com.android.email.mail.store.ImapStore: com.android.email.mail.store.ImapConnection getConnection()> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SINK_
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()> -> _SINK_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()> -> _SINK_
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getPath()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getPkeyAlias()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> -> _SINK_
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.view.textservice.TextInfo: int getSequence()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()> -> _SINK_
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> -> _SINK_
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.NetworkStatsHistory: long getStart()> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.server.UiModeManagerService: int getCurrentModeType()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.SslCertificate$DName: java.lang.String getUName()> -> _SINK_
<android.telephony.ServiceState: int getCdmaEriIconIndex()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getMode()> -> _SINK_
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()> -> _SINK_
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)> -> _SINK_
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()> -> _SINK_
<android.telephony.CellIdentityGsm: int getCid()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()> -> _SINK_
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> -> _SINK_
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)> -> _SINK_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<android.telephony.CellInfoCdma$1: android.telephony.CellInfoCdma createFromParcel(android.os.Parcel)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()> -> _SINK_
<android.net.EthernetDataTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: long getLastCertReqTime()> -> _SINK_
<android.net.rtp.AudioStream: int getDtmfType()> -> _SINK_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: java.util.List getSupplicantQueryList()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)> -> _SINK_
<android.telephony.SignalStrength: int getLteSignalStrenght()> -> _SINK_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getIMSI()> -> _SINK_
<android.net.LinkProperties: java.util.Collection getDnses()> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()> -> _SINK_
<com.android.internal.telephony.DataConnection: int getRetryTimer()> -> _SINK_
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()> -> _SINK_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getRingingCalls()> -> _SINK_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getNativeLibraryPath()> -> _SINK_
<android.net.ThrottleManager: java.lang.String getHelpUri()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()> -> _SINK_
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document parse(org.xml.sax.InputSource)> -> _SINK_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate,int,int,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimSpnLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()> -> _SINK_
<org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()> -> _SINK_
<com.android.server.MountService: java.lang.String[] getSecureContainerList()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getPkeyAlias()> -> _SINK_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DctConstants$State getState()> -> _SINK_
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()> -> _SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: float getFloatParam(java.lang.String,float)> -> _SINK_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()> -> _SINK_
<android.telephony.SmsCbMessage: int getMessageFormat()> -> _SINK_
<com.android.email.activity.MessageOrderManager: int getTotalMessageCount()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()> -> _SINK_
<com.android.email.Throttle: long getLastEventTimeForTest()> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()> -> _SINK_
<com.android.email.activity.MessageOrderManager: int getCurrentPosition()> -> _SINK_
<android.telephony.ServiceState: boolean getRoaming()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()> -> _SINK_
<com.android.server.am.ActivityManagerService: int getProcessLimit()> -> _SINK_
<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$102(com.android.internal.telephony.cdma.RuimRecords,byte[])> -> _SINK_
<com.android.internal.telephony.DataConnection: int getDataConnectionId()> -> _SINK_
<com.android.phone.EmergencyCallbackModeService: long getEmergencyCallbackModeTimeout()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()> -> _SINK_
<com.android.server.am.UsageStatsService: com.android.internal.app.IUsageStats getService()> -> _SINK_
<android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()> -> _SINK_
<android.telephony.TelephonyManager: int getNetworkClass(int)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()> -> _SINK_
<android.telephony.TelephonyManager: int getCurrentPhoneType()> -> _SINK_
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)> -> _SINK_
<android.net.http.Headers: java.lang.String getContentEncoding()> -> _SINK_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: int getEngineContext()> -> _SINK_
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)> -> _SINK_
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)> -> _SINK_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()> -> _SINK_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()> -> _SINK_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()> -> _SINK_
<android.telephony.SignalStrength: int getGsmSignalStrength()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> -> _SINK_
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()> -> _SINK_
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> -> _SINK_
<android.service.dreams.IDreamService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.telephony.SignalStrength: int getLteRssnr()> -> _SINK_
<com.android.exchange.ExchangeService: java.lang.String getEasAccountSelector()> -> _SINK_
<com.android.server.am.ActivityManagerService: int getFrontActivityScreenCompatMode()> -> _SINK_
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)> -> _SINK_
<android.telephony.SmsCbMessage: int getGeographicalScope()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)> -> _SINK_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotalIncludingTags(android.net.NetworkStats$Entry)> -> _SINK_
<android.telephony.SmsCbMessage: int getServiceCategory()> -> _SINK_
<com.android.exchange.ExchangeService: com.android.exchange.ExchangeService$AccountList access$600(android.content.Context,com.android.exchange.ExchangeService$AccountList)> -> _SINK_
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> -> _SINK_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()> -> _SINK_
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()> -> _SINK_
<com.android.server.ServiceWatcher: int getBestVersion()> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()> -> _SINK_
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getPeerPort()> -> _SINK_
<android.telephony.NeighboringCellInfo: int getRssi()> -> _SINK_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()> -> _SINK_
<android.net.LinkProperties$1: android.net.LinkProperties createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()> -> _SINK_
<org.apache.http.HttpHost: java.lang.String getHostName()> -> _SINK_
<com.android.internal.telephony.UUSInfo: int getDcs()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()> -> _SINK_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()> -> _SINK_
<android.telephony.SmsCbMessage: android.telephony.SmsCbLocation getLocation()> -> _SINK_
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)> -> _SINK_
<android.telephony.ServiceState: java.lang.String toString()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictionaryPool getDictionaryPool(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getPeerHostName()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()> -> _SINK_
<com.android.internal.telephony.CallManager: int getServiceState()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getFgCallConnections()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()> -> _SINK_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager getStitchingServiceManager(android.content.Context)> -> _SINK_
<com.android.server.wm.WindowManagerService: int getLidState()> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.res.ObbInfo getObbInfo(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()> -> _SINK_
<android.net.RouteInfo: android.net.LinkAddress getDestination()> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getAuthUserName()> -> _SINK_
<android.net.NetworkInfo: java.lang.String getSubtypeName()> -> _SINK_
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()> -> _SINK_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<android.net.http.Connection: boolean getCanPersist()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()> -> _SINK_
<android.net.rtp.RtpStream: int getLocalPort()> -> _SINK_
<android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()> -> _SINK_
<android.media.AudioService: int getMode()> -> _SINK_
<android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> -> _SINK_
<android.net.wifi.WifiConfigStore: java.util.List getConfiguredNetworks()> -> _SINK_
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)> -> _SINK_
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.SmsMessage: long getTimestampMillis()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()> -> _SINK_
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.RefreshManager$RefreshStatusMap: com.android.email.RefreshManager$Status get(long)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()> -> _SINK_
<com.android.providers.media.IMtpService$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()> -> _SINK_
<android.net.SntpClient: long getRoundTripTime()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()> -> _SINK_
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getSeverity()> -> _SINK_
<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)> -> _SINK_
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)> -> _SINK_
<com.android.server.ConnectivityService: android.net.ProxyProperties getProxy()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()> -> _SINK_
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()> -> _SINK_
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<com.android.server.wm.WindowManagerService: float[] getAnimationScales()> -> _SINK_
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> -> _SINK_
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getPeerPort()> -> _SINK_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SINK_
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()> -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: java.lang.String getDeviceId()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()> -> _SINK_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)> -> _SINK_
<com.android.server.pm.UserManagerService: int[] getUserIds()> -> _SINK_
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()> -> _SINK_
<android.net.Uri$OpaqueUri: int getPort()> -> _SINK_
<com.android.server.UiModeManagerService: int getNightMode()> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: long getPeriodTx(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: long getPeriodRx(int)> -> _SINK_
<android.telephony.CellIdentityGsm: int getPsc()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()> -> _SINK_
<com.android.server.ThrottleService: long getResetTime(java.lang.String)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SINK_
<android.telephony.TelephonyManager: int getVoiceMessageCount()> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()> -> _SINK_
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()> -> _SINK_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()> -> _SINK_
<android.telephony.ServiceState: boolean getIsManualSelection()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()> -> _SINK_
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()> -> _SINK_
<android.net.http.RequestHandle: int getRedirectCount()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()> -> _SINK_
<android.telephony.CellIdentityCdma: int getSystemId()> -> _SINK_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()> -> _SINK_
<android.telephony.SignalStrength: int getEvdoAsuLevel()> -> _SINK_
<android.inputmethodservice.SoftInputWindow: int getSize()> -> _SINK_
<com.google.android.picasastore.HttpUtils$MetricsTrackingConnectionManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getEngine()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()> -> _SINK_
<android.media.AudioService: int getMasterStreamType()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -> _SINK_
<android.media.AudioService$VolumeStreamState: int getIndex(int,boolean)> -> _SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.activity.MessageOrderManager: com.android.email.MessageListContext getListContext()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getScheme()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()> -> _SINK_
<android.net.EthernetDataTracker: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<java.lang.BootClassLoader: java.util.Enumeration getResources(java.lang.String)> -> _SINK_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()> -> _SINK_
<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()> -> _SINK_
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()> -> _SINK_
<android.net.DummyDataStateTracker: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.Address get(int)> -> _SINK_
<android.net.TrafficStats: long getTxBytes(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()> -> _SINK_
<android.media.AudioService: android.media.IRingtonePlayer getRingtonePlayer()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.pm.PackageInfoLite getMinimalPackageInfo(java.lang.String,int,long)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()> -> _SINK_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: int getPkeyContext()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getMessageBody()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.security.interfaces.DSAParams getParams()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()> -> _SINK_
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()> -> _SINK_
<android.net.http.Headers: java.util.ArrayList getSetCookie()> -> _SINK_
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()> -> _SINK_
<android.telephony.TelephonyManager: int getSimState()> -> _SINK_
<com.android.server.input.InputManagerService: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SINK_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()> -> _SINK_
<java.security.Provider$Service: java.lang.String getType()> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])> -> _SINK_
<com.android.server.BatteryService: int getPlugType()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getForegroundCall()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()> -> _SINK_
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()> -> _SINK_
<com.android.email.Throttle: int getTimeoutForTest()> -> _SINK_
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()> -> _SINK_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SINK_
<android.net.TrafficStats: long getMobileRxBytes()> -> _SINK_
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> -> _SINK_
<com.android.server.display.DisplayManagerService: int[] getDisplayIds()> -> _SINK_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$CardState getCardState()> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.android.gsf.Gservices: java.util.Map getStringsByPrefix(android.content.ContentResolver,java.lang.String[])> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getAuthority()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()> -> _SINK_
<com.android.server.WallpaperManagerService: java.lang.String getName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: int getRotation()> -> _SINK_
<android.net.TrafficStats: long getMobileTxPackets()> -> _SINK_
<android.service.dreams.IDreamManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.inputmethodservice.Keyboard: int getHorizontalGap()> -> _SINK_
<android.net.http.SslCertificate$DName: java.lang.String getCName()> -> _SINK_
<android.net.wifi.WifiInfo: int getNetworkId()> -> _SINK_
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: java.lang.String getLocale()> -> _SINK_
<android.net.wifi.WifiNative: int getBand()> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)> -> _SINK_
<android.telephony.CellIdentityCdma: int getNetworkId()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> -> _SINK_
<android.net.NetworkIdentity: java.lang.String getSubscriberId()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$002(com.android.internal.telephony.cdma.RuimRecords,byte[])> -> _SINK_
<android.net.http.Request: android.net.http.EventHandler getEventHandler()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> -> _SINK_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.lang.String getProviderMimeType(android.net.Uri,int)> -> _SINK_
<com.android.server.WifiService: java.lang.String getConfigFile()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<android.net.TrafficStats: long getRxBytes(java.lang.String)> -> _SINK_
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()> -> _SINK_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getDefaultPhone()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()> -> _SINK_
<com.android.exchange.AbstractSyncService: void <init>(android.content.Context,com.android.emailcommon.provider.Mailbox)> -> _SINK_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()> -> _SINK_
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()> -> _SINK_
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()> -> _SINK_
<com.android.internal.telephony.UUSInfo: byte[] getUserData()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()> -> _SINK_
<com.android.internal.telephony.gsm.SimTlv: int getTag()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> -> _SINK_
<com.android.email.service.AttachmentDownloadService: int getQueueSize()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimLiLoaded: java.lang.String getEfName()> -> _SINK_
<android.telephony.CellInfo: java.lang.String toString()> -> _SINK_
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()> -> _SINK_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()> -> _SINK_
<android.net.sip.SipProfile: int getPort()> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()> -> _SINK_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> -> _SINK_
<android.telephony.TelephonyManager: int getCdmaEriIconMode()> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()> -> _SINK_
<android.telephony.SmsMessage: int getStatusOnSim()> -> _SINK_
<android.net.NetworkStats: int[] getUniqueUids()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccCardConstants$State getState()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getFragment()> -> _SINK_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()> -> _SINK_
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: int getPkeyContext()> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: java.util.Collection getAllServices(int)> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getNumberOfPages()> -> _SINK_
<com.android.exchange.EasSyncService: java.lang.String getTargetCollectionClassFromCursor(android.database.Cursor)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey getInstance(org.apache.harmony.xnet.provider.jsse.OpenSSLKey)> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)> -> _SINK_
<android.telephony.SmsCbCmasInfo: int getMessageClass()> -> _SINK_
<android.telephony.SmsCbMessage: java.lang.String toString()> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccFileHandler getIccFileHandler(int)> -> _SINK_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppType AppTypeFromRILInt(int)> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsUidDetail(int)> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getAllPhones()> -> _SINK_
<android.view.textservice.SuggestionsInfo: int getSequence()> -> _SINK_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCard getUiccCard()> -> _SINK_
<com.android.email.activity.MessageOrderManager: android.os.Handler getHandlerForContentObserver()> -> _SINK_
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void getVisibleWindowsForDisplay(int,java.util.List)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.server.search.SearchManagerService: android.content.ComponentName getAssistIntent(int)> -> _SINK_
<android.net.DnsPinger: java.util.List getDnsList()> -> _SINK_
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()> -> _SINK_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> -> _SINK_
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doRename(int,java.lang.String,java.lang.String)> -> _SINK_
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getDataCodingScheme()> -> _SINK_
<android.net.wifi.WifiStateMachine: android.os.Messenger getMessenger()> -> _SINK_
<com.android.server.am.ActivityManagerService: int getUidForIntentSender(android.content.IIntentSender)> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getPath()> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getDbm()> -> _SINK_
<android.net.BaseNetworkStateTracker: android.os.Handler getTargetHandler()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()> -> _SINK_
<com.android.internal.telephony.IccIoResult: java.lang.String toString()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getLanguage()> -> _SINK_
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()> -> _SINK_
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbCmasInfo getCmasInfo()> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()> -> _SINK_
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)> -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> -> _SINK_
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)> -> _SINK_
<android.net.TrafficStats: long getTotalTxPackets()> -> _SINK_
<com.android.email.activity.RecentMailboxManager: com.android.email.activity.RecentMailboxManager getInstance(android.content.Context)> -> _SINK_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()> -> _SINK_
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)> -> _SINK_
<android.net.http.SslCertificate$DName: java.lang.String getOName()> -> _SINK_
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()> -> _SINK_
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> -> _SINK_
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)> -> _SINK_
<android.telephony.CellInfo: int hashCode()> -> _SINK_
<com.android.server.wm.WindowManagerService: int getPropertyInt(java.lang.String[],int,int,int,android.util.DisplayMetrics)> -> _SINK_
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()> -> _SINK_
<android.net.NetworkStatsHistory: long getEnd()> -> _SINK_
<com.android.email.activity.RecentMailboxManager: com.android.emailcommon.utility.EmailAsyncTask touch(long,long)> -> _SINK_
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityNodeInfo getRootAccessibilityNodeInfoInActiveWindow()> -> _SINK_
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)> -> _SINK_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison)> -> _SINK_
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: android.os.Bundle getBundle()> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceHolder getSurfaceHolder()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)> -> _SINK_
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> -> _SINK_
<com.android.server.SerialService: java.lang.String[] getSerialPorts()> -> _SINK_
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: float getPan()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()> -> _SINK_
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()> -> _SINK_
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()> -> _SINK_
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)> -> _SINK_
<android.telephony.ServiceState: int getNetworkId()> -> _SINK_
<android.net.NetworkStatsHistory: int getIndexAfter(long)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()> -> _SINK_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()> -> _SINK_
<android.media.AudioService: int getVibrateSetting(int)> -> _SINK_
<android.telephony.SignalStrength: int getEvdoEcio()> -> _SINK_
<android.media.AudioService$VolumeStreamState: java.lang.String getSettingNameForDevice(boolean,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()> -> _SINK_
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$13: int getLength()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)> -> _SINK_
<com.google.android.gsf.Gservices: java.lang.Object getVersionToken(android.content.ContentResolver)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()> -> _SINK_
<com.android.internal.telephony.ApnContext: java.lang.String getReason()> -> _SINK_
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)> -> _SINK_
<com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.UUSInfo: int getType()> -> _SINK_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)> -> _SINK_
<com.android.internal.telephony.CallManager: java.lang.String toString()> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getService(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()> -> _SINK_
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> -> _SINK_
<android.net.INetworkStatsSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.CountryDetectorService$Receiver: android.location.ICountryListener getListener()> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()> -> _SINK_
<android.widget.RemoteViewsService: java.lang.Object access$000()> -> _SINK_
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> -> _SINK_
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)> -> _SINK_
<android.net.LinkProperties: java.lang.String getInterfaceName()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()> -> _SINK_
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)> -> _SINK_
<android.net.NetworkStatsHistory: long getBucketDuration()> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection getFgCallLatestConnection()> -> _SINK_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)> -> _SINK_
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)> -> _SINK_
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SINK_
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()> -> _SINK_
<android.telephony.SmsMessage: int getStatusOnIcc()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)> -> _SINK_
<com.android.exchange.ExchangeService: com.android.emailcommon.utility.EmailClientConnectionManager getClientConnectionManager(boolean,int)> -> _SINK_
<android.widget.RemoteViewsService: java.util.HashMap access$100()> -> _SINK_
<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SINK_
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getClccLines()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()> -> _SINK_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()> -> _SINK_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()> -> _SINK_
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()> -> _SINK_
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)> -> _SINK_
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)> -> _SINK_
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallManager: java.util.List getForegroundCalls()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()> -> _SINK_
<android.os.INetworkManagementService$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: java.lang.String getAlias()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> -> _SINK_
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices(int)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()> -> _SINK_
<android.telephony.TelephonyManager: int getDataState()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.net.NetworkInfo: java.lang.String getExtraInfo()> -> _SINK_
<android.net.http.Connection: org.apache.http.HttpHost getHost()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaMmiCode: com.android.internal.telephony.MmiCode$State getState()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()> -> _SINK_
<android.telephony.SignalStrength: int getLteRsrq()> -> _SINK_
<android.telephony.SignalStrength: int getLteRsrp()> -> _SINK_
<android.telephony.NeighboringCellInfo: java.lang.String toString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: int getAlertOption()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()> -> _SINK_
<android.net.http.Headers: java.lang.String getLastModified()> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: int getPeriodCount()> -> _SINK_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$PostDialState getPostDialState()> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()> -> _SINK_
<android.telephony.SmsCbEtwsInfo: long getPrimaryNotificationTimestamp()> -> _SINK_
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.media.AudioService: int getStreamMaxVolume(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> -> _SINK_
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SINK_
<android.net.LinkAddress: java.net.InetAddress getAddress()> -> _SINK_
<android.net.nsd.DnsSdTxtRecord: byte[] access$000(android.net.nsd.DnsSdTxtRecord)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccFileHandler getIccFileHandler()> -> _SINK_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()> -> _SINK_
<android.telephony.SignalStrength: int getEvdoLevel()> -> _SINK_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()> -> _SINK_
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)> -> _SINK_
<java.lang.BootClassLoader: java.lang.Package getPackage(java.lang.String)> -> _SINK_
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: android.net.RouteInfo[] getRoutes(java.lang.String)> -> _SINK_
<com.android.email.activity.MessageOrderManager: android.database.Cursor access$500(com.android.email.activity.MessageOrderManager)> -> _SINK_
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.telephony.Call: long getEarliestCreateTime()> -> _SINK_
<android.net.LinkProperties: java.util.Collection getLinkAddresses()> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getMaxThroughput()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()> -> _SINK_
<android.net.LocalSocket: int getReceiveBufferSize()> -> _SINK_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)> -> _SINK_
<android.telephony.CellInfo: int getTimeStampType()> -> _SINK_
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings()> -> _SINK_
<android.net.wifi.WifiInfo: boolean getHiddenSSID()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long[] getFileSystemStats(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()> -> _SINK_
<android.net.http.Headers: java.lang.String getLocation()> -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()> -> _SINK_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()> -> _SINK_
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.math.BigInteger getX()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey)> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()> -> _SINK_
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()> -> _SINK_
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SINK_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(android.view.Display)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()> -> _SINK_
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: int getIntParam(java.lang.String,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: byte[] toNpnProtocolsList(byte[][])> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()> -> _SINK_
<android.net.http.AndroidHttpClientConnection: int getLocalPort()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)> -> _SINK_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: int getRecoveryAction()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()> -> _SINK_
<com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(boolean,int)> -> _SINK_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.AppInterface$CommandType getCmdType()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<com.android.internal.telephony.UsimFileHandler: java.lang.String getEFPath(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int getMasterMaxVolume()> -> _SINK_
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)> -> _SINK_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings()> -> _SINK_
<android.media.IAudioService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.phone.EmergencyCallbackModeService$LocalBinder: com.android.phone.EmergencyCallbackModeService getService()> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()> -> _SINK_
<android.net.http.Request: java.lang.String getUri()> -> _SINK_
<android.net.http.Headers: java.lang.String getProxyAuthenticate()> -> _SINK_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getRecordForAppLocked(android.app.IApplicationThread)> -> _SINK_
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> -> _SINK_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()> -> _SINK_
<com.android.server.pm.UserManagerService: int getUserHandle(int)> -> _SINK_
<org.apache.http.auth.AuthScope: java.lang.String getHost()> -> _SINK_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplicationIndex(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$3000(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()> -> _SINK_
<android.net.NetworkQuotaInfo: long getHardLimitBytes()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()> -> _SINK_
<android.telephony.CellInfoLte$1: android.telephony.CellInfoLte createFromParcel(android.os.Parcel)> -> _SINK_
<android.telephony.ServiceState: int getNetworkType()> -> _SINK_
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()> -> _SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()> -> _SINK_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> -> _SINK_
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: int getCategory()> -> _SINK_
<android.net.Uri: android.net.Uri normalizeScheme()> -> _SINK_
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.server.NsdService: android.os.Messenger getMessenger()> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()> -> _SINK_
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getControlPort()> -> _SINK_
<com.android.internal.telephony.CallManager: boolean getMute()> -> _SINK_
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> -> _SINK_
<com.android.server.am.UsageStatsService: byte[] readFully(java.io.FileInputStream)> -> _SINK_
<com.android.email.RefreshManager: java.util.Collection getListenersForTest()> -> _SINK_
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()> -> _SINK_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> -> _SINK_
<com.android.server.WifiService: int getFrequencyBand()> -> _SINK_
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimMdnLoaded: java.lang.String getEfName()> -> _SINK_
<android.view.textservice.TextInfo: java.lang.String getText()> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()> -> _SINK_
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()> -> _SINK_
<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)> -> _SINK_
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: int getActiveWindowId()> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> -> _SINK_
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: long getPeriodStart()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)> -> _SINK_
<com.android.server.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()> -> _SINK_
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()> -> _SINK_
<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)> -> _SINK_
<android.net.Uri$StringUri: java.util.List getPathSegments()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: float getVolume()> -> _SINK_
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()> -> _SINK_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()> -> _SINK_
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getEncodedPath()> -> _SINK_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()> -> _SINK_
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()> -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: int getNumberCategory(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer: com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer$Result getResults(int,java.util.Locale)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String getDeviceInfoHex()> -> _SINK_
<android.net.http.HttpsConnection: java.lang.String getScheme()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()> -> _SINK_
<android.telephony.TelephonyManager: int getCallState()> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SmsCbHeader: int getPageIndex()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()> -> _SINK_
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getAccountKeyWhere()> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: boolean getAccessibilityFocusBoundsInActiveWindow(android.graphics.Rect)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> -> _SINK_
<android.net.TrafficStats: long getTotalTxBytes()> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> -> _SINK_
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()> -> _SINK_
<android.net.nsd.DnsSdTxtRecord: java.lang.String get(java.lang.String)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionMethod()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> -> _SINK_
<android.net.ConnectivityManager: int untether(java.lang.String)> -> _SINK_
<android.telephony.CellIdentityLte: int getMcc()> -> _SINK_
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> -> _SINK_
<android.net.Uri$AbstractPart: java.lang.String getDecoded()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getEnableSessionCreation()> -> _SINK_
<android.net.NetworkIdentity: java.lang.String getNetworkId()> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfacePairs()> -> _SINK_
<android.telephony.CellIdentityLte: int getMnc()> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()> -> _SINK_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)> -> _SINK_
<android.net.http.Headers: java.lang.String getRefresh()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)> -> _SINK_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getConnection()> -> _SINK_
<android.telephony.ServiceState: int getCdmaEriIconMode()> -> _SINK_
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()> -> _SINK_
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()> -> _SINK_
<android.telephony.NeighboringCellInfo: int getCid()> -> _SINK_
<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()> -> _SINK_
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()> -> _SINK_
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getRadioState()> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()> -> _SINK_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()> -> _SINK_
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()> -> _SINK_
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()> -> _SINK_
<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()> -> _SINK_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()> -> _SINK_
<com.android.internal.telephony.RetryManager: int getRetryCount()> -> _SINK_
<com.android.exchange.ExchangeService: android.content.Context getContext()> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getQuery()> -> _SINK_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()> -> _SINK_
<android.telephony.SmsMessage: byte[] getUserData()> -> _SINK_
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey)> -> _SINK_
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()> -> _SINK_
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SINK_
<android.net.http.Headers: java.lang.String getContentType()> -> _SINK_
<android.net.Uri$StringUri: java.lang.String getFragment()> -> _SINK_
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> -> _SINK_
<android.telephony.CellIdentityLte: int getPci()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: int getFlags()> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()> -> _SINK_
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveRingingCall()> -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: int getAccountColor(long)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])> -> _SINK_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)> -> _SINK_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)> -> _SINK_
<android.net.http.Headers: long getContentLength()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()> -> _SINK_
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)> -> _SINK_
<android.net.LocalSocket: int getSoTimeout()> -> _SINK_
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()> -> _SINK_
<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> -> _SINK_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: byte[] getEncoded()> -> _SINK_
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> -> _SINK_
<com.android.server.wm.WindowManagerService: float getAnimationScale(int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<android.net.NetworkInfo: java.lang.String getReason()> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()> -> _SINK_
<android.media.AudioService$AudioFocusDeathHandler: android.os.IBinder getBinder()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()> -> _SINK_
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()> -> _SINK_
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)> -> _SINK_
<com.android.server.TwilightService$TwilightState: long getYesterdaySunset()> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()> -> _SINK_
<android.net.Proxy: java.lang.String getDefaultHost()> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call$State getState()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor getInputMonitor()> -> _SINK_
<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()> -> _SINK_
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SINK_
<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()> -> _SINK_
<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()> -> _SINK_
<com.android.server.WifiService: java.util.List getScanResults()> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()> -> _SINK_
<android.net.DummyDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()> -> _SINK_
<android.os.ServiceManagerNative: android.os.IBinder asBinder()> -> _SINK_
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()> -> _SINK_
<android.telephony.CellIdentityLte: int getTac()> -> _SINK_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)> -> _SINK_
<android.net.http.Headers: java.lang.String getExpires()> -> _SINK_
<com.android.exchange.EasOutboxService$SendMailEntity: long getContentLength()> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)> -> _SINK_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()> -> _SINK_
<android.telephony.TelephonyManager: int getLteOnCdmaMode()> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SINK_
<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)> -> _SINK_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientOptions()> -> _SINK_
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()> -> _SINK_
<com.android.internal.telephony.DataConnection: int getRetryCount()> -> _SINK_
<android.net.NetworkTemplate: java.lang.String getNetworkId()> -> _SINK_
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()> -> _SINK_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()> -> _SINK_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()> -> _SINK_
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()> -> _SINK_
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()> -> _SINK_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)> -> _SINK_
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SINK_
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)> -> _SINK_
<android.net.http.Headers: java.lang.String getWwwAuthenticate()> -> _SINK_
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> -> _SINK_
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()> -> _SINK_
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> -> _SINK_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SINK_
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SINK_
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> -> _SINK_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)> -> _SINK_
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> -> _SINK_
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -> _SINK_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> -> _SINK_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SINK_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()> -> _SINK_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> -> _SINK_
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)> -> _SINK_
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)> -> _SINK_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> -> _SINK_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> -> _SINK_
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SINK_
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()> -> _SINK_
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()> -> _SINK_
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()> -> _SINK_
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()> -> _SINK_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> -> _SINK_
<libcore.net.http.ResponseHeaders: java.net.URI getUri()> -> _SINK_
<android.content.CursorLoader: android.net.Uri getUri()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()> -> _SINK_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()> -> _SINK_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()> -> _SINK_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)> -> _SINK_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()> -> _SINK_
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> -> _SINK_
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()> -> _SINK_
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()> -> _SINK_
<android.content.ClipData$Item: android.net.Uri getUri()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()> -> _SINK_
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()> -> _SINK_
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> -> _SINK_
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()> -> _SINK_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> -> _SINK_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()> -> _SINK_
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()> -> _SINK_
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> -> _SINK_
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> -> _SINK_
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()> -> _SINK_
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()> -> _SINK_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> -> _SINK_
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()> -> _SINK_
<libcore.net.http.RequestHeaders: java.net.URI getUri()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()> -> _SINK_
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)> -> _SINK_
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)> -> _SINK_
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()> -> _SINK_
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()> -> _SINK_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()> -> _SINK_
<java.lang.SecurityManager: java.lang.Object getSecurityContext()> -> _SINK_
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()> -> _SINK_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()> -> _SINK_
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()> -> _SINK_
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)> -> _SINK_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()> -> _SINK_
<java.lang.System: java.lang.SecurityManager getSecurityManager()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> -> _SINK_
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()> -> _SINK_
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)> -> _SINK_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()> -> _SINK_
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)> -> _SINK_
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> -> _SINK_
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)> -> _SINK_
<libcore.net.http.HttpEngine: java.net.URI getUri()> -> _SINK_
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()> -> _SINK_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> -> _SINK_
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()> -> _SINK_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)> -> _SINK_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> -> _SINK_
<android.media.Ringtone: android.net.Uri getUri()> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespaceURI(java.lang.String)> -> _SINK_
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)> -> _SINK_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()> -> _SINK_
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> -> _SINK_
<android.net.Uri: android.net.Uri getCanonicalUri()> -> _SINK_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)> -> _SINK_
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)> -> _SINK_
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)> -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> -> _SINK_
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> -> _SINK_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> -> _SINK_
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> -> _SINK_
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothServerSocket: int getChannel()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])> -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pan.PanService: java.lang.String getName()> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()> -> _SINK_
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> -> _SINK_
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getState()> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> -> _SINK_
<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> -> _SINK_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SINK_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()> -> _SINK_
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()> -> _SINK_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> -> _SINK_
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SINK_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> -> _SINK_
<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()> -> _SINK_
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()> -> _SINK_
<com.android.bluetooth.hdp.HealthService: java.lang.String getName()> -> _SINK_
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SINK_
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)> -> _SINK_
<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)> -> _SINK_
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()> -> _SINK_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> -> _SINK_
<android.bluetooth.BluetoothDevice: int getBondState()> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()> -> _SINK_
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> -> _SINK_
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.hid.HidService: java.lang.String getName()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()> -> _SINK_
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()> -> _SINK_
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()> -> _SINK_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> -> _SINK_
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> -> _SINK_
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()> -> _SINK_
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> -> _SINK_
<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()> -> _SINK_
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)> -> _SINK_
<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothPbap: int getState()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> -> _SINK_
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.BluetoothAdapter: int getConnectionState()> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> -> _SINK_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()> -> _SINK_
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothAdapter: int getScanMode()> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()> -> _SINK_
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()> -> _SINK_
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()> -> _SINK_
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> -> _SINK_
<com.android.server.BluetoothManagerService: java.lang.String getName()> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _SINK_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.bluetooth.BluetoothSocket: int getPort()> -> _SINK_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()> -> _SINK_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> -> _SINK_
<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.BluetoothClass: int getDeviceClass()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> -> _SINK_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()> -> _SINK_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()> -> _SINK_
<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> -> _SINK_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getState()> -> _SINK_
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean getTrustState()> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SINK_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)> -> _SINK_
<android.bluetooth.BluetoothAdapter: int getState()> -> _SINK_
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> -> _SINK_
<android.database.CursorWrapper: int getCount()> -> _SINK_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()> -> _SINK_
<android.database.CursorWrapper: float getFloat(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.database.MergeCursor: short getShort(int)> -> _SINK_
<android.database.AbstractWindowedCursor: short getShort(int)> -> _SINK_
<android.database.AbstractCursor: int getColumnCount()> -> _SINK_
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> -> _SINK_
<android.database.sqlite.SQLiteConnection: int getConnectionId()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SINK_
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)> -> _SINK_
<android.database.MergeCursor: int getCount()> -> _SINK_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)> -> _SINK_
<android.database.AbstractWindowedCursor: double getDouble(int)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()> -> _SINK_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SINK_
<android.database.MatrixCursor: byte[] getBlob(int)> -> _SINK_
<android.database.CursorWindow: double getDouble(int,int)> -> _SINK_
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()> -> _SINK_
<android.database.MatrixCursor: int getType(int)> -> _SINK_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> -> _SINK_
<android.database.MergeCursor: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> -> _SINK_
<android.database.AbstractWindowedCursor: int getInt(int)> -> _SINK_
<android.database.MergeCursor: int getType(int)> -> _SINK_
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()> -> _SINK_
<android.database.CursorWrapper: int getType(int)> -> _SINK_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<android.database.MergeCursor: long getLong(int)> -> _SINK_
<android.database.CursorWindow: long getLong(int,int)> -> _SINK_
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> -> _SINK_
<com.android.providers.telephony.MmsSmsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()> -> _SINK_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SINK_
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()> -> _SINK_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SINK_
<android.database.AbstractCursor: java.lang.String getColumnName(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase$1: android.database.sqlite.SQLiteSession initialValue()> -> _SINK_
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> -> _SINK_
<android.database.MergeCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.MatrixCursor: int getInt(int)> -> _SINK_
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)> -> _SINK_
<android.database.BulkCursorToCursorAdaptor: int getCount()> -> _SINK_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SINK_
<android.database.MatrixCursor: long getLong(int)> -> _SINK_
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.MatrixCursor: short getShort(int)> -> _SINK_
<android.database.MergeCursor: int getInt(int)> -> _SINK_
<android.database.CursorWrapper: int getColumnCount()> -> _SINK_
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()> -> _SINK_
<android.database.AbstractCursor: byte[] getBlob(int)> -> _SINK_
<android.database.CursorWrapper: long getLong(int)> -> _SINK_
<android.database.CursorWindow: short getShort(int,int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()> -> _SINK_
<android.database.MergeCursor: java.lang.String getString(int)> -> _SINK_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()> -> _SINK_
<android.database.CursorWrapper: android.os.Bundle getExtras()> -> _SINK_
<android.database.MergeCursor: float getFloat(int)> -> _SINK_
<android.database.CursorWrapper: int getPosition()> -> _SINK_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()> -> _SINK_
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()> -> _SINK_
<android.database.CursorWrapper: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()> -> _SINK_
<android.database.CursorWindow: int getStartPosition()> -> _SINK_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.CursorWindow: int getInt(int,int)> -> _SINK_
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()> -> _SINK_
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SINK_
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> -> _SINK_
<android.database.CursorWrapper: double getDouble(int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SINK_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()> -> _SINK_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()> -> _SINK_
<android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SINK_
<android.database.MatrixCursor: int getCount()> -> _SINK_
<android.database.CursorWrapper: int getInt(int)> -> _SINK_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()> -> _SINK_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()> -> _SINK_
<android.database.MergeCursor: double getDouble(int)> -> _SINK_
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.database.sqlite.SQLiteConnection: byte[] access$500()> -> _SINK_
<android.database.CursorWindow: byte[] getBlob(int,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SINK_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()> -> _SINK_
<android.database.MatrixCursor: float getFloat(int)> -> _SINK_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()> -> _SINK_
<android.database.AbstractWindowedCursor: float getFloat(int)> -> _SINK_
<android.database.BulkCursorNative: android.os.IBinder asBinder()> -> _SINK_
<android.database.CursorWrapper: java.lang.String getString(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.CursorWrapper: short getShort(int)> -> _SINK_
<android.database.CursorWindow: java.lang.String getName()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.MatrixCursor: double getDouble(int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.CursorWindow: int getType(int,int)> -> _SINK_
<android.database.CursorWrapper: java.lang.String getColumnName(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteCursor: int getCount()> -> _SINK_
<android.database.sqlite.SQLiteProgram: int getUniqueId()> -> _SINK_
<android.database.AbstractWindowedCursor: int getType(int)> -> _SINK_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()> -> _SINK_
<android.database.AbstractWindowedCursor: long getLong(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()> -> _SINK_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.CursorWindow: int getNumRows()> -> _SINK_
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.CursorWindow: java.lang.String getString(int,int)> -> _SINK_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)> -> _SINK_
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()> -> _SINK_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> -> _SINK_
<android.database.AbstractCursor: int getPosition()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.database.CursorWindow: float getFloat(int,int)> -> _SINK_
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)> -> _SINK_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)> -> _SINK_
<android.database.AbstractCursor: int getType(int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> -> _SINK_
<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()> -> _SINK_
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)> -> _SINK_
<android.database.MatrixCursor: java.lang.String getString(int)> -> _SINK_
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)> -> _SINK_
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> -> _SINK_
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)> -> _SINK_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)> -> _SINK_
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)> -> _SINK_
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)> -> _SINK_
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()> -> _SINK_
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)> -> _SINK_
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()> -> _SINK_
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()> -> _SINK_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)> -> _SINK_
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()> -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> -> _SINK_
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)> -> _SINK_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)> -> _SINK_
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()> -> _SINK_
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)> -> _SINK_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()> -> _SINK_
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()> -> _SINK_
<com.android.email.MessageListContext: long getSearchedMailbox()> -> _SINK_
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()> -> _SINK_
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)> -> _SINK_
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()> -> _SINK_
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)> -> _SINK_
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()> -> _SINK_
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()> -> _SINK_
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()> -> _SINK_
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)> -> _SINK_
<com.android.email.activity.MessageListFragment: long getMailboxId()> -> _SINK_
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()> -> _SINK_
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()> -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()> -> _SINK_
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)> -> _SINK_
<com.android.email.MessageListContext: long getMailboxId()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()> -> _SINK_
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.emailcommon.TrafficFlags: int getSyncFlags(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()> -> _SINK_
<android.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SINK_
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getSyncableEasMailboxWhere()> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()> -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: long[] getSyncSamples()> -> _SINK_
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.ContentResolver: java.util.List getCurrentSyncs()> -> _SINK_
<android.content.SyncStorageEngine: int getSyncRandomOffset()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SyncSampleBox getSyncSampleBox()> -> _SINK_
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedSyncStates()> -> _SINK_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> -> _SINK_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)> -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: java.lang.String getEndSync()> -> _SINK_
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)> -> _SINK_
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> -> _SINK_
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()> -> _SINK_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()> -> _SINK_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SINK_
<android.os.CommonTimeConfig: int getClientSyncInterval()> -> _SINK_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSyncRequestUri()> -> _SINK_
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity: int getSyncMode(com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay)> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: long[] getSyncSamples()> -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: java.lang.String getSyncIdKey(java.lang.String,long)> -> _SINK_
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.exchange.adapter.ProvisionParser: java.lang.String getSecuritySyncKey()> -> _SINK_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,int,java.lang.String)> -> _SINK_
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)> -> _SINK_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SINK_
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> -> _SINK_
<com.android.exchange.AbstractSyncService: java.lang.Object getSynchronizer()> -> _SINK_
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()> -> _SINK_
<com.android.providers.calendar.SQLiteContentProvider: boolean getIsCallerSyncAdapter(android.net.Uri)> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: int getSyncResult()> -> _SINK_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> -> _SINK_
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor()> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()> -> _SINK_
<com.android.exchange.adapter.PingParser: int getSyncStatus()> -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> -> _SINK_
<com.android.email.Preferences: boolean getHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: int getCidSync()> -> _SINK_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> -> _SINK_
<com.android.server.display.DisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()> -> _SINK_
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs(int)> -> _SINK_
<com.android.exchange.adapter.PingParser: java.util.ArrayList getSyncList()> -> _SINK_
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()> -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SINK_
<android.webkit.WebStorageClassic: java.util.Collection getOriginsSync()> -> _SINK_
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(android.app.Activity)> -> _SINK_
<android.content.ContentService: java.util.List getCurrentSyncs()> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getSyncKey()> -> _SINK_
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getShouldSync()> -> _SINK_
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.AsyncDialog getAsyncDialog()> -> _SINK_
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SINK_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)> -> _SINK_
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: long getExpiry()> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)> -> _SINK_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: long getDate()> -> _SINK_
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getData()> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()> -> _SINK_
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: long getDate()> -> _SINK_
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SINK_
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)> -> _SINK_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()> -> _SINK_
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.SendConf: int getResponseStatus()> -> _SINK_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: int getMessageType()> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()> -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()> -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()> -> _SINK_
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()> -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: long getDate()> -> _SINK_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: byte[] getContentType()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.SendReq: long getExpiry()> -> _SINK_
<com.google.android.mms.util.PduCacheEntry: long getThreadId()> -> _SINK_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()> -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()> -> _SINK_
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()> -> _SINK_
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()> -> _SINK_
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getName()> -> _SINK_
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()> -> _SINK_
<com.google.android.mms.pdu.PduPart: int getCharset()> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: int getReadStatus()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: int getContentClass()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)> -> _SINK_
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()> -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getContentId()> -> _SINK_
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getContentType()> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()> -> _SINK_
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()> -> _SINK_
<com.google.android.mms.pdu.PduBody: int getPartsNum()> -> _SINK_
<com.google.android.mms.pdu.SendReq: int getReadReport()> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SINK_
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)> -> _SINK_
<com.google.android.mms.pdu.SendReq: long getMessageSize()> -> _SINK_
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: int getStatus()> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SINK_
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()> -> _SINK_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SINK_
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()> -> _SINK_
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()> -> _SINK_
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()> -> _SINK_
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()> -> _SINK_
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()> -> _SINK_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)> -> _SINK_
<com.google.android.mms.pdu.PduComposer: byte[] make()> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)> -> _SINK_
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])> -> _SINK_
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()> -> _SINK_
<com.google.android.mms.pdu.PduPart: byte[] getFilename()> -> _SINK_
<com.android.contacts.util.StreamItemEntry: long getId()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getViewGroupActivity()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: int getPinnedHeaderCount()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: int getPositionForSection(int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$NicknameKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.ContactPresenceIconUtil: android.graphics.drawable.Drawable getPresenceIcon(android.content.Context,int)> -> _SINK_
<com.android.vcard.VCardUtils: java.lang.String getPropertyNameForIm(int)> -> _SINK_
<com.android.contacts.activities.ActionBarAdapter: int getCurrentTab()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$NameKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getResourceText(android.content.Context,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getEditContactActivityClassName()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(java.lang.Object)> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticGivenName()> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromQuery(android.net.Uri,android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> -> _SINK_
<com.android.contacts.model.Contact: java.util.ArrayList getContentValues()> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: int getDefaultDisplayOrder()> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getByRawContactId(java.lang.Long)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String toString()> -> _SINK_
<com.android.contacts.interactions.ContactDeletionInteraction: android.app.LoaderManager getLoaderManager()> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.dataitem.DataKind getKind()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeId(java.lang.String)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredPostalDataItem: java.lang.String getFormattedAddress()> -> _SINK_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(com.android.contacts.calllog.CallLogAdapter,int,long,int)> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.util.Iterator getNameLookupKeys(java.lang.String)> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(int,android.content.Intent)> -> _SINK_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> -> _SINK_
<com.android.contacts.list.ContactsRequest: java.lang.CharSequence getActivityTitle()> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: int getCount()> -> _SINK_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.model.account.AccountTypeWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet get(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(long,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticMiddleName()> -> _SINK_
<com.android.contacts.model.RawContact: com.android.contacts.model.account.AccountType getAccountType()> -> _SINK_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getStreamItems()> -> _SINK_
<com.android.contacts.editor.GroupMembershipView$GroupSelectionItem: long getGroupId()> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getInvitableIntent(com.android.contacts.model.account.AccountType,android.net.Uri)> -> _SINK_
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.list.ContactTileListFragment$2: int getApproximateTileWidth()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getAsString(java.lang.String)> -> _SINK_
<com.android.contacts.editor.PhotoActionPopup$ChoiceListItem: int getId()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence getTypeLabel(android.content.res.Resources,java.lang.Integer,java.lang.CharSequence)> -> _SINK_
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServicePackageName()> -> _SINK_
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.SpecialCharSequenceMgr$SimContactQueryCookie: android.widget.EditText getTextField()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$RelationActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: int getContactNameDisplayOrder()> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getRawContactAccountType(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.ContactListFilter getFilter()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> -> _SINK_
<com.android.contacts.model.dataitem.PhotoDataItem: byte[] getPhoto()> -> _SINK_
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$PhoneKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.providers.contacts.PhotoProcessor: byte[] getThumbnailPhotoBytes()> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: int getInt(int)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getSectionForPosition(int)> -> _SINK_
<com.android.vcard.VCardUtils: java.lang.String getPhoneTypeString(java.lang.Integer)> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.String getDataSet()> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailUriType getUriType()> -> _SINK_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getViewTypeCount()> -> _SINK_
<com.android.providers.contacts.PhotoProcessor: byte[] getDisplayPhotoBytes()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.widget.ListView getListView()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> -> _SINK_
<com.android.contacts.dialog.ClearFrequentsDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: int getScore()> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountName()> -> _SINK_
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getMimetype()> -> _SINK_
<com.android.contacts.interactions.ImportExportDialogFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.detail.ContactDetailLayoutController: com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getNameTextView()> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: long getContactId()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getCompany(android.content.Context,com.android.contacts.model.Contact)> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getDataView()> -> _SINK_
<com.android.phone.ContactsAsyncHelper$ImageTracker: int getPhotoState()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccounts(boolean)> -> _SINK_
<com.android.contacts.quickcontact.ResolveCache: java.lang.CharSequence getDescription(com.android.contacts.quickcontact.Action)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getLabelColumn()> -> _SINK_
<com.android.contacts.group.GroupListItem: java.lang.String getAccountName()> -> _SINK_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: com.android.providers.contacts.ContactsDatabaseHelper getDbHelper()> -> _SINK_
<com.android.vcard.VCardEntry: java.lang.String getDisplayName()> -> _SINK_
<com.android.contacts.list.DirectoryPartition: java.lang.String getDirectoryType()> -> _SINK_
<com.android.contacts.calllog.CallTypeIconsView: int getCount()> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.account.AccountType$EditType getType()> -> _SINK_
<com.android.contacts.util.StructuredPostalUtils: android.net.Uri getPostalAddressUri(java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContact: java.util.List getDataItems()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: int getMaxDisplayPhotoDim()> -> _SINK_
<com.android.contacts.ContactsApplication: android.content.ContentResolver getContentResolver()> -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction: android.content.CursorLoader getLoader()> -> _SINK_
<com.android.contacts.interactions.GroupDeletionDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean getUseStrictPhoneNumberComparisonForTest()> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()> -> _SINK_
<com.android.contacts.list.ContactListAdapter: int getSelectedContactPosition()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNumber()> -> _SINK_
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> -> _SINK_
<com.android.contacts.util.StopWatch: com.android.contacts.util.StopWatch getNullStopWatch()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$PostalActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.mms.data.Contact: byte[] access$1700(com.android.mms.data.Contact)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: java.lang.ThreadLocal getTransactionHolder()> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getPhoneticName(android.content.Context,com.android.contacts.model.Contact)> -> _SINK_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedText()> -> _SINK_
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> -> _SINK_
<com.android.contacts.util.AccountsListAdapter: int getCount()> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri)> -> _SINK_
<com.android.contacts.quickcontact.QuickContactListFragment$1: long getItemId(int)> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> -> _SINK_
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: int getLimit()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: com.android.contacts.model.account.AccountType getItem(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getPhoneticNameTextView()> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: int getNumberActivityVoicemailSources(android.database.Cursor)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object[] getSections()> -> _SINK_
<com.android.contacts.model.Contact: int getDirectoryExportSupport()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.Contact: int getDisplayNameSource()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.view.View getView()> -> _SINK_
<com.android.mms.data.Contact: com.android.mms.data.Contact get(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.lang.Long getRawContactId()> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment: android.content.Context getContext()> -> _SINK_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SINK_
<com.android.contacts.calllog.CallLogFragment: com.android.contacts.calllog.CallLogAdapter getAdapter()> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: java.lang.Long getRawContactId(int)> -> _SINK_
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> -> _SINK_
<com.android.contacts.list.EmailAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind getKindForMimetype(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getDisplayLabel(android.content.Context)> -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: android.net.Uri getSelectedContactUri()> -> _SINK_
<com.android.contacts.ContactStatusUtil: java.lang.String getStatusString(android.content.Context,int)> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getSelectedGroup()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: java.lang.CharSequence getLabel()> -> _SINK_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: java.lang.String getGeocodedLocationFor(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: float getTopFadingEdgeStrength()> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getContentValues()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountName()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.contacts.activities.ActionBarAdapter: java.lang.String getQueryString()> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getGroupWritableAccounts()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getPhoneType()> -> _SINK_
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact get(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: long getSelectedContactId()> -> _SINK_
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: android.view.View createPinnedSectionHeaderView(android.content.Context,android.view.ViewGroup)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForSip()> -> _SINK_
<com.android.vcard.VCardComposer: java.lang.String createOneEntry(java.lang.reflect.Method)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> -> _SINK_
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> -> _SINK_
<com.android.contacts.model.Contact: java.lang.Exception getException()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$EmailActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> -> _SINK_
<com.android.contacts.calllog.CallTypeHelper: java.lang.CharSequence getCallTypeText(int)> -> _SINK_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getInvitableAccountTypes()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getUseStrictPhoneNumberComparisonParameter()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter()> -> _SINK_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$WebsiteKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl$InvitableAccountTypeCache: java.util.Map getCachedValue()> -> _SINK_
<com.android.contacts.editor.ViewIdGenerator: int getId(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,int)> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.String getLabelRes()> -> _SINK_
<com.android.vcard.VCardEntry$WebsiteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$ActivityReference: android.app.Activity get()> -> _SINK_
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilter getFilter()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: java.lang.String getDisplayName()> -> _SINK_
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)> -> _SINK_
<com.android.contacts.util.BitmapUtil: int getSmallerExtentFromBytes(byte[])> -> _SINK_
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SINK_
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> -> _SINK_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: android.text.Html$ImageGetter getImageGetter(android.content.Context)> -> _SINK_
<com.android.contacts.model.RawContact: com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.providers.contacts.util.Clock: com.android.providers.contacts.util.Clock getInstance()> -> _SINK_
<com.android.contacts.GroupMetaData: long getGroupId()> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.util.Iterator getNameLookupKeys(java.lang.String)> -> _SINK_
<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getLabelView()> -> _SINK_
<com.android.contacts.quickcontact.QuickContactListFragment$1: int getCount()> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils: java.util.Iterator getNameLookupKeys(java.lang.String,int)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getVersionString()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getVersionString()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemActivity()> -> _SINK_
<com.android.contacts.calllog.CallLogListItemViews: com.android.contacts.calllog.CallLogListItemViews createForTest(android.content.Context)> -> _SINK_
<com.android.vcard.VCardParserImpl_V40: java.lang.String getVersionString()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getLookupKey()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.ContactPhotoManager getPhotoLoader()> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: byte[] getPhotoByteArray()> -> _SINK_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.Integer getProtocol()> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String getSelection()> -> _SINK_
<com.android.providers.contacts.PhotoStore: long getTotalSize()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: java.lang.String[] getProjection(boolean)> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: double getDouble(int)> -> _SINK_
<com.android.contacts.util.AccountsListAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.AccountTypeManager)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener: int getApproximateTileWidth()> -> _SINK_
<com.android.mms.data.Contact: com.android.mms.data.Contact getMe(boolean)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<com.android.contacts.model.RawContact: android.content.ContentValues getValues()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> -> _SINK_
<com.android.contacts.ContactsApplication: com.android.contacts.test.InjectedServices getInjectedServices()> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.lang.String getDataSet()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(int)> -> _SINK_
<com.android.contacts.ContactsUtils: java.lang.String getCurrentCountryIso(android.content.Context)> -> _SINK_
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<com.android.vcard.VCardProperty: byte[] getByteValue()> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getBase64(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ProfileProvider: java.lang.ThreadLocal getTransactionHolder()> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getBase64(java.lang.String)> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedComments()> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromIterator(java.util.Iterator)> -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> -> _SINK_
<com.android.contacts.model.account.GoogleAccountType: java.util.List getExtensionPackageNames()> -> _SINK_
<com.android.vcard.VCardSourceDetector: java.lang.String getEstimatedCharset()> -> _SINK_
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor buildSingleRowResult(java.lang.String[],java.lang.String[],java.lang.Object[])> -> _SINK_
<com.android.contacts.model.Contact: boolean getStarred()> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: int getItemViewType(int)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.list.ContactEntryListAdapter getAdapter()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$KindTitleViewEntry: java.lang.String getTitle()> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter$GroupListItemViewCache: android.net.Uri getUri()> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: android.database.Cursor queryAggregationSuggestions(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],long,int,java.lang.String,java.util.ArrayList)> -> _SINK_
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()> -> _SINK_
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getCount()> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: int getPinnedHeaderHeight(int)> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getDirectoryType()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(android.content.Context)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: int getTotalTopPinnedHeaderHeight()> -> _SINK_
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.providers.contacts.aggregation.util.CommonNicknameCache: java.lang.String[] getCommonNicknameClusters(java.lang.String)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getChildId(int,int)> -> _SINK_
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getBody()> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.util.List getPhotos()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$PhotoKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: java.lang.String[] getWritableAccountTypeStrings()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$StructuredPostalKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getWidePaddingLeft()> -> _SINK_
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getTitle()> -> _SINK_
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getNonEmptyLine()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getGroup(int)> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEvent(android.content.Context)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getGroupId(int)> -> _SINK_
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getItemPosition(java.lang.Object)> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getNonEmptyLine()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: int getContactNameDisplayOrder()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(android.content.Context)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForEmail()> -> _SINK_
<com.android.contacts.datepicker.DatePicker$SavedState: int getMonth()> -> _SINK_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> -> _SINK_
<com.android.contacts.vcard.ExportProcessor: com.android.contacts.vcard.ExportRequest getRequest()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader getLoader(int)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.account.AccountTypeWithDataSet)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getAsLong(java.lang.String)> -> _SINK_
<com.android.contacts.interactions.GroupCreationDialogFragment: int getTitleResourceId()> -> _SINK_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountType()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getEditContactActivityClassName()> -> _SINK_
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.util.ExpirableCache$GenerationalCachedValue: java.lang.Object getValue()> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(android.content.Entity,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.contacts.group.GroupListItem: long getGroupId()> -> _SINK_
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> -> _SINK_
<com.android.providers.contacts.DataRowHandler: android.content.ContentValues getAugmentedValues(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues)> -> _SINK_
<com.android.providers.contacts.PhotoPriorityResolver: int getPhotoPriority(java.lang.String)> -> _SINK_
<com.android.vcard.VCardEntry$PostalData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailLabel()> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: int getTypeRank(int)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getSourcePackage()> -> _SINK_
<com.android.contacts.list.DefaultContactBrowseListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> -> _SINK_
<com.android.contacts.quickcontact.DataAction: android.content.Intent getIntent()> -> _SINK_
<com.android.providers.contacts.AbstractContactsProvider: com.android.providers.contacts.ContactsTransaction getCurrentTransaction()> -> _SINK_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getRawContacts()> -> _SINK_
<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getName()> -> _SINK_
<com.android.vcard.VCardConfig: int getNameOrderType(int)> -> _SINK_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByIds(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getAsByteArray(java.lang.String)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> -> _SINK_
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> -> _SINK_
<com.android.contacts.quickcontact.QuickContactListFragment$1: java.lang.Object getItem(int)> -> _SINK_
<com.android.contacts.quickcontact.QuickContactListFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.providers.contacts.NameSplitter: int getAdjustedFullNameStyle(int)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment: android.net.Uri getUri()> -> _SINK_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getOrCreateAccountIdInTransaction(com.android.providers.contacts.AccountWithDataSet)> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: long getContactId()> -> _SINK_
<com.android.contacts.model.Contact: android.net.Uri getLookupUri()> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: android.net.Uri getUri()> -> _SINK_
<com.android.providers.contacts.CallLogProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getGroupRowId()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailTabCarousel: float getStoredYCoordinateForTab(int)> -> _SINK_
<com.android.mms.ui.QuickContactDivot: float getCloseOffset()> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForOrganization: int getTypeRank(int)> -> _SINK_
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> -> _SINK_
<com.android.providers.contacts.MemoryCursor: int getCount()> -> _SINK_
<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getCount()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getViewGroupLabel(android.content.Context)> -> _SINK_
<com.android.contacts.model.Contact: byte[] getPhotoBinaryData()> -> _SINK_
<com.android.providers.contacts.util.MemoryUtils: long getTotalMemorySize()> -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.mms.data.Contact: byte[] access$1702(com.android.mms.data.Contact,byte[])> -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.activities.DialtactsActivity$PageChangeListener: int getCurrentPosition()> -> _SINK_
<com.android.contacts.group.GroupDetailDisplayUtils: android.view.View getNewGroupSourceView(android.content.Context)> -> _SINK_
<com.android.vcard.VCardEntry$PostalData: java.lang.String getFormattedAddress(int)> -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> -> _SINK_
<com.android.contacts.activities.ShowOrCreateActivity: android.app.Dialog onCreateDialog(int)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getColumnCount()> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: int getCount()> -> _SINK_
<com.android.contacts.socialwidget.SocialWidgetSettings: android.net.Uri getContactUri(android.content.Context,int)> -> _SINK_
<com.android.contacts.editor.RawContactReadOnlyEditorView: long getRawContactId()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: long getLong(int)> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: int getInviteContactActionResId()> -> _SINK_
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> -> _SINK_
<com.android.contacts.list.ContactsRequest: android.content.Intent getRedirectIntent()> -> _SINK_
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle get(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactsRequest: android.net.Uri getContactUri()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: long getContactId()> -> _SINK_
<com.android.mms.data.Contact: java.lang.String getName()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getPhoto()> -> _SINK_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: int getDirectorySearchMode()> -> _SINK_
<com.android.email.activity.setup.SetupData: android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: float getFloat(int)> -> _SINK_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getItemViewType(int)> -> _SINK_
<com.android.contacts.calllog.CallTypeIconsView: int getCallType(int)> -> _SINK_
<com.android.contacts.util.LocalizedNameResolver: java.lang.String getAllContactsName(android.content.Context,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContact: android.content.Context getContext()> -> _SINK_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNumber()> -> _SINK_
<com.android.contacts.model.Contact: long getPhotoId()> -> _SINK_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getInequalityClause(java.lang.String,long)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> -> _SINK_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getCanonicalPath()> -> _SINK_
<com.android.contacts.group.GroupDetailFragment$1: int getApproximateTileWidth()> -> _SINK_
<com.android.contacts.util.AccountSelectionUtil$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.activities.DialtactsActivity: android.content.Intent getCallSettingsIntent()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.QuickContactBadge getQuickContact()> -> _SINK_
<com.android.contacts.calllog.CallTypeHelper: java.lang.Integer getHighlightedColor(int)> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getVoicemailIntent()> -> _SINK_
<com.android.providers.contacts.SearchIndexManager: java.lang.String getFtsMatchQuery(java.lang.String,com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: char[] getUpperCaseQueryString()> -> _SINK_
<com.android.contacts.model.Contact: android.net.Uri getRequestedUri()> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getDirtyRawContactIds()> -> _SINK_
<com.android.contacts.quickcontact.DataAction: java.lang.String getAlternateIconDescription()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingBottom()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: android.database.Cursor access$1202(com.android.contacts.editor.ContactEditorFragment,android.database.Cursor)> -> _SINK_
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragmentCarousel: int getCurrentPage()> -> _SINK_
<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: java.lang.String getMimeType()> -> _SINK_
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: int getSectionForPosition(int)> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewGroupActivity()> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: java.util.Set getKnownPropertyNameSet()> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownPropertyNameSet()> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> -> _SINK_
<com.android.contacts.model.Contact: long getNameRawContactId()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getPhotoUri()> -> _SINK_
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.util.DialogManager getDialogManager()> -> _SINK_
<com.android.vcard.VCardParserImpl_V40: java.util.Set getKnownPropertyNameSet()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition()> -> _SINK_
<com.android.providers.contacts.ProfileProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction()> -> _SINK_
<com.android.vcard.VCardEntry$ImData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.calllog.ClearCallLogDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.model.account.AccountWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet()> -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> -> _SINK_
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getCountView()> -> _SINK_
<com.android.contacts.list.JoinContactLoader: android.database.Cursor loadInBackground()> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: int getSortOrder()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: java.lang.CharSequence getTitle(android.content.Context)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getCount()> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<com.android.vcard.VCardEntry$EmailData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.providers.contacts.DataRowHandler: int getTypeRank(int)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticFamilyName()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getStatusView()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getChild(int,int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$KindParser: java.util.List parseDataKindTag(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getData()> -> _SINK_
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.contacts.ContactsActivity: android.content.ContentResolver getContentResolver()> -> _SINK_
<com.android.contacts.model.account.AccountType: int getInviteContactActionResId()> -> _SINK_
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> -> _SINK_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> -> _SINK_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountTypeForAccount(com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.contacts.editor.EditorAnimator: com.android.contacts.editor.EditorAnimator getInstance()> -> _SINK_
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(boolean,boolean)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getTypeColumn()> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$EmailKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListAdapter: int getPinnedHeaderCount()> -> _SINK_
<com.android.contacts.GroupMetaData: java.lang.String getTitle()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> -> _SINK_
<com.android.contacts.util.HtmlUtils$StreamItemQuoteSpan: int getLeadingMargin(boolean)> -> _SINK_
<com.android.contacts.util.ImageViewDrawableSetter: byte[] getCompressedImage()> -> _SINK_
<com.android.contacts.editor.KindSectionView: java.lang.String getTitle()> -> _SINK_
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.vcard.VCardEntry$OrganizationData: java.lang.String getFormattedString()> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.lang.Long getAccountIdOrNullForRawContact(long)> -> _SINK_
<com.android.providers.contacts.CallLogProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> -> _SINK_
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SINK_
<com.android.contacts.activities.GroupEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action: int getMessageId()> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getItemPosition(java.lang.Object)> -> _SINK_
<com.android.contacts.ContactsUtils: android.graphics.Rect getTargetRectFromView(android.content.Context,android.view.View)> -> _SINK_
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> -> _SINK_
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: int getDirectoryResultLimit()> -> _SINK_
<com.android.contacts.interactions.GroupNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.quickcontact.DataAction: java.lang.String getMimeType()> -> _SINK_
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexRawContactIds()> -> _SINK_
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)> -> _SINK_
<com.android.providers.contacts.PhotoStore: com.android.providers.contacts.PhotoStore$Entry get(long)> -> _SINK_
<com.android.contacts.list.LegacyContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.vcard.ExportProcessor: int getType()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: java.lang.String getCurrentPhotoFile()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.Long getAccountIdOrNull(com.android.providers.contacts.AccountWithDataSet)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListAdapter: int getScrollPositionForHeader(int)> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: int getCount()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.datepicker.DatePicker: int getDayOfMonth()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticFamilyName()> -> _SINK_
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: java.lang.String getString(int)> -> _SINK_
<com.android.contacts.ContactsActivity: android.view.View getView(int)> -> _SINK_
<com.android.mms.data.Contact: int getContactMethodType()> -> _SINK_
<com.android.vcard.VCardEntry$NicknameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache$Entry getEntry(com.android.contacts.quickcontact.Action)> -> _SINK_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.lang.String getSortKey(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: short getShort(int)> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getCount()> -> _SINK_
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.model.Contact: long getDirectoryId()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getCount()> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountType()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> -> _SINK_
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()> -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl$Request: long getId()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getVisible()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemPhotoActivity()> -> _SINK_
<com.android.mms.data.ContactList: java.lang.String[] getNumbers()> -> _SINK_
<com.android.contacts.datepicker.DatePicker: int getMonth()> -> _SINK_
<com.android.contacts.list.ContactsSectionIndexer: java.lang.Object[] getSections()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getLookupUri()> -> _SINK_
<com.android.providers.contacts.NameLookupBuilder: java.lang.String normalizeName(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> -> _SINK_
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: android.net.Uri[] getSourceUris()> -> _SINK_
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServicePackageName()> -> _SINK_
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> -> _SINK_
<com.android.vcard.VCardSourceDetector: int getEstimatedType()> -> _SINK_
<com.android.contacts.list.PhoneFavoriteFragment: com.android.contacts.list.ContactListFilter getFilter()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.app.LoaderManager getLoaderManager()> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<com.android.contacts.editor.BaseRawContactEditorView: com.android.contacts.editor.PhotoEditorView getPhotoEditor()> -> _SINK_
<com.android.contacts.editor.KindSectionView: com.android.contacts.model.dataitem.DataKind getKind()> -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getType(com.android.contacts.model.dataitem.DataKind,int)> -> _SINK_
<com.android.contacts.list.ContactsSectionIndexer: int getSectionForPosition(int)> -> _SINK_
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()> -> _SINK_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: long getLastModified()> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getString(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String getString(int)> -> _SINK_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNormalizedNumber()> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallDetailsMessageId()> -> _SINK_
<com.android.contacts.list.PhoneNumberPickerFragment: com.android.contacts.list.ContactListFilter getFilter()> -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.Long getId()> -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity: android.content.Intent buildIntent(android.content.Context,android.net.Uri,android.graphics.Bitmap,byte[],android.graphics.Rect,com.android.contacts.model.RawContactDeltaList,boolean,boolean,boolean)> -> _SINK_
<com.android.contacts.util.MemoryUtils: long getTotalMemorySize()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$OrganizationKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(java.lang.Long)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getId()> -> _SINK_
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])> -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: com.android.contacts.list.ContactListFilter getFilter()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredName()> -> _SINK_
<com.android.contacts.activities.NonPhoneActivity$NonPhoneDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedVerticalScrollLength()> -> _SINK_
<com.android.contacts.activities.PeopleActivity: com.android.contacts.util.DialogManager getDialogManager()> -> _SINK_
<com.android.vcard.VCardEntry$OrganizationData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: java.util.List getStatusMessages(android.database.Cursor)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQueryString()> -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$PhoneActionAltInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.ImageView getPhotoView()> -> _SINK_
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactTileView: android.widget.QuickContactBadge getQuickContact()> -> _SINK_
<com.android.contacts.editor.RawContactEditorView: long getRawContactId()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountType()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.util.ArrayList getSortedDataKinds()> -> _SINK_
<com.android.contacts.quickcontact.DataAction: int getPresence()> -> _SINK_
<com.android.contacts.list.JoinContactListAdapter: int getItemViewType(int,int)> -> _SINK_
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServiceClassName()> -> _SINK_
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache create(int)> -> _SINK_
<com.android.vcard.VCardProperty: java.util.Map getParameterMap()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: int getItemViewType(int,int)> -> _SINK_
<com.android.contacts.model.RawContactDelta: int getEntryCount(boolean)> -> _SINK_
<com.android.providers.contacts.AbstractContactsProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> -> _SINK_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.String getText()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingLeft()> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils$DefaultImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedRawContactIds()> -> _SINK_
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getCompany()> -> _SINK_
<com.android.contacts.test.InjectedServices: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,long)> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: int getViewGroupLabelResId()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$SuggestionEditConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.model.dataitem.WebsiteDataItem: java.lang.String getUrl()> -> _SINK_
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get()> -> _SINK_
<com.android.contacts.quickcontact.ResolveCache: android.content.pm.ResolveInfo getBestResolve(android.content.Intent,java.util.List)> -> _SINK_
<com.android.vcard.VCardEntry$AndroidCustomData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.group.GroupDetailFragment: long getGroupId()> -> _SINK_
<com.android.contacts.list.ContactListFilter: java.lang.String getId()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexContactIds()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getId()> -> _SINK_
<com.android.contacts.detail.ActionsViewContainer: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<com.android.mms.data.ContactList: java.lang.String[] getNumbers(boolean)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: int getViewType()> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallLogMessageId()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticGivenName()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getDataMimeType(long)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.content.CursorLoader createCursorLoader()> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: long getLong(int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCurrentCountryIso()> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: com.android.contacts.group.GroupEditorFragment$Member getItem(int)> -> _SINK_
<com.android.contacts.group.GroupListItem: java.lang.String getTitle()> -> _SINK_
<com.android.contacts.util.StreamItemEntry: long getTimestamp()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getAltDisplayName()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: int getAggregationMode(long)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getPhoneticName()> -> _SINK_
<com.android.contacts.list.PostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)> -> _SINK_
<com.android.providers.contacts.CountryMonitor: java.lang.String getCountryIso()> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: long getItemId(int)> -> _SINK_
<com.android.mms.data.Contact: android.net.Uri getUri()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getPriority()> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: com.android.contacts.model.account.AccountType$EditType getType()> -> _SINK_
<com.android.contacts.util.AccountsListAdapter: com.android.contacts.model.account.AccountWithDataSet getItem(int)> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: int getIndexedPartition()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getDirectoryDisplayName()> -> _SINK_
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.list.JoinContactListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccountTypes(boolean)> -> _SINK_
<com.android.contacts.list.ContactsRequest: int getActionCode()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> -> _SINK_
<com.android.contacts.list.ContactTileView: android.view.View$OnClickListener createClickListener()> -> _SINK_
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getMimeEntries(java.lang.String)> -> _SINK_
<com.android.providers.contacts.SearchIndexManager: java.util.List splitIntoFtsTokens(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String[] getColumnNames()> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getDisplayName()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: android.graphics.drawable.Drawable getDisplayIcon(android.content.Context)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: android.database.sqlite.SQLiteDatabase getDatabase(boolean)> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.String getResPackage()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: java.lang.String getTitle()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: java.lang.String getTitle()> -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: int scanAllPackages()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getCustomRingtone()> -> _SINK_
<com.android.providers.contacts.PhotoProcessor: int getMaxThumbnailPhotoDim()> -> _SINK_
<com.android.vcard.VCardProperty: java.lang.String getRawValue()> -> _SINK_
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: android.view.View getDivider()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: java.lang.String getKindString()> -> _SINK_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getCount()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment: int getFirstListItemOffset()> -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl$Request: int getRequestedExtent()> -> _SINK_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountName()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneLabel()> -> _SINK_
<com.android.contacts.group.GroupDetailFragment: android.net.Uri getGroupUri()> -> _SINK_
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getCompressingCollator()> -> _SINK_
<com.android.contacts.detail.ContactDetailPhotoSetter: android.view.View$OnClickListener setupContactPhotoForClick(android.content.Context,com.android.contacts.model.Contact,android.widget.ImageView,boolean)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$SipAddressKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.editor.KindSectionView: int getEditorCount()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: int getCount()> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: android.content.Context getDataSourceContext()> -> _SINK_
<com.android.providers.contacts.ContactsTransaction: android.database.sqlite.SQLiteDatabase getDbForTag(java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta: int getMimeEntriesCount(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: short getShort(int)> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getExtraInfo()> -> _SINK_
<com.android.vcard.VCardEntry$NameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: int getType(int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCountryIso()> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getAvailableEncodingSet()> -> _SINK_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getGroupMetaData()> -> _SINK_
<com.android.providers.contacts.ReorderingCursorWrapper: float getFloat(int)> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.RawContact getRawContact()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.util.List getExtensionPackageNames()> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: java.lang.Object[] getRow()> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: com.android.contacts.group.GroupListItem getItem(int)> -> _SINK_
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getCompleteValues()> -> _SINK_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: int getCount()> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: java.util.List getSavedAccounts()> -> _SINK_
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingTop()> -> _SINK_
<com.android.contacts.model.Contact: long getId()> -> _SINK_
<com.android.vcard.VCardEntry$NoteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getGivenNames()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServiceClassName()> -> _SINK_
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForOrganization()> -> _SINK_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getSnippetView()> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getSuffix()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getWhereClause()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: int getCount()> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: int getDefaultHourForBirthday()> -> _SINK_
<com.android.providers.contacts.aggregation.util.NameDistance: float getDistance(byte[],byte[])> -> _SINK_
<com.android.contacts.util.StreamItemEntry: java.lang.String getAccountType()> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.android.providers.contacts.HanziToPinyin: com.android.providers.contacts.HanziToPinyin getInstance()> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: int getDesiredClipPosition()> -> _SINK_
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> -> _SINK_
<com.android.contacts.editor.AggregationSuggestionEngine: int getSuggestedContactCount()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: double getDouble(int)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: java.lang.String getSelectedContactLookupKey()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getInviteContactActivityClassName()> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils: java.lang.String getSortKey(java.lang.String,int)> -> _SINK_
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> -> _SINK_
<com.android.contacts.quickcontact.DataAction: android.content.Intent getAlternateIntent()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: long getRawContactId()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> -> _SINK_
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<gov.nist.javax.sip.header.Contact: int getExpires()> -> _SINK_
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: int getCount()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> -> _SINK_
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> -> _SINK_
<com.android.providers.contacts.HanziToPinyin: java.util.ArrayList get(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemPhotoActivity()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getGroupCount()> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getMiddleName()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$GroupMembershipKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForEmail: int getTypeRank(int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getInstance(android.content.Context)> -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)> -> _SINK_
<com.android.vcard.VCardEntry$AnniversaryData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.model.dataitem.ImDataItem: int getChatCapability()> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.lang.String getSortKey(java.lang.String)> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> -> _SINK_
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQuantityText(int,int,int)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.calllog.IntentProvider$1: android.content.Intent getIntent(android.content.Context)> -> _SINK_
<com.android.contacts.calllog.IntentProvider$2: android.content.Intent getIntent(android.content.Context)> -> _SINK_
<com.android.contacts.calllog.IntentProvider$3: android.content.Intent getIntent(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$EventKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.model.account.AccountType: int getViewGroupLabelResId()> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> -> _SINK_
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor()> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getContent()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getAfter()> -> _SINK_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: boolean getDisplayPhotos()> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry()> -> _SINK_
<com.android.contacts.model.dataitem.SipAddressDataItem: java.lang.String getSipAddress()> -> _SINK_
<com.android.providers.contacts.TransactionContext: java.util.Set getInsertedRawContactIds()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: int getInt(int)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence inflateUsing(android.content.Context,android.content.ContentValues)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getInviteContactActivityClassName()> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: android.app.Dialog createDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getPositionForSection(int)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: java.lang.CharSequence getLabel()> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getChildrenCount(int)> -> _SINK_
<com.android.providers.contacts.DataRowHandler: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> -> _SINK_
<com.android.contacts.group.GroupListItem: java.lang.String getAccountType()> -> _SINK_
<com.android.contacts.group.GroupListItem: java.lang.String getDataSet()> -> _SINK_
<com.android.contacts.list.ContactTilePhoneFrequentView: int getApproximateImageSize()> -> _SINK_
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getContactId(long)> -> _SINK_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$PhoneActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(android.content.Context)> -> _SINK_
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SINK_
<com.android.contacts.util.StreamItemPhotoEntry: java.lang.String getPhotoUri()> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getAttribution(android.content.Context,com.android.contacts.model.Contact)> -> _SINK_
<com.android.vcard.VCardProperty: java.util.List getValueList()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewContactNotifyServiceClassName()> -> _SINK_
<com.android.vcard.VCardEntry$PhotoData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.editor.AggregationSuggestionEngine: android.os.Handler getHandler()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String,java.lang.Integer)> -> _SINK_
<com.android.contacts.test.InjectedServices: android.content.ContentResolver getContentResolver()> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getContactId()> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: int getDefaultSortOrder()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: int getCount()> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getRawContactId()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: android.content.Context getContext()> -> _SINK_
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: int getPinnedHeaderCount()> -> _SINK_
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<com.android.contacts.datepicker.DatePicker$SavedState: int getYear()> -> _SINK_
<com.android.contacts.quickcontact.DataAction: android.graphics.drawable.Drawable getAlternateIcon()> -> _SINK_
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(android.content.Context,int,boolean)> -> _SINK_
<com.android.contacts.list.ContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.vcard.CancelActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils: com.android.providers.contacts.ContactLocaleUtils getIntance()> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter: android.widget.Filter getFilter()> -> _SINK_
<com.android.contacts.vcard.ImportProcessor: int getType()> -> _SINK_
<com.android.contacts.ContactsActivity: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.String getAsString(java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getItemViewType(int)> -> _SINK_
<com.android.contacts.list.ContactListItemView: int getDefaultPhotoViewSize()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: java.lang.Object[] getSections()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredPostal()> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: int getCount()> -> _SINK_
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()> -> _SINK_
<com.android.contacts.widget.IndexerListAdapter: android.widget.SectionIndexer getIndexer()> -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl$Request: java.lang.Object getKey()> -> _SINK_
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: int getPositionAt(int)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: com.android.contacts.list.ContactListFilter getItem(int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getEmailType()> -> _SINK_
<com.android.contacts.list.DirectoryPartition: java.lang.String getDisplayName()> -> _SINK_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager createContactPhotoManager(android.content.Context)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: long getId()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getPhotoUri()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getTypeColumn()> -> _SINK_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getName()> -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl$Request: android.net.Uri getUri()> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(android.net.Uri)> -> _SINK_
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask$2: int getMaximumScrollableHeaderOffset()> -> _SINK_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> -> _SINK_
<com.android.vcard.VCardParserImpl_V40: int getVersion()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: java.lang.String[] getDefaultProjection(android.net.Uri)> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: int getVersion()> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getNumFrequents()> -> _SINK_
<com.android.vcard.VCardProperty: java.util.Collection getParameters(java.lang.String)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: int getVersion()> -> _SINK_
<com.android.contacts.calllog.ExtendedCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getLine()> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: int getDisplayOrder()> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getLine()> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: int getInt(java.lang.String)> -> _SINK_
<com.android.contacts.model.dataitem.GroupMembershipDataItem: long getGroupRowId()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNormalizedNumber()> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> -> _SINK_
<com.android.contacts.list.ContactsRequest: java.lang.String getQueryString()> -> _SINK_
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<com.android.contacts.editor.AggregationSuggestionEngine: java.util.List getSuggestions()> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: java.lang.String getQueryString()> -> _SINK_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getItemViewType(int)> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.vcard.VCardService$MyBinder: com.android.contacts.vcard.VCardService getService()> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getCollectionName()> -> _SINK_
<com.android.contacts.socialwidget.SocialWidgetSettings: com.android.contacts.socialwidget.SocialWidgetSettings getInstance()> -> _SINK_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.list.DirectoryPartition: int getStatus()> -> _SINK_
<com.android.contacts.util.ExpirableCache: java.lang.Object getPossiblyExpired(java.lang.Object)> -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getBestValidType(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,boolean,int)> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getDefaultAccount()> -> _SINK_
<com.android.providers.contacts.NameSplitter: int getAdjustedNameStyleBasedOnPhoneticNameStyle(int,int)> -> _SINK_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getDataSet()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String)> -> _SINK_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getFormattedPhoneNumber()> -> _SINK_
<com.android.contacts.model.RawContact: java.lang.String getAccountTypeString()> -> _SINK_
<com.android.contacts.editor.SplitContactConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> -> _SINK_
<com.android.contacts.ContactsActivity: android.app.Fragment getFragment(int)> -> _SINK_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)> -> _SINK_
<com.android.mms.data.Contact: java.lang.String getNameAndNumber()> -> _SINK_
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getComplexityCollator()> -> _SINK_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$ImKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> -> _SINK_
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getNameEditor()> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingRight()> -> _SINK_
<com.android.contacts.list.DirectoryPartition: long getDirectoryId()> -> _SINK_
<com.android.contacts.group.GroupListItem: int getMemberCount()> -> _SINK_
<com.android.mms.data.Contact: android.graphics.drawable.Drawable getAvatar(android.content.Context,android.graphics.drawable.Drawable)> -> _SINK_
<com.android.contacts.interactions.ImportExportDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: int getCount()> -> _SINK_
<com.android.vcard.VCardComposer: int getCount()> -> _SINK_
<com.android.contacts.model.RawContact: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> -> _SINK_
<com.android.vcard.VCardEntry$BirthdayData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> -> _SINK_
<com.android.mms.data.Contact: long getRecipientId()> -> _SINK_
<com.android.vcard.VCardProperty: java.lang.String getName()> -> _SINK_
<com.android.mms.data.Contact: java.lang.String getNumber()> -> _SINK_
<com.android.contacts.util.StreamItemPhotoEntry: long getId()> -> _SINK_
<com.android.contacts.list.JoinContactListAdapter: int getViewTypeCount()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$EventActionInflater: int getTypeLabelResource(java.lang.Integer)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticMiddleName()> -> _SINK_
<com.android.contacts.util.DataStatus: int getPresence()> -> _SINK_
<com.android.contacts.model.RawContact: java.lang.String getDataSet()> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackPresenter$FetchResultHandler: java.lang.Runnable getTimeoutRunnable()> -> _SINK_
<com.android.contacts.list.ProfileAndContactsLoader$1: android.os.Bundle getExtras()> -> _SINK_
<com.android.contacts.model.account.AccountType: java.util.List getExtensionPackageNames()> -> _SINK_
<com.android.contacts.activities.DialtactsActivity: java.lang.String getCallOrigin()> -> _SINK_
<com.android.vcard.VCardEntry$SipData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.providers.contacts.DataRowHandler: long getMimeTypeId()> -> _SINK_
<com.android.contacts.list.ContactsSectionIndexer: int getPositionForSection(int)> -> _SINK_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getCustomProtocol()> -> _SINK_
<com.android.contacts.list.ContactTileView: android.net.Uri getLookupUri()> -> _SINK_
<com.android.vcard.VCardEntryCommitter: java.util.ArrayList getCreatedUris()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$SimpleInflater: java.lang.String getColumnNameForTest()> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownValueSet()> -> _SINK_
<com.android.contacts.detail.ContactDetailUpdatesFragment: int getFirstListItemOffset()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: int getKindTypeColumn()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> -> _SINK_
<com.android.providers.contacts.AccountWithDataSet: com.android.providers.contacts.AccountWithDataSet get(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getLabelColumn()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(long)> -> _SINK_
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: long getId()> -> _SINK_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getCreateContactActivityClassName()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> -> _SINK_
<com.android.contacts.util.ThemeUtils: int getAttribute(android.content.res.Resources$Theme,int)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: int getCount()> -> _SINK_
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getMe(boolean)> -> _SINK_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: java.util.Locale getLocale()> -> _SINK_
<com.android.contacts.model.account.BaseAccountType$NoteKindBuilder: java.lang.String getTagName()> -> _SINK_
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> -> _SINK_
<com.android.contacts.util.ImageViewDrawableSetter: android.widget.ImageView getTarget()> -> _SINK_
<com.android.contacts.TypePrecedence: int getTypePrecedence(java.lang.String,int)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownTypeSet()> -> _SINK_
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest()> -> _SINK_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getDisplayName()> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getDisplayPhoto()> -> _SINK_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.dataitem.DataKind getDataKind()> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getViewTypeCount()> -> _SINK_
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getTokens()> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: long getItemId(int)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: int getMaxThumbnailDim()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForPhone()> -> _SINK_
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getProfilePhotoStore()> -> _SINK_
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> -> _SINK_
<com.android.contacts.vcard.ExportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getCurrentType(com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<com.android.contacts.group.GroupBrowseListFragment: android.database.Cursor access$302(com.android.contacts.group.GroupBrowseListFragment,android.database.Cursor)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForIm()> -> _SINK_
<com.android.contacts.calllog.DefaultVoicemailNotifier: com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(android.content.Context)> -> _SINK_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableMap getStatuses()> -> _SINK_
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getSubtitle()> -> _SINK_
<com.android.vcard.VCardEntryCounter: int getCount()> -> _SINK_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.list.ContactTileAdapter: int getFrequentHeaderPosition()> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailData()> -> _SINK_
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> -> _SINK_
<com.android.contacts.util.AccountsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getInviteContactActionLabel(android.content.Context)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemActivity()> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedHorizontalScrollLength()> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: int getSortOrder()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: java.util.Set getAllAccountsWithDataSets()> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: android.content.ContentValues getContentValues()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getPhotoStore()> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getDisplayName()> -> _SINK_
<com.android.contacts.model.Contact: java.lang.String getDisplayName()> -> _SINK_
<com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder: com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(java.lang.String)> -> _SINK_
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.android.vcard.VCardEntry$PhoneData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> -> _SINK_
<com.android.contacts.list.ContactListAdapter: long getSelectedContactDirectoryId()> -> _SINK_
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<com.android.contacts.model.RawContact: java.lang.Long getId()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: int getDisplayNameSourceForMimeTypeId(int)> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.account.AccountType getAccountType()> -> _SINK_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.Iterable,boolean)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<com.android.providers.contacts.MemoryCursor: java.lang.String[] getColumnNames()> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandler(java.lang.String)> -> _SINK_
<com.android.vcard.VCardComposer: java.lang.String createOneEntry()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: long getPackageId(java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: int getSortOrder()> -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: java.lang.String getCurrentPhotoFile()> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getPrefix()> -> _SINK_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getItemViewType(int)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getContactsCount()> -> _SINK_
<com.android.contacts.datepicker.DatePicker: int getYear()> -> _SINK_
<com.android.mms.data.Contact: boolean getSendToVoicemail()> -> _SINK_
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.contacts.activities.ContactEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> -> _SINK_
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()> -> _SINK_
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getNormalizedBitmap(android.graphics.Bitmap,int,boolean)> -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: java.lang.String providerDescription(android.content.pm.ProviderInfo)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.contacts.datepicker.DatePicker$SavedState: int getDay()> -> _SINK_
<com.android.contacts.util.DialogManager: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<com.android.contacts.model.RawContact: java.lang.String getAccountName()> -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.contacts.util.StructuredPostalUtils: android.content.Intent getViewPostalAddressIntent(java.lang.String)> -> _SINK_
<com.android.contacts.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> -> _SINK_
<com.android.contacts.detail.StreamItemAdapter: long getItemId(int)> -> _SINK_
<com.android.contacts.ContactSaveService: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: java.lang.String getCreateContactActivityClassName()> -> _SINK_
<com.android.contacts.model.dataitem.EmailDataItem: java.lang.String getData()> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.contacts.quickcontact.ResolveCache: android.graphics.drawable.Drawable getIcon(com.android.contacts.quickcontact.Action)> -> _SINK_
<com.android.contacts.model.ContactLoader: android.net.Uri getLookupUri()> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getFamilyName()> -> _SINK_
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> -> _SINK_
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()> -> _SINK_
<com.android.calendar.Utils: long getTardis()> -> _SINK_
<java.util.Calendar: int getActualMinimum(int)> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)> -> _SINK_
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> -> _SINK_
<android.widget.CalendarView: int getDateTextAppearance()> -> _SINK_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> -> _SINK_
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)> -> _SINK_
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.calendar.Event: java.lang.String getTitleAndLocation()> -> _SINK_
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)> -> _SINK_
<com.android.calendar.EventInfoFragment: long getStartMillis()> -> _SINK_
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)> -> _SINK_
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()> -> _SINK_
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()> -> _SINK_
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> -> _SINK_
<java.util.Calendar: java.util.Calendar getInstance()> -> _SINK_
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)> -> _SINK_
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)> -> _SINK_
<java.util.GregorianCalendar: int getLeastMaximum(int)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()> -> _SINK_
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)> -> _SINK_
<android.widget.CalendarView: int getWeekDayTextAppearance()> -> _SINK_
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)> -> _SINK_
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.AsyncQueryService: int getNextToken()> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)> -> _SINK_
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)> -> _SINK_
<com.android.calendarcommon2.Duration: long getMillis()> -> _SINK_
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)> -> _SINK_
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()> -> _SINK_
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)> -> _SINK_
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)> -> _SINK_
<com.android.calendar.DayFragment: long getSupportedEventTypes()> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.calendar.DayOfMonthDrawable: int getOpacity()> -> _SINK_
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> -> _SINK_
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()> -> _SINK_
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)> -> _SINK_
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> -> _SINK_
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)> -> _SINK_
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()> -> _SINK_
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> -> _SINK_
<com.android.calendar.SearchActivity: long getSupportedEventTypes()> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()> -> _SINK_
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)> -> _SINK_
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()> -> _SINK_
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)> -> _SINK_
<com.android.calendar.CalendarController: long getEventId()> -> _SINK_
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> -> _SINK_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)> -> _SINK_
<java.util.Calendar: int getActualMaximum(int)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> -> _SINK_
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)> -> _SINK_
<android.widget.CalendarView: int getUnfocusedMonthDateColor()> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)> -> _SINK_
<java.util.Calendar: java.lang.String toString()> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)> -> _SINK_
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()> -> _SINK_
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()> -> _SINK_
<com.android.calendar.CalendarController: long getDateFlags()> -> _SINK_
<java.util.Calendar: int getMinimalDaysInFirstWeek()> -> _SINK_
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)> -> _SINK_
<android.widget.CalendarView: int getFocusedMonthDateColor()> -> _SINK_
<com.android.calendar.DayView: long getSelectedTimeInMillis()> -> _SINK_
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)> -> _SINK_
<com.android.calendar.Event: long getEndMillis()> -> _SINK_
<android.widget.CalendarView: long getMaxDate()> -> _SINK_
<com.android.calendar.CalendarController: int getPreviousViewType()> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()> -> _SINK_
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.DayView: int getFirstVisibleHour()> -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)> -> _SINK_
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()> -> _SINK_
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.calendar.Event: int getColumn()> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()> -> _SINK_
<com.android.calendar.Event: int getMaxColumns()> -> _SINK_
<android.widget.CalendarView: int getFirstDayOfWeek()> -> _SINK_
<com.android.calendar.CalendarController: long getTime()> -> _SINK_
<com.android.calendar.Utils: int getDisplayColorFromColor(int)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)> -> _SINK_
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()> -> _SINK_
<java.util.GregorianCalendar: int getGreatestMinimum(int)> -> _SINK_
<com.android.calendar.EventInfoFragment: long getEventId()> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()> -> _SINK_
<android.widget.CalendarView: long getDate()> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: int getCount()> -> _SINK_
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()> -> _SINK_
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> -> _SINK_
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> -> _SINK_
<com.android.calendar.EventInfoFragment: long getEndMillis()> -> _SINK_
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> -> _SINK_
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()> -> _SINK_
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)> -> _SINK_
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()> -> _SINK_
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()> -> _SINK_
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)> -> _SINK_
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)> -> _SINK_
<java.util.GregorianCalendar: java.util.Date getGregorianChange()> -> _SINK_
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.widget.CalendarView: int getWeekNumberColor()> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)> -> _SINK_
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)> -> _SINK_
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)> -> _SINK_
<java.util.Calendar: java.util.Locale[] getAvailableLocales()> -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)> -> _SINK_
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)> -> _SINK_
<java.util.Calendar: long getTimeInMillis()> -> _SINK_
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> -> _SINK_
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()> -> _SINK_
<java.util.Calendar: java.util.Date getTime()> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)> -> _SINK_
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()> -> _SINK_
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()> -> _SINK_
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])> -> _SINK_
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()> -> _SINK_
<java.util.GregorianCalendar: int getMaximum(int)> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()> -> _SINK_
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)> -> _SINK_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()> -> _SINK_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SINK_
<java.util.GregorianCalendar: int getActualMinimum(int)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()> -> _SINK_
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()> -> _SINK_
<com.android.calendar.CalendarController$EventInfo: int getResponse()> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)> -> _SINK_
<com.android.calendar.Event: long getStartMillis()> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)> -> _SINK_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> -> _SINK_
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> -> _SINK_
<com.android.calendar.DayView: int getEventsAlpha()> -> _SINK_
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)> -> _SINK_
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<java.util.Calendar: java.lang.Object clone()> -> _SINK_
<com.android.calendar.CalendarController: int getViewType()> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)> -> _SINK_
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()> -> _SINK_
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.util.Calendar: int getFirstDayOfWeek()> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)> -> _SINK_
<com.android.calendar.EditResponseHelper: int getWhichEvents()> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()> -> _SINK_
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)> -> _SINK_
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()> -> _SINK_
<android.widget.CalendarView: int getWeekSeparatorLineColor()> -> _SINK_
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()> -> _SINK_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)> -> _SINK_
<android.widget.CalendarView: long getMinDate()> -> _SINK_
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)> -> _SINK_
<java.util.GregorianCalendar: int getActualMaximum(int)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()> -> _SINK_
<com.android.calendar.CalendarViewAdapter: int getCount()> -> _SINK_
<com.android.calendar.CalendarViewAdapter: long getItemId(int)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> -> _SINK_
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)> -> _SINK_
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()> -> _SINK_
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)> -> _SINK_
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)> -> _SINK_
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> -> _SINK_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)> -> _SINK_
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()> -> _SINK_
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()> -> _SINK_
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)> -> _SINK_
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)> -> _SINK_
<java.util.Calendar: int get(int)> -> _SINK_
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)> -> _SINK_
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)> -> _SINK_
<android.widget.CalendarView: int getShownWeekCount()> -> _SINK_
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)> -> _SINK_
<java.util.GregorianCalendar: int getMinimum(int)> -> _SINK_
<com.android.calendar.month.SimpleWeekView: int getLastMonth()> -> _SINK_
<android.widget.CalendarView: boolean getShowWeekNumber()> -> _SINK_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> -> _SINK_
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)> -> _SINK_
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> -> _SINK_
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> -> _SINK_
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()> -> _SINK_
<android.webkit.WebSettings: boolean getSavePassword()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()> -> _SINK_
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> -> _SINK_
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()> -> _SINK_
<com.android.server.net.NetworkStatsCollection: long getStartMillis()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()> -> _SINK_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)> -> _SINK_
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: long getEndMillis()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()> -> _SINK_
<android.webkit.WebSettings: boolean getDatabaseEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()> -> _SINK_
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()> -> _SINK_
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean getMute()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int getPhoneType()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()> -> _SINK_
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()> -> _SINK_
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getSavePassword()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)> -> _SINK_
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()> -> _SINK_
<android.webkit.WebSettings: boolean getLightTouchEnabled()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getStartCount()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()> -> _SINK_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()> -> _SINK_
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()> -> _SINK_
<android.webkit.WebSettings: boolean getJavaScriptEnabled()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()> -> _SINK_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()> -> _SINK_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)> -> _SINK_
<android.webkit.WebSettings: boolean getPluginsEnabled()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()> -> _SINK_
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()> -> _SINK_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> -> _SINK_
<android.webkit.WebSettings: boolean getDomStorageEnabled()> -> _SINK_
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()> -> _SINK_
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()> -> _SINK_
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()> -> _SINK_
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SINK_
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: boolean getMute()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()> -> _SINK_
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SINK_
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()> -> _SINK_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()> -> _SINK_
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()> -> _SINK_
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> -> _SINK_
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.gallery3d.data.UriImage: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getVisibility()> -> _SINK_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BytesBufferPool getBytesBufferPool()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: long getUnsignedLong(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getViewTypeCount()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade()> -> _SINK_
<com.android.gallery3d.data.FilterEmptyPromptSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.exif.ExifData: int getStripCount()> -> _SINK_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getExpectedUsedBytes()> -> _SINK_
<com.android.gallery3d.exif.ExifData: byte[] getCompressedThumbnail()> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: android.database.Cursor internalQuery(int,int)> -> _SINK_
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.Face[] getFaces()> -> _SINK_
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float,com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getGeometryOnlyImage()> -> _SINK_
<com.android.gallery3d.ui.TiledScreenNail: int getWidth()> -> _SINK_
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long)> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getCount()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.app.GalleryApp getApplication()> -> _SINK_
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader()> -> _SINK_
<com.android.gallery3d.data.Face: android.graphics.Rect getPosition()> -> _SINK_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpObjectInfo getObjectInfo(java.lang.String,int)> -> _SINK_
<com.android.gallery3d.ui.CropView: int getImageWidth()> -> _SINK_
<com.android.gallery3d.provider.GalleryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.gallery3d.data.ClusterAlbumSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.util.ThreadPool$Worker: java.lang.Object get()> -> _SINK_
<com.android.gallery3d.data.LocalAlbumSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.app.ActivityState: float[] getBackgroundColor()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getOffset()> -> _SINK_
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int get()> -> _SINK_
<com.android.gallery3d.util.LightCycleHelper: com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.gallery3d.exif.Rational: long getNominator()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMaxParameter()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getOriginalToScreen(boolean,float,float,float,float)> -> _SINK_
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag getTag(short)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF unrotatedCropBounds()> -> _SINK_
<com.android.gallery3d.data.MediaObject: int getCacheFlag()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ZoomCache: android.graphics.Bitmap getImage(com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getLoadingState(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.PanelController getPanelController()> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.ui.PhotoView: boolean getFilmMode()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: long getDateTaken(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.ui.Paper: float[] getTransform(android.graphics.Rect,float)> -> _SINK_
<com.android.gallery3d.ui.BitmapLoader: android.graphics.Bitmap getBitmap()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: long getTotalTargetCacheSize()> -> _SINK_
<com.android.gallery3d.ui.PreparePageFadeoutTexture: com.android.gallery3d.ui.RawTexture get()> -> _SINK_
<com.android.gallery3d.app.TimeBar: int getPreferredHeight()> -> _SINK_
<com.android.gallery3d.filtershow.HistoryAdapter: com.android.gallery3d.filtershow.presets.ImagePreset getLast()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.PositionController: android.graphics.Rect getPosition(int)> -> _SINK_
<com.android.gallery3d.ui.BitmapTileProvider: com.android.gallery3d.ui.ScreenNail getScreenNail()> -> _SINK_
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaSet getMediaSet(int)> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.net.Uri getUri()> -> _SINK_
<com.android.gallery3d.app.AlbumSetPage: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.data.LocalImage: int getRotation()> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.data.DataManager getDataManager()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: int getMediaType()> -> _SINK_
<com.android.gallery3d.filtershow.PanelController$Panel: int getPosition()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getCropBounds(android.graphics.Bitmap)> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: android.database.Cursor getItemCursor(android.content.ContentResolver,android.net.Uri,java.lang.String[],int)> -> _SINK_
<com.android.gallery3d.data.MtpImage: int getMediaType()> -> _SINK_
<com.android.gallery3d.data.SecureAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.ui.BasicTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.data.LocalImage$LocalLargeImageRequest: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: long getItemId(int)> -> _SINK_
<com.android.gallery3d.data.MediaObject: int getTypeFromString(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getMeasuredHeight()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getOriginalBitmapLarge()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageRotation(int)> -> _SINK_
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaItem getCoverItem(int)> -> _SINK_
<com.android.gallery3d.data.LocalVideo: java.lang.String getFilePath()> -> _SINK_
<com.android.gallery3d.data.UriImage: int getHeight()> -> _SINK_
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.gallery3d.data.BytesBufferPool: com.android.gallery3d.data.BytesBufferPool$BytesBuffer get()> -> _SINK_
<com.android.gallery3d.app.ManageCachePage: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getScaleFactor()> -> _SINK_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.data.MtpImage: long getSize()> -> _SINK_
<com.android.gallery3d.data.MediaDetails: java.lang.Object getDetail(int)> -> _SINK_
<com.android.gallery3d.exif.ExifParser: com.android.gallery3d.exif.ExifTag getTag()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPhotoBounds()> -> _SINK_
<com.android.gallery3d.common.OverScroller: float getCurrVelocity()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getMeasuredWidth()> -> _SINK_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.gallery3d.ui.PositionController: int getImageAtEdges()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getDataSize()> -> _SINK_
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.data.MediaSource: long getTotalUsedCacheSize()> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem[] getMediaItemById(com.android.gallery3d.app.GalleryApp,boolean,java.util.ArrayList)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: int getDefaultBackgroundColor()> -> _SINK_
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2600(android.net.Uri)> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,boolean)> -> _SINK_
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.ComboAlbumSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicWidth()> -> _SINK_
<com.android.gallery3d.ui.GLRootView: android.graphics.Matrix getCompensationMatrix()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItems()> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: android.graphics.Bitmap getBitmap()> -> _SINK_
<com.android.gallery3d.data.DataManager: long getTotalUsedCacheSize()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getParameter()> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.ui.CropView: int getImageHeight()> -> _SINK_
<com.android.gallery3d.ui.SlotView: int getVisibleStart()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object get()> -> _SINK_
<com.android.gallery3d.data.TagClustering: java.lang.String getClusterName(int)> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getLevelCount()> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: int getCount()> -> _SINK_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getUsedBytes()> -> _SINK_
<com.android.gallery3d.data.ActionImage: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getPlayUri()> -> _SINK_
<com.android.gallery3d.ui.AnimationTime: long get()> -> _SINK_
<com.android.gallery3d.data.Face: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.imageshow.ImageShow getMaster()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)> -> _SINK_
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2700(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getUntranslatedStraightenCropBounds(android.graphics.RectF,float)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalUsedCacheSize(android.content.Context)> -> _SINK_
<com.android.gallery3d.ui.BitmapScreenNail: int getHeight()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.app.PhotoPage: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.ui.CropView: android.graphics.RectF getCropRectangle()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasasync.PicasaFacade getPicasaFacade()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getContentType(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: int getClusterTypeAction()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> -> _SINK_
<com.android.gallery3d.data.MtpImage: byte[] getImageData()> -> _SINK_
<com.android.gallery3d.anim.FloatAnimation: float get()> -> _SINK_
<com.android.gallery3d.data.LocalImage: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getAuthority(android.content.Context)> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.data.MtpImage: int getWidth()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.app.TimeBar: int getBarHeight()> -> _SINK_
<com.android.gallery3d.exif.CountedDataInputStream: int getReadByteCount()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: long getCacheSize()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getComponentCount()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getFinalY()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getFinalX()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getLocalGeoFlipMatrix(float,float)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: short getTagId()> -> _SINK_
<com.android.gallery3d.util.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,int)> -> _SINK_
<com.android.gallery3d.exif.IfdData: int getOffsetToNextIfd()> -> _SINK_
<com.android.gallery3d.data.MediaItem: java.lang.String getFilePath()> -> _SINK_
<com.android.gallery3d.ui.NinePatchTexture: com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk()> -> _SINK_
<com.android.gallery3d.ui.FadeTexture: float getRatio()> -> _SINK_
<com.android.gallery3d.ui.PhotoView$FullPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Rect getOriginalBounds()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getId()> -> _SINK_
<com.android.gallery3d.data.SnailItem: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: com.adobe.xmp.XMPMeta getXmpObject()> -> _SINK_
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.exif.ExifParser: int getStripSize()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> -> _SINK_
<com.android.gallery3d.common.OverScroller: int getCurrX()> -> _SINK_
<com.android.gallery3d.ui.ScrollerHelper: int getPosition()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: int getTotalMediaItemCount()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getWidth()> -> _SINK_
<com.android.gallery3d.data.ComboAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getThumbPool()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: double getLatitude(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.data.MediaItem: long getDateInMs()> -> _SINK_
<com.android.gallery3d.data.MtpClient: java.util.List getDeviceList()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFiltersOnlyImage()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFilteredImage()> -> _SINK_
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.Entry valuesToObject(android.content.ContentValues,com.android.gallery3d.common.Entry)> -> _SINK_
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.ui.PositionController: float getFilmRatio()> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getParent()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: int getLocalValue()> -> _SINK_
<com.android.gallery3d.picasasource.FaceImage: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.data.MediaObject: int getCacheStatus()> -> _SINK_
<com.android.gallery3d.ui.BasicTexture: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getWidth()> -> _SINK_
<com.android.gallery3d.common.EntrySchema: int getColumnIndex(java.lang.String)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getCurrentIndex()> -> _SINK_
<com.android.gallery3d.data.MediaObject: long getCacheSize()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.gallery3d.ui.GLView: float[] getBackgroundColor()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getUnsignedShort(int)> -> _SINK_
<com.android.gallery3d.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()> -> _SINK_
<com.android.gallery3d.ui.SlotView: int getVisibleEnd()> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()> -> _SINK_
<com.android.gallery3d.data.TagClustering: java.util.ArrayList getCluster(int)> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> -> _SINK_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: long getItemId(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType()> -> _SINK_
<com.android.gallery3d.data.MtpImage: int getHeight()> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getGeoMatrix(android.graphics.RectF,boolean)> -> _SINK_
<com.android.gallery3d.app.Config$ManageCachePage: com.android.gallery3d.app.Config$ManageCachePage get(android.content.Context)> -> _SINK_
<com.android.gallery3d.ui.PositionController: int getImageHeight()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap rotateToPortrait(android.graphics.Bitmap,int)> -> _SINK_
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node getChild(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MediaSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getItem()> -> _SINK_
<com.android.gallery3d.util.IdentityCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: int getCount()> -> _SINK_
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.renderscript.RenderScript getRenderScriptContext()> -> _SINK_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: int getHeight()> -> _SINK_
<com.android.gallery3d.ui.TiledTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.picasasource.BasePicasaAlbum: android.database.Cursor internalQuery(int,int)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.SingleItemAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalTargetCacheSize(com.android.gallery3d.picasasource.PicasaSource)> -> _SINK_
<com.android.gallery3d.exif.IfdData: int getTagCount()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalCropBounds()> -> _SINK_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getFreeBytes()> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> -> _SINK_
<com.android.gallery3d.common.EntrySchema: java.lang.String[] getProjection()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()> -> _SINK_
<com.android.gallery3d.data.FaceClustering: java.lang.String getClusterName(int)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getComponentCount()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: com.android.gallery3d.filtershow.ui.Spline getSpline(int)> -> _SINK_
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleStart()> -> _SINK_
<com.android.gallery3d.ui.AlbumLabelMaker: int getBorderSize()> -> _SINK_
<com.android.gallery3d.filtershow.ui.Spline: float[] getAppliedCurve()> -> _SINK_
<com.android.gallery3d.common.EntrySchema: java.lang.String getTableName()> -> _SINK_
<com.android.gallery3d.filtershow.ui.Spline: com.android.gallery3d.filtershow.ui.ControlPoint getPoint(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.PanelController getPanelController()> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: android.content.Context getAndroidContext()> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.common.BlobCache getFaceCache(android.content.Context)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.Path: java.lang.String getPrefix()> -> _SINK_
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: int getWidth()> -> _SINK_
<com.android.gallery3d.data.ActionImage: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageWidth()> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> -> _SINK_
<com.android.gallery3d.data.MtpDevice: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.util.CacheManager: com.android.gallery3d.common.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)> -> _SINK_
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterY()> -> _SINK_
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterX()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.picasasource.BasePicasaAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.widget.ArrayAdapter getImageStateAdapter()> -> _SINK_
<com.android.gallery3d.ui.BitmapScreenNail: int getWidth()> -> _SINK_
<com.android.gallery3d.ui.SlideshowView$SlideshowAnimation: int getCanvasSaveFlags()> -> _SINK_
<com.android.gallery3d.data.LocalImage: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.gallery3d.data.MediaObject: long getDataVersion()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalStraighten()> -> _SINK_
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: com.android.gallery3d.app.AbstractGalleryActivity getActivity()> -> _SINK_
<com.android.gallery3d.data.UriImage: int getMediaType()> -> _SINK_
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterGeometry: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper()> -> _SINK_
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> -> _SINK_
<com.android.gallery3d.ui.DetailsHelper: java.lang.String getDetailsName(android.content.Context,int)> -> _SINK_
<com.android.gallery3d.ui.UploadedTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: com.google.android.picasasync.PhotoEntry getPhotoEntry(com.android.gallery3d.picasasource.PicasaSource,long)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Rect getDisplayedImageBounds()> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: int getId()> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getId()> -> _SINK_
<com.android.gallery3d.data.ActionImage: int getWidth()> -> _SINK_
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.gallery3d.data.MtpImage: long getDateInMs()> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.SnailItem: int getWidth()> -> _SINK_
<com.android.gallery3d.ui.TiledScreenNail: int getHeight()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getLong(int)> -> _SINK_
<com.android.gallery3d.exif.ExifData: byte[] getStrip(int)> -> _SINK_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: long getItemId(int)> -> _SINK_
<com.android.gallery3d.data.ComboAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.LocationClustering: int getNumberOfClusters()> -> _SINK_
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getHeight()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Bitmap getFilteredImage()> -> _SINK_
<com.android.gallery3d.data.LocalImage: int getWidth()> -> _SINK_
<com.android.gallery3d.ui.PositionController: float getImageScale()> -> _SINK_
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicHeight()> -> _SINK_
<com.android.gallery3d.data.SnailItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> -> _SINK_
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLRoot getGLRoot()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.data.Cluster: java.util.ArrayList getItems()> -> _SINK_
<com.android.gallery3d.picasasource.BasePicasaAlbum: long reload()> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl: javax.microedition.khronos.opengles.GL11 getGLInstance()> -> _SINK_
<com.android.gallery3d.common.Fingerprint: byte[] getBytes()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.ui.PositionController: int getImageWidth()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: long getTotalUsedCacheSize()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheStatus()> -> _SINK_
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.gallery3d.app.ActivityState: android.view.MenuInflater getSupportMenuInflater()> -> _SINK_
<com.android.gallery3d.data.UriImage: int getWidth()> -> _SINK_
<com.android.gallery3d.data.MediaSet: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getCurrY()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getCurrX()> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: java.lang.String getLocalizedName(android.content.res.Resources,int,java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MediaSet: int getTotalMediaItemCount()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.data.MtpClient: java.util.List getObjectList(java.lang.String,int,int)> -> _SINK_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getTotalBytes()> -> _SINK_
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap()> -> _SINK_
<com.android.gallery3d.app.PackagesMonitor: int getPackagesVersion(android.content.Context)> -> _SINK_
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag[] getAllTags()> -> _SINK_
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: int getLocalValue()> -> _SINK_
<com.android.gallery3d.exif.IfdData: int getId()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean getDirtyGeometryFlag()> -> _SINK_
<android.widget.Gallery: int getChildDrawingOrder(int,int)> -> _SINK_
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MtpDevice: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.ComboAlbumSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.ui.CanvasTexture: android.graphics.Bitmap onGetBitmap()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.ui.NinePatchTexture$SmallCache: java.lang.Object get(int)> -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getNewFile(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.gallery3d.data.Path: java.lang.String getSuffix()> -> _SINK_
<com.android.gallery3d.exif.ExifParser: int getCompressedImageSize()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getIfd()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaPostAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.util.Future requestSyncOnMultipleSets(com.android.gallery3d.data.MediaSet[],com.android.gallery3d.data.MediaSet$SyncListener)> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> -> _SINK_
<com.android.gallery3d.util.IntArray: int[] getInternalArray()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLView getComponent(int)> -> _SINK_
<com.android.gallery3d.ui.BasicTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.StateManager getStateManager()> -> _SINK_
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.data.MediaObject: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getImageTitle(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.data.Clustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> -> _SINK_
<com.android.gallery3d.gadget.LocalPhotoSource: android.net.Uri getContentUri(int)> -> _SINK_
<com.android.gallery3d.data.UriImage: int getRotation()> -> _SINK_
<com.android.gallery3d.data.SizeClustering: long getMinSize(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.RectF getCropBoundsDisplayed()> -> _SINK_
<com.android.gallery3d.data.ActionImage: int getMediaType()> -> _SINK_
<com.android.gallery3d.ui.UploadedTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.data.BucketHelper: java.lang.String getBucketName(android.content.ContentResolver,int)> -> _SINK_
<com.android.gallery3d.data.MtpClient: java.util.List getStorageList(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.LocalImage: java.lang.String getFilePath()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: android.net.Uri getPlayUri()> -> _SINK_
<com.android.gallery3d.data.DataManager: java.lang.String getTopSetPath(int)> -> _SINK_
<com.android.gallery3d.provider.GalleryProvider: android.net.Uri getUriFor(android.content.Context,com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: float getAngle()> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> -> _SINK_
<com.android.gallery3d.app.Config$AlbumSetPage: com.android.gallery3d.app.Config$AlbumSetPage get(android.content.Context)> -> _SINK_
<com.android.gallery3d.data.LocalImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: long getPicasaId(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: long getDateInMs()> -> _SINK_
<com.android.gallery3d.data.PathMatcher$Node: int getKind()> -> _SINK_
<com.android.gallery3d.ui.TiledTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> -> _SINK_
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.data.DataManager: long getTotalTargetCacheSize()> -> _SINK_
<com.android.gallery3d.app.StitchingProgressManager: java.lang.Integer getProgress(android.net.Uri)> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.TimeClustering: java.lang.String getClusterName(int)> -> _SINK_
<com.android.gallery3d.filtershow.presets.ImagePreset: float getScaleFactor()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getLoadingState(int)> -> _SINK_
<com.android.gallery3d.data.MediaSet$1: java.lang.Integer get()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: java.lang.Integer get()> -> _SINK_
<com.android.gallery3d.data.MediaObject: android.net.Uri getPlayUri()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> -> _SINK_
<com.android.gallery3d.data.MediaDetails: int getUnit(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropRotationMatrix(float,android.graphics.RectF)> -> _SINK_
<com.android.gallery3d.picasasource.FaceImage: int getHeight()> -> _SINK_
<com.android.gallery3d.ui.NinePatchTexture: android.graphics.Rect getPaddings()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> -> _SINK_
<com.android.gallery3d.ui.BitmapTileProvider: int getImageWidth()> -> _SINK_
<com.android.gallery3d.ui.ScrollerHelper: float getCurrVelocity()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.SizeClustering: java.lang.String getClusterName(int)> -> _SINK_
<com.android.gallery3d.ui.GLPaint: float getLineWidth()> -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getFinalSaveDirectory(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalRotation()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMath: float[] getUnitVectorFromPoints(float[],float[])> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.ui.GLRoot getGLRoot()> -> _SINK_
<com.android.gallery3d.data.MtpDevice: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getPrefixPath()> -> _SINK_
<com.android.gallery3d.filtershow.ui.ImageButtonTitle: java.lang.String getText()> -> _SINK_
<com.android.gallery3d.data.MediaItem: int getRotation()> -> _SINK_
<com.android.gallery3d.ui.ColorTexture: int getWidth()> -> _SINK_
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)> -> _SINK_
<com.android.gallery3d.ui.AlbumLabelMaker$LazyLoadedBitmap: android.graphics.Bitmap get()> -> _SINK_
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: int getNumberOfDeletions()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry()> -> _SINK_
<com.android.gallery3d.data.MediaSet: int getIndexOf(com.android.gallery3d.data.Path,java.util.ArrayList)> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.TransitionStore getTransitionStore()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: byte getFilterType()> -> _SINK_
<com.android.gallery3d.data.MtpDeviceSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.util.GalleryUtils: byte[] getBytes(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: long getDateInMs()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getHeight()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> -> _SINK_
<com.android.gallery3d.data.MediaItem: java.lang.String[] getTags()> -> _SINK_
<com.android.gallery3d.ui.TiledScreenNail: com.android.gallery3d.ui.TiledTexture getTexture()> -> _SINK_
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.filtershow.cache.DirectPresetCache: android.graphics.Bitmap get(com.android.gallery3d.filtershow.presets.ImagePreset)> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: long reload()> -> _SINK_
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> -> _SINK_
<com.android.gallery3d.data.FaceClustering: java.util.ArrayList getCluster(int)> -> _SINK_
<com.android.gallery3d.ui.CropView$AnimationController: float getScale()> -> _SINK_
<com.android.gallery3d.data.FaceClustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> -> _SINK_
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.SelectionManager: int getSelectedCount()> -> _SINK_
<com.android.gallery3d.exif.ExifData: java.nio.ByteOrder getByteOrder()> -> _SINK_
<com.android.gallery3d.data.MtpImage: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.app.StateManager: int getStateCount()> -> _SINK_
<com.android.gallery3d.exif.ExifParser: int getCurrentIfd()> -> _SINK_
<com.android.gallery3d.app.ActivityState: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.util.RangeIntArray: int get(int)> -> _SINK_
<com.android.gallery3d.data.MediaSource: java.lang.String getPrefix()> -> _SINK_
<com.android.gallery3d.filtershow.FilterShowActivity: float getPixelsFromDip(float)> -> _SINK_
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: com.google.android.picasasync.PhotoEntry getPhotoEntry()> -> _SINK_
<com.android.gallery3d.data.EmptyAlbumImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.data.TimeClustering: int getNumberOfClusters()> -> _SINK_
<com.android.gallery3d.data.MediaItem: long getSize()> -> _SINK_
<com.android.gallery3d.app.SlideshowPage: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.app.CommonControllerOverlay: android.view.View getView()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity)> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.filtershow.ui.Spline: int getNbPoints()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalScale()> -> _SINK_
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getSetPath(int)> -> _SINK_
<com.android.gallery3d.data.PathMatcher: java.lang.String getVar(int)> -> _SINK_
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int getTarget()> -> _SINK_
<com.android.gallery3d.exif.ExifReader: com.android.gallery3d.exif.ExifData read(java.io.InputStream)> -> _SINK_
<com.android.gallery3d.data.PathMatcher: int getIntVar(int)> -> _SINK_
<com.android.gallery3d.data.ActionImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.data.UriImage: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.data.UnlockImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: long getAlbumId()> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path findPathByUri(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getMicroThumbPool()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getStraightenRotation()> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: short getDataType()> -> _SINK_
<com.android.gallery3d.app.ActivityState: android.os.Bundle getData()> -> _SINK_
<com.android.gallery3d.common.OverScroller: int getFinalX()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: long getSize()> -> _SINK_
<com.android.gallery3d.data.UriImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: int getCount()> -> _SINK_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getWidth()> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.MediaObject getObject()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaPostAlbum$PostSyncFuture: java.lang.Integer get()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: float[] getMatrix()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> -> _SINK_
<android.widget.Gallery: int getChildHeight(android.view.View)> -> _SINK_
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: int setIndex()> -> _SINK_
<com.android.gallery3d.data.SingleItemAlbum: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.ui.TileImageView$Tile: com.android.gallery3d.ui.TileImageView$Tile getParentTile()> -> _SINK_
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.filtershow.ImageStateAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getScaleOneImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect,boolean)> -> _SINK_
<com.android.gallery3d.ui.BitmapTileProvider: int getLevelCount()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getHorizontalMatrix(float)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentResolver getContentResolver()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long,java.lang.Object)> -> _SINK_
<com.android.gallery3d.data.MtpImage: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: int getLocalValue()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.ui.UploadedTexture: int getTarget()> -> _SINK_
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientation(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.gallery3d.data.SecureAlbum: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.ui.GLRootView: int getCompensation()> -> _SINK_
<com.android.gallery3d.data.LocalImage: int getHeight()> -> _SINK_
<com.android.gallery3d.app.AlbumPage: int getBackgroundColorId()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getVerticalMatrix(float)> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getMatrixOriginalOrientation(int,float,float)> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: void getLatLong(double[])> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getCurrentIndex()> -> _SINK_
<com.android.gallery3d.data.FaceClustering: int getNumberOfClusters()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMinParameter()> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(int)> -> _SINK_
<com.android.gallery3d.data.MtpContext: com.android.gallery3d.data.MtpClient getMtpClient()> -> _SINK_
<com.android.gallery3d.exif.ExifTag: int getIfdIdFromTagId(short)> -> _SINK_
<com.android.gallery3d.app.Bookmarker: java.lang.Integer getBookmark(android.net.Uri)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropBoundDisplayMatrix()> -> _SINK_
<com.android.gallery3d.exif.Rational: long getDenominator()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: com.android.gallery3d.filtershow.FilterShowActivity getActivity()> -> _SINK_
<com.android.gallery3d.ui.BasicTexture: int getId()> -> _SINK_
<com.android.gallery3d.data.LocationClustering: java.util.ArrayList getCluster(int)> -> _SINK_
<com.android.gallery3d.app.Config$AlbumPage: com.android.gallery3d.app.Config$AlbumPage get(android.content.Context)> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.app.OrientationManager: int getDisplayRotation()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String[] getTags()> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<com.android.gallery3d.data.LocationClustering: java.lang.String getClusterName(int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: int getMediaType()> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.filtershow.HistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.data.LocalVideo$LocalVideoRequest: android.graphics.Bitmap onDecodeOriginal(com.android.gallery3d.util.ThreadPool$JobContext,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSmallFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> -> _SINK_
<com.android.gallery3d.data.LocalAlbum: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.graphics.Bitmap getImage(int)> -> _SINK_
<com.android.gallery3d.ui.PhotoView$ZInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.gallery3d.ui.BasicTexture: int getTextureHeight()> -> _SINK_
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.ExifTag addTag(short)> -> _SINK_
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> -> _SINK_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(int)> -> _SINK_
<com.android.gallery3d.ui.BitmapTileProvider: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> -> _SINK_
<com.android.gallery3d.exif.ExifParser: java.nio.ByteOrder getByteOrder()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl: float getAlpha()> -> _SINK_
<com.android.gallery3d.data.SizeClustering: int getNumberOfClusters()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientationFromPath(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int,com.android.gallery3d.ui.GLView)> -> _SINK_
<com.android.gallery3d.app.AlbumSetDataLoader: int getTotalCount(int)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: android.view.Menu getMenu()> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getLoadingView()> -> _SINK_
<com.android.gallery3d.data.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(com.android.gallery3d.data.MtpContext,int,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: int getFullImageRotation()> -> _SINK_
<com.android.gallery3d.data.FaceClustering$FaceCluster: com.android.gallery3d.data.MediaItem getCover()> -> _SINK_
<com.android.gallery3d.data.LocalVideo: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: long getItemId(int)> -> _SINK_
<com.android.gallery3d.data.MtpDeviceSet: int getSubMediaSetCount()> -> _SINK_
<com.android.gallery3d.data.MtpImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Rect getDisplayedImageBounds()> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.ui.StringTexture: android.text.TextPaint getDefaultPaint(float,int)> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheFlag()> -> _SINK_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> -> _SINK_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getZoomOrientation()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.MediaItem getFaceItem(android.content.Context,com.android.gallery3d.data.MediaItem,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: float getCurrentTouchAngle()> -> _SINK_
<com.android.gallery3d.data.MtpDevice: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.ui.FadeTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.ui.ColorTexture: int getHeight()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getUserAccount(android.content.Context,com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.data.UriImage: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getPreviewParameter()> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getDefaultParameter()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageFlip: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.picasasource.FaceImage: int getWidth()> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: long getSize()> -> _SINK_
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.data.MtpClient: byte[] getThumbnail(java.lang.String,int)> -> _SINK_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SINK_
<com.android.gallery3d.data.TagClustering: int getNumberOfClusters()> -> _SINK_
<com.android.gallery3d.ui.FadeTexture: int getWidth()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity,int)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)> -> _SINK_
<com.android.gallery3d.app.OrientationManager: int getCompensation()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getContentProvider()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.ui.GLPaint: int getColor()> -> _SINK_
<com.android.gallery3d.data.MediaObject: int getMediaType()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageHeight()> -> _SINK_
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> -> _SINK_
<com.android.gallery3d.ui.SlotView$Layout: int getSlotIndexByPosition(float,float)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float)> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.OrientationManager getOrientationManager()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalDisplayBounds()> -> _SINK_
<com.android.gallery3d.exif.ExifParser: int getStripIndex()> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageHeight()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getDuration()> -> _SINK_
<com.android.gallery3d.data.MediaItem: int getTargetSize(int)> -> _SINK_
<com.android.gallery3d.util.RangeArray: java.lang.Object get(int)> -> _SINK_
<com.android.gallery3d.data.SizeClustering: java.util.ArrayList getCluster(int)> -> _SINK_
<com.android.gallery3d.data.LocalImage: int getMediaType()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPreviewCropBounds()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: int getHeight()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaImage: int getHeight()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getCurrentTouchAngle()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF straightenBounds()> -> _SINK_
<com.android.gallery3d.ui.GLView: int getHeight()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getRotation()> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getItemPath(int)> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: int getTextureWidth()> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getImageRotation(int)> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: int getLevelCount()> -> _SINK_
<com.android.gallery3d.data.PathMatcher: long getLongVar(int)> -> _SINK_
<com.android.gallery3d.data.DownloadCache$TaskProxy: com.android.gallery3d.data.DownloadCache$Entry get(com.android.gallery3d.util.ThreadPool$JobContext)> -> _SINK_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(long)> -> _SINK_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.Face[] getFaces()> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: int getBucketId()> -> _SINK_
<com.android.gallery3d.app.StitchingProgressManager: java.util.ArrayList access$100(com.android.gallery3d.app.StitchingProgressManager)> -> _SINK_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleEnd()> -> _SINK_
<com.android.gallery3d.ui.AlbumSlidingWindow: com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(int)> -> _SINK_
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getDeviceName(com.android.gallery3d.data.MtpContext,int)> -> _SINK_
<com.android.gallery3d.data.MediaSet$MultiSetSyncFuture: java.lang.Integer get()> -> _SINK_
<com.android.gallery3d.ui.SlotView$Layout: android.graphics.Rect getSlotRect(int,android.graphics.Rect)> -> _SINK_
<com.android.gallery3d.common.BlobCache: byte[] lookup(long)> -> _SINK_
<com.android.gallery3d.ui.GLRootView: int getDisplayRotation()> -> _SINK_
<com.android.gallery3d.data.MediaItem: int getFullImageRotation()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> -> _SINK_
<com.android.gallery3d.data.ClusterAlbum: int getTotalMediaItemCount()> -> _SINK_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> -> _SINK_
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.IfdData getIfdData(int)> -> _SINK_
<com.android.gallery3d.common.LruCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.gallery3d.ui.MenuExecutor: java.lang.String getMimeType(int)> -> _SINK_
<com.android.gallery3d.data.ClusterAlbumSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.MediaItem: void getLatLong(double[])> -> _SINK_
<com.android.gallery3d.data.SnailItem: int getHeight()> -> _SINK_
<com.android.gallery3d.data.MediaItem: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.data.MediaObject: java.lang.String getTypeString(int)> -> _SINK_
<com.android.gallery3d.ui.EdgeAnimation: float getValue()> -> _SINK_
<com.android.gallery3d.data.CameraShortcutImage: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: java.lang.String getClusterByTypeString(android.content.Context,int)> -> _SINK_
<com.android.gallery3d.ui.SlotView: int getScrollY()> -> _SINK_
<com.android.gallery3d.ui.SlotView: int getScrollX()> -> _SINK_
<com.android.gallery3d.gadget.MediaSetSource: android.net.Uri getContentUri(int)> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: int getId()> -> _SINK_
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.net.Uri getContentUri(int)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: long getItemId(int)> -> _SINK_
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> -> _SINK_
<com.android.gallery3d.data.FilterTypeSet: int getSupportedOperations()> -> _SINK_
<com.android.gallery3d.data.MediaSource: long getTotalTargetCacheSize()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalPhotoBounds()> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageWidth()> -> _SINK_
<com.android.gallery3d.data.MediaObject: android.net.Uri getContentUri()> -> _SINK_
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(android.graphics.Bitmap,int)> -> _SINK_
<com.android.gallery3d.app.StateManager: com.android.gallery3d.app.ActivityState getTopState()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: double getLongitude(com.android.gallery3d.data.MediaObject)> -> _SINK_
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> -> _SINK_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.Path getPath()> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaPostAlbum: android.database.Cursor internalQuery(int,int)> -> _SINK_
<com.android.gallery3d.data.LocalAlbumSet: java.lang.String getName()> -> _SINK_
<com.android.gallery3d.ui.BitmapTileProvider: int getImageHeight()> -> _SINK_
<com.android.gallery3d.util.GalleryUtils: int getBucketId(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.SlotView$Layout: int getScrollLimit()> -> _SINK_
<com.android.gallery3d.data.ActionImage: int getHeight()> -> _SINK_
<com.android.gallery3d.data.MtpImage: java.lang.String getMimeType()> -> _SINK_
<com.android.gallery3d.data.MtpClient: byte[] getObject(java.lang.String,int,int)> -> _SINK_
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int)> -> _SINK_
<com.android.gallery3d.filtershow.FilterShowActivity$LoadBitmapTask: java.lang.Boolean doInBackground(android.net.Uri[])> -> _SINK_
<com.android.gallery3d.data.TimeClustering: java.util.ArrayList getCluster(int)> -> _SINK_
<com.android.gallery3d.data.LocalVideo: int getWidth()> -> _SINK_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getStoreProvider()> -> _SINK_
<com.android.gallery3d.ui.ExtTexture: int getTarget()> -> _SINK_
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityY()> -> _SINK_
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityX()> -> _SINK_
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> -> _SINK_
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.filters.ImageFilter getFilter(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.RawTexture: int getTarget()> -> _SINK_
<com.android.gallery3d.data.FilterEmptyPromptSet: int getMediaItemCount()> -> _SINK_
<com.android.gallery3d.data.Cluster: com.android.gallery3d.data.SmallItem getLastItem()> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.ThreadPool getThreadPool()> -> _SINK_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: int getCount()> -> _SINK_
<com.android.browser.BrowserSettings: int getPageCacheCapacity()> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab getTab(int)> -> _SINK_
<com.android.browser.TabControl: int getTabCount()> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getRowObject(android.database.Cursor,com.android.browser.BrowserBookmarksAdapterItem)> -> _SINK_
<com.android.browser.homepages.RequestHandler: byte[] htmlEncode(java.lang.String)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: java.lang.Object getItem(int)> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getGroup(int)> -> _SINK_
<com.android.browser.BrowserSnapshotPage$SnapshotAdapter: android.database.Cursor getItem(int)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: int getCount()> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: float getFloat(int)> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: long getItemId(android.database.Cursor)> -> _SINK_
<com.android.browser.Tab: java.lang.String getTitle()> -> _SINK_
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getTotalSizeBytes()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getJsEngineFlags()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine: java.lang.String getName()> -> _SINK_
<com.android.browser.PreloadedTabControl: com.android.browser.Tab getTab()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getHomePage()> -> _SINK_
<com.android.browser.Tab: android.graphics.Bitmap getFavicon()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getDefaultTextEncoding()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: long getItemId(int)> -> _SINK_
<com.android.browser.WebStorageSizeManager$WebKitAppCacheInfo: long getAppCacheSizeBytes()> -> _SINK_
<com.android.browser.TitleBar: com.android.browser.BaseUi getUi()> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getCount()> -> _SINK_
<com.android.browser.util.ThreadedCursorAdapter: long getItemId(int)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String[] getColumnNames()> -> _SINK_
<com.android.browser.Preloader$PreloaderSession: android.webkit.WebView getWebView()> -> _SINK_
<com.android.browser.provider.BrowserProvider2: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: float getFloat(int)> -> _SINK_
<com.android.browser.util.ThreadedCursorAdapter: android.database.Cursor getItem(int)> -> _SINK_
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: java.lang.Object[] getSelectionWithAccounts(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.browser.AutofillHandler: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> -> _SINK_
<com.android.browser.AutofillHandler$AutoFillProfileDbTask: java.lang.Object doInBackground(java.lang.Object[])> -> _SINK_
<com.android.browser.BrowserBookmarksPage: android.content.Intent createShortcutIntent(android.content.Context,android.database.Cursor)> -> _SINK_
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<com.android.browser.view.PieItem: float getAlpha()> -> _SINK_
<com.android.browser.BrowserSettings: com.android.browser.WebStorageSizeManager getWebStorageSizeManager()> -> _SINK_
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SINK_
<com.android.browser.Controller: android.graphics.Bitmap getDefaultVideoPoster()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: float getFloat(int)> -> _SINK_
<com.android.browser.SnapshotTab: android.content.ContentValues createSnapshotValues()> -> _SINK_
<com.android.browser.TitleBar: com.android.browser.UiController getUiController()> -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab getCurrentTab()> -> _SINK_
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> -> _SINK_
<com.android.browser.TabScrollView: int getChildIndex(android.view.View)> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String[] getColumnNames()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()> -> _SINK_
<com.android.browser.Controller: android.view.View getVideoLoadingProgressView()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()> -> _SINK_
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: int getCount()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getChild(int,int)> -> _SINK_
<com.android.browser.search.SearchEngineInfo: java.lang.String getSearchUriForQuery(java.lang.String)> -> _SINK_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionTitle(com.android.browser.SuggestionsAdapter$SuggestItem)> -> _SINK_
<com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl getInstance()> -> _SINK_
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: short getShort(int)> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getInt(int)> -> _SINK_
<com.android.browser.BaseUi: com.android.browser.TitleBar getTitleBar()> -> _SINK_
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionUrl(com.android.browser.SuggestionsAdapter$SuggestItem)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getCount()> -> _SINK_
<com.android.browser.homepages.Template$CursorListEntityWrapper: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getInt(int)> -> _SINK_
<com.android.browser.SnapshotTab: com.android.browser.Tab getParent()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine: java.lang.CharSequence getLabel()> -> _SINK_
<com.android.browser.PieControl$TabAdapter: int getCount()> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab getLeastUsedTab(com.android.browser.Tab)> -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> -> _SINK_
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BreadCrumbView getBreadCrumbs(int)> -> _SINK_
<com.android.browser.TabScrollView: android.view.View getSelectedTab()> -> _SINK_
<com.android.browser.DeviceAccountLogin: java.lang.String[] getAccountNames()> -> _SINK_
<com.android.browser.Tab: com.android.browser.Tab$SecurityState getSecurityState()> -> _SINK_
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<com.android.browser.BrowserSnapshotPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getPreloadAlwaysPreferenceString(android.content.Context)> -> _SINK_
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine getDefaultSearchEngine(android.content.Context)> -> _SINK_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$PluginState getPluginState()> -> _SINK_
<com.android.browser.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.view.PieItem: float getAnimationAngle()> -> _SINK_
<com.android.browser.DataUri: java.lang.String getMimeType()> -> _SINK_
<com.android.browser.search.SearchEngineInfo: java.lang.String getName()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getChildrenCount(int)> -> _SINK_
<com.android.browser.ErrorConsoleView: int getShowState()> -> _SINK_
<com.android.browser.TabControl: android.webkit.WebView getCurrentSubWindow()> -> _SINK_
<com.android.browser.Preloader: com.android.browser.Preloader getInstance()> -> _SINK_
<com.android.browser.UrlInputView: int getState()> -> _SINK_
<com.android.browser.view.PieItem: float getSweep()> -> _SINK_
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> -> _SINK_
<com.android.browser.search.SearchEngineInfo: java.lang.String getLabel()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String[] getColumnNames()> -> _SINK_
<com.android.browser.AutoFillProfileDatabase: com.android.browser.AutoFillProfileDatabase getInstance(android.content.Context)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.BrowserHistoryPage: android.view.View getTargetView(android.view.ContextMenu$ContextMenuInfo)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: double getDouble(int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getViewTypeCount()> -> _SINK_
<com.android.browser.NavScreen: com.android.browser.NavTabView getTabView(int)> -> _SINK_
<com.android.browser.TabControl: int getCurrentPosition()> -> _SINK_
<com.android.browser.XLargeUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> -> _SINK_
<com.android.browser.BaseUi: com.android.browser.Tab getActiveTab()> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String getString(int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)> -> _SINK_
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: long getGroupId(int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<com.android.browser.provider.BrowserProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.browser.PieControl$TabAdapter: com.android.browser.Tab getItem(int)> -> _SINK_
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: short getShort(int)> -> _SINK_
<com.android.browser.homepages.RequestHandler: java.lang.String getUriResourcePath()> -> _SINK_
<com.android.browser.homepages.RequestHandler$4: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> -> _SINK_
<com.android.browser.IntentHandler: com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(android.content.Intent)> -> _SINK_
<com.android.browser.XLargeUi: int getContentWidth()> -> _SINK_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedGroupId(long)> -> _SINK_
<com.android.browser.NavScreen$TabAdapter: long getItemId(int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getCount()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedChildId(long,long)> -> _SINK_
<com.android.browser.BrowserSettings: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> -> _SINK_
<com.android.browser.view.PieItem: int getOuterRadius()> -> _SINK_
<com.android.browser.Tab: android.webkit.WebView getWebView()> -> _SINK_
<com.android.browser.NavScreen$TabAdapter: int getCount()> -> _SINK_
<com.android.browser.BookmarkItem: java.lang.String getName()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getGroupId(int)> -> _SINK_
<com.android.browser.SuggestionsAdapter: int getCount()> -> _SINK_
<com.android.browser.SnapshotTab: byte[] compressBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> -> _SINK_
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: long getChildId(int,int)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureCount()> -> _SINK_
<com.android.browser.provider.SnapshotProvider: java.io.File getOldDatabasePath(android.content.Context)> -> _SINK_
<com.android.browser.BrowserSettings: int getRawTextZoom(int)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab getTabFromView(android.webkit.WebView)> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: java.lang.CharSequence getTitle(android.database.Cursor)> -> _SINK_
<com.android.browser.BookmarkUtils: android.content.Intent createAddToHomeIntent(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getChild(int,int)> -> _SINK_
<com.android.browser.DataUri: byte[] getData()> -> _SINK_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: long getItemId(int)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureByIndex(int)> -> _SINK_
<com.android.browser.BaseUi: boolean isTitleBarShowing()> -> _SINK_
<com.android.browser.BrowserSettings: int getAdjustedTextZoom(int)> -> _SINK_
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestItem getItem(int)> -> _SINK_
<com.android.browser.Controller: android.app.Activity getActivity()> -> _SINK_
<com.android.browser.BrowserSettings: com.android.browser.BrowserSettings getInstance()> -> _SINK_
<com.android.browser.homepages.Template: com.android.browser.homepages.Template getCachedTemplate(android.content.Context,int)> -> _SINK_
<com.android.browser.Controller: com.android.browser.BrowserSettings getSettings()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getGroup(int)> -> _SINK_
<com.android.browser.Controller: com.android.browser.WebViewFactory getWebViewFactory()> -> _SINK_
<com.android.browser.Controller: int getDesiredThumbnailHeight(android.content.Context)> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getFactoryResetHomeUrl(android.content.Context)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyOrigin()> -> _SINK_
<com.android.browser.NavScreen$TabAdapter: com.android.browser.Tab getItem(int)> -> _SINK_
<com.android.browser.PieControl: com.android.browser.view.PieItem makeItem(int,int)> -> _SINK_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: int getCount()> -> _SINK_
<com.android.browser.TabControl: long getNextId()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: android.content.Context getContext()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.view.PieItem: float getStartAngle()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getGroupCount()> -> _SINK_
<com.android.browser.Tab$3: android.view.View getVideoLoadingProgressView()> -> _SINK_
<com.android.browser.BreadCrumbView: com.android.browser.BreadCrumbView$Crumb getTopCrumb()> -> _SINK_
<com.android.browser.Tab: com.android.browser.ErrorConsoleView getErrorConsole(boolean)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getLoadingObject()> -> _SINK_
<com.android.browser.TitleBar: int getEmbeddedHeight()> -> _SINK_
<com.android.browser.IntentHandler$UrlData: com.android.browser.PreloadedTabControl getPreloadedTab()> -> _SINK_
<com.android.browser.IntentHandler$UrlData: java.lang.String getSearchBoxQueryToSubmit()> -> _SINK_
<com.android.browser.Tab: com.android.browser.DeviceAccountLogin getDeviceAccountLogin()> -> _SINK_
<com.android.browser.PreloadController: com.android.browser.TabControl getTabControl()> -> _SINK_
<com.android.browser.BrowserSettings: com.android.browser.search.SearchEngine getSearchEngine()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: long getChildId(int,int)> -> _SINK_
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getSearchEngineName()> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.homepages.Template$CursorListEntityWrapper: android.database.Cursor getCursor()> -> _SINK_
<com.android.browser.search.SearchEngines: java.util.List getSearchEngineInfos(android.content.Context)> -> _SINK_
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()> -> _SINK_
<com.android.browser.BookmarkUtils: android.graphics.drawable.Drawable createListFaviconBackground(android.content.Context)> -> _SINK_
<com.android.browser.Controller: com.android.browser.TabControl getTabControl()> -> _SINK_
<com.android.browser.BrowserSettings: int getUserAgent()> -> _SINK_
<com.android.browser.Tab: android.webkit.WebView getTopWindow()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: com.android.browser.BreadCrumbView getBreadCrumbView(int)> -> _SINK_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngineInfo getSearchEngineInfo(android.content.Context,java.lang.String)> -> _SINK_
<com.android.browser.BookmarkUtils: android.graphics.Bitmap createIcon(android.content.Context,android.graphics.Bitmap,android.graphics.Bitmap,com.android.browser.BookmarkUtils$BookmarkIconType)> -> _SINK_
<com.android.browser.BrowserBookmarksPage: java.lang.String getUrl(android.database.Cursor)> -> _SINK_
<com.android.browser.Tab: com.android.browser.Tab getParent()> -> _SINK_
<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: long getLong(int)> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: short getShort(int)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: int getCount()> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getOrigin()> -> _SINK_
<com.android.browser.Controller: android.content.Context getContext()> -> _SINK_
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.BrowserSnapshotPage: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<com.android.browser.NavTabScroller: com.android.browser.NavTabView getTabView(int)> -> _SINK_
<com.android.browser.TabControl: int getTabPosition(com.android.browser.Tab)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: long getLong(int)> -> _SINK_
<com.android.browser.homepages.Template: com.android.browser.homepages.Template copy()> -> _SINK_
<com.android.browser.BackgroundHandler: android.os.Looper getLooper()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.database.Cursor getCursor(int)> -> _SINK_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: java.lang.Object getItem(int)> -> _SINK_
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int,android.graphics.Bitmap)> -> _SINK_
<com.android.browser.BreadCrumbView: java.lang.Object getTopData()> -> _SINK_
<com.android.browser.BaseUi: android.webkit.WebView getWebView()> -> _SINK_
<com.android.browser.PreloadController: android.content.Context getContext()> -> _SINK_
<com.android.browser.provider.SnapshotProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> -> _SINK_
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<com.android.browser.NavTabScroller: int getGap()> -> _SINK_
<com.android.browser.view.PieItem: java.util.List getItems()> -> _SINK_
<com.android.browser.Tab: android.webkit.WebViewClassic getWebViewClassic()> -> _SINK_
<com.android.browser.search.DefaultSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> -> _SINK_
<com.android.browser.view.ScrollerView: int getMaxScrollAmount()> -> _SINK_
<com.android.browser.BaseUi: android.view.View getVideoLoadingProgressView()> -> _SINK_
<com.android.browser.BrowserSettings: int getTextZoom()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: int getChildrenCount(int)> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(android.content.Context)> -> _SINK_
<com.android.browser.util.ThreadedCursorAdapter: int getCount()> -> _SINK_
<com.android.browser.Controller: android.webkit.WebView getCurrentWebView()> -> _SINK_
<com.android.browser.provider.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.browser.search.SearchEngineInfo: java.lang.String getSuggestUriForQuery(java.lang.String)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: long getItemId(int)> -> _SINK_
<com.android.browser.Controller: android.webkit.WebView getCurrentTopWebView()> -> _SINK_
<com.android.browser.Controller: int getDesiredThumbnailWidth(android.content.Context)> -> _SINK_
<com.android.browser.BaseUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> -> _SINK_
<com.android.browser.PreloadController: android.view.View getVideoLoadingProgressView()> -> _SINK_
<com.android.browser.UrlInputView: android.widget.ListAdapter getAdapter()> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab getTabFromAppId(java.lang.String)> -> _SINK_
<com.android.browser.Controller: int getMaxTabs()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])> -> _SINK_
<com.android.browser.Tab: java.lang.String getUrl()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getPreloadOnWifiOnlyPreferenceString(android.content.Context)> -> _SINK_
<com.android.browser.TabControl: android.webkit.WebView getCurrentTopWebView()> -> _SINK_
<com.android.browser.BrowserSettings: float getInvertedContrast()> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: long getItemId(int)> -> _SINK_
<com.android.browser.SuggestionsAdapter$CombinedCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> -> _SINK_
<com.android.browser.Tab: com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt()> -> _SINK_
<com.android.browser.Tab: android.view.View getSubViewContainer()> -> _SINK_
<com.android.browser.ComboViewActivity$TabsAdapter: int getCount()> -> _SINK_
<com.android.browser.SuggestionsAdapter: long getItemId(int)> -> _SINK_
<com.android.browser.PieControl$TabAdapter: long getItemId(int)> -> _SINK_
<com.android.browser.SnapshotTab: android.graphics.Bitmap getScreenshot()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.Controller: android.content.Intent createBookmarkCurrentPageIntent(boolean)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getInt(int)> -> _SINK_
<com.android.browser.Tab$3: android.graphics.Bitmap getDefaultVideoPoster()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getChildId(int,int)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyTitle()> -> _SINK_
<com.android.browser.BrowserSettings: long getLastRecovered()> -> _SINK_
<com.android.browser.view.ScrollerView: float getTopFadingEdgeStrength()> -> _SINK_
<com.android.browser.SuggestionsAdapter: android.widget.Filter getFilter()> -> _SINK_
<com.android.browser.util.ThreadedCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.Controller: com.android.browser.UI getUi()> -> _SINK_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> -> _SINK_
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)> -> _SINK_
<com.android.browser.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> -> _SINK_
<com.android.browser.PreloadController: android.app.Activity getActivity()> -> _SINK_
<com.android.browser.view.PieItem: android.view.View getView()> -> _SINK_
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()> -> _SINK_
<com.android.browser.ComboViewActivity$TabsAdapter: android.app.Fragment getItem(int)> -> _SINK_
<com.android.browser.WebStorageSizeManager: long getAppCacheMaxSize()> -> _SINK_
<com.android.browser.TabScrollView$TabLayout: int getChildDrawingOrder(int,int)> -> _SINK_
<com.android.browser.Controller: android.graphics.Bitmap createScreenshot(android.webkit.WebView,int,int)> -> _SINK_
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()> -> _SINK_
<com.android.browser.AutoFillProfileDatabase: android.database.Cursor getProfile(int)> -> _SINK_
<com.android.browser.SnapshotTab: long getDateCreated()> -> _SINK_
<com.android.browser.TitleBar: com.android.browser.PageProgressView getProgressView()> -> _SINK_
<com.android.browser.view.ScrollerView: float getBottomFadingEdgeStrength()> -> _SINK_
<com.android.browser.addbookmark.FolderSpinnerAdapter: long getItemId(int)> -> _SINK_
<com.android.browser.NavTabScroller: int getScrollValue()> -> _SINK_
<com.android.browser.provider.BrowserProvider: java.lang.String getClientId(android.content.ContentResolver)> -> _SINK_
<com.android.browser.TitleBar: com.android.browser.NavigationBarBase getNavigationBar()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.TabControl: com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener()> -> _SINK_
<com.android.browser.TitleBar: android.webkit.WebView getCurrentWebView()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: long getLong(int)> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: double getDouble(int)> -> _SINK_
<com.android.browser.DeviceAccountLogin: int getState()> -> _SINK_
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getFreeSpaceSizeBytes()> -> _SINK_
<com.android.browser.provider.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<com.android.browser.Preloader: com.android.browser.PreloadedTabControl getPreloadedTab(java.lang.String)> -> _SINK_
<com.android.browser.search.DefaultSearchEngine: java.lang.CharSequence getLabel()> -> _SINK_
<com.android.browser.Tab: android.view.View getViewContainer()> -> _SINK_
<com.android.browser.Controller: android.os.Bundle createSaveState()> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab getCurrentTab()> -> _SINK_
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> -> _SINK_
<com.android.browser.provider.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine get(android.content.Context,java.lang.String)> -> _SINK_
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.browser.SuggestionsAdapter$CursorSource: int getCount()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.Preloader$PreloaderSession: com.android.browser.PreloadedTabControl getTabControl()> -> _SINK_
<com.android.browser.BaseUi: android.app.Activity getActivity()> -> _SINK_
<com.android.browser.Tab: long getId()> -> _SINK_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchAlwaysPreferenceString(android.content.Context)> -> _SINK_
<com.android.browser.BrowserSettings: int getAdjustedDoubleTapZoom(int)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: android.graphics.Bitmap getIcon()> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: java.lang.Object getItem(int)> -> _SINK_
<com.android.browser.Tab: int getLoadProgress()> -> _SINK_
<com.android.browser.Tab: java.lang.String getOriginalUrl()> -> _SINK_
<com.android.browser.PieControl$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.BaseUi: android.graphics.Bitmap getDefaultVideoPoster()> -> _SINK_
<com.android.browser.Tab: android.graphics.Bitmap getScreenshot()> -> _SINK_
<com.android.browser.TabScrollView: int getScroll()> -> _SINK_
<com.android.browser.view.PieItem: int getInnerRadius()> -> _SINK_
<com.android.browser.view.PieItem: com.android.browser.view.PieMenu$PieView getPieView()> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: java.lang.Object getRowObject(android.database.Cursor,java.lang.Object)> -> _SINK_
<com.android.browser.search.DefaultSearchEngine: java.lang.String getName()> -> _SINK_
<com.android.browser.PreloadController: android.graphics.Bitmap getDefaultVideoPoster()> -> _SINK_
<com.android.browser.homepages.Template$HashMapEntityData: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> -> _SINK_
<com.android.browser.view.PieItem: float getStart()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: double getDouble(int)> -> _SINK_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: int getGroupCount()> -> _SINK_
<com.android.browser.BrowserSettings: int getAdjustedMinimumFontSize(int)> -> _SINK_
<com.android.browser.SnapshotTab: long getId()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getCount()> -> _SINK_
<com.android.browser.SuggestionsAdapter$SuggestionResults: int getLineCount()> -> _SINK_
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> -> _SINK_
<com.android.browser.BrowserWebView: int getTitleHeight()> -> _SINK_
<com.android.browser.addbookmark.FolderSpinnerAdapter: int getCount()> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String getString(int)> -> _SINK_
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()> -> _SINK_
<com.android.browser.TabControl: android.webkit.WebView getCurrentWebView()> -> _SINK_
<com.android.browser.SuggestionsAdapter$SuggestCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> -> _SINK_
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> -> _SINK_
<com.android.browser.addbookmark.FolderSpinnerAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.browser.Controller: java.util.List getTabs()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BrowserBookmarksAdapter getChildAdapter(int)> -> _SINK_
<com.android.browser.Tab: android.webkit.WebView getSubWebView()> -> _SINK_
<com.android.browser.Tab: android.net.http.SslError getSslCertificateError()> -> _SINK_
<com.android.browser.DateSortedExpandableListAdapter: int getGroupCount()> -> _SINK_
<com.android.browser.NavScreen$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: long getLong(int)> -> _SINK_
<com.android.browser.BreadCrumbView: int getBaseline()> -> _SINK_
<com.android.browser.BrowserSettings: int getDoubleTapZoom()> -> _SINK_
<com.android.browser.BrowserSettings: int getMinimumFontSize()> -> _SINK_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.browser.BookmarkItem: java.lang.String getUrl()> -> _SINK_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String getString(int)> -> _SINK_
<com.android.browser.PreloadController: com.android.browser.WebViewFactory getWebViewFactory()> -> _SINK_
<com.android.browser.view.PieItem: int getLevel()> -> _SINK_
<com.android.browser.homepages.HomeProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getLoadingView()> -> _SINK_
<com.android.browser.TabControl: java.util.List getTabs()> -> _SINK_
<com.android.browser.BrowserActivity: com.android.browser.Controller getController()> -> _SINK_
<com.android.browser.Tab: java.lang.String getAppId()> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)> -> _SINK_
<com.android.nfc.NfcService$TagService: int getTimeout(int)> -> _SINK_
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.nfc.NfcService: byte[] doTransceiveNoLock(int,byte[])> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] transceive(byte[],boolean,int[])> -> _SINK_
<android.nfc.NdefRecord: int getByteLength()> -> _SINK_
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverSelectMessage(boolean)> -> _SINK_
<android.nfc.INdefPushCallback$Stub$Proxy: android.net.Uri[] getUris()> -> _SINK_
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)> -> _SINK_
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)> -> _SINK_
<com.android.nfc.P2pLinkManager: java.lang.String getMessageType(android.nfc.NdefMessage)> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverRequestMessage()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] getGeneralBytes()> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)> -> _SINK_
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.Tag: java.lang.String[] getTechList()> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: int getState()> -> _SINK_
<android.nfc.Tag: byte[] getId()> -> _SINK_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)> -> _SINK_
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)> -> _SINK_
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)> -> _SINK_
<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)> -> _SINK_
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: int getTimeout(int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: int getState()> -> _SINK_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)> -> _SINK_
<com.android.nfc.snep.SnepMessage: byte getVersion()> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)> -> _SINK_
<android.nfc.NdefRecord: byte[] getPayload()> -> _SINK_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> -> _SINK_
<android.nfc.tech.NfcBarcode: byte[] getBarcode()> -> _SINK_
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)> -> _SINK_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()> -> _SINK_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getSap()> -> _SINK_
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getHandle()> -> _SINK_
<android.nfc.NfcAdapter: android.content.Context getContext()> -> _SINK_
<android.nfc.tech.MifareClassic: int getSize()> -> _SINK_
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)> -> _SINK_
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()> -> _SINK_
<com.android.nfc.NfcDispatcher: android.content.Intent getAppSearchIntent(java.lang.String)> -> _SINK_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcTag getNfcTagInterface()> -> _SINK_
<android.nfc.tech.NfcV: byte getDsfId()> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] transceive(byte[])> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] receive()> -> _SINK_
<android.nfc.tech.MifareClassic: int getBlockCount()> -> _SINK_
<android.nfc.tech.Ndef: android.nfc.Tag getTag()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(int,java.lang.String)> -> _SINK_
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)> -> _SINK_
<android.nfc.tech.NfcV: byte getResponseFlags()> -> _SINK_
<android.nfc.tech.NfcV: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.NfcF: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.NfcA: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.NfcB: byte[] transceive(byte[])> -> _SINK_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()> -> _SINK_
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)> -> _SINK_
<android.nfc.NfcAdapter: int getSdkVersion()> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getGetRequest(int,android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.NfcA: int getTimeout()> -> _SINK_
<com.android.nfc.handover.HandoverTransfer: int getTransferId()> -> _SINK_
<android.nfc.tech.NfcF: int getTimeout()> -> _SINK_
<com.android.nfc.RegisteredComponentCache: java.util.ArrayList getComponents()> -> _SINK_
<android.nfc.tech.NfcA: int getMaxTransceiveLength()> -> _SINK_
<android.nfc.tech.NfcF: int getMaxTransceiveLength()> -> _SINK_
<android.nfc.tech.NfcB: int getMaxTransceiveLength()> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> -> _SINK_
<android.nfc.tech.NfcV: int getMaxTransceiveLength()> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])> -> _SINK_
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)> -> _SINK_
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.NdefRecord: byte[] toByteArray()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteRw()> -> _SINK_
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> -> _SINK_
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.NfcA: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.NfcF: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.NfcV: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.Ndef: java.lang.String getType()> -> _SINK_
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()> -> _SINK_
<android.nfc.tech.NfcA: short getSak()> -> _SINK_
<android.nfc.tech.NfcA: byte[] getAtqa()> -> _SINK_
<com.android.nfc.handover.HandoverManager: byte[] addressToReverseBytes(java.lang.String)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: int[] getTechList()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: byte[][] getWipeApdus()> -> _SINK_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)> -> _SINK_
<android.nfc.NdefMessage: int getByteArrayLength()> -> _SINK_
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTagIntent()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverSelectRecord(boolean)> -> _SINK_
<android.nfc.tech.NfcF: byte[] getSystemCode()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalMiu()> -> _SINK_
<com.android.nfc.SendUi: float getDegreesForRotation(int)> -> _SINK_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> -> _SINK_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> -> _SINK_
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> -> _SINK_
<com.android.nfc.NfcService: com.android.nfc.NfcService getInstance()> -> _SINK_
<android.nfc.NfcActivityManager: android.net.Uri[] getUris()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage tryHandoverRequest(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteMiu()> -> _SINK_
<android.nfc.NdefMessage: byte[] toByteArray()> -> _SINK_
<com.android.nfc.snep.SnepMessage: byte getField()> -> _SINK_
<android.nfc.tech.NfcBarcode: int getType()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: int getHandle()> -> _SINK_
<android.nfc.Tag: android.nfc.INfcTag getTagService()> -> _SINK_
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)> -> _SINK_
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)> -> _SINK_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])> -> _SINK_
<com.android.nfc.snep.SnepMessage: android.nfc.NdefMessage getNdefMessage()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getLinkMiu()> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()> -> _SINK_
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)> -> _SINK_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getSuccessResponse(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)> -> _SINK_
<com.android.nfc.P2pLinkManager: int getMessageAarPresent(android.nfc.NdefMessage)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String dump()> -> _SINK_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findActivityState(android.app.Activity)> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()> -> _SINK_
<android.nfc.tech.MifareClassic: byte[] readBlock(int)> -> _SINK_
<android.nfc.tech.MifareClassic: int getTimeout()> -> _SINK_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> -> _SINK_
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> -> _SINK_
<com.android.nfc.P2pLinkManager: android.nfc.NdefMessage createDefaultNdef(java.lang.String)> -> _SINK_
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.nfc.tech.IsoDep: int getTimeout()> -> _SINK_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)> -> _SINK_
<com.android.nfc.LlcpPacket: byte[] getDataBuffer()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] getUid()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalSap()> -> _SINK_
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] readNdef()> -> _SINK_
<com.android.nfc.snep.SnepClient: com.android.nfc.snep.SnepMessage get(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: int getMode()> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()> -> _SINK_
<android.nfc.tech.NfcF: byte[] getManufacturer()> -> _SINK_
<com.android.nfc.SendUi: android.graphics.Bitmap createScreenshot()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverRequestRecord()> -> _SINK_
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()> -> _SINK_
<com.android.nfc.ndefpush.NdefPushProtocol: byte[] toByteArray()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createCollisionRecord()> -> _SINK_
<com.android.nfc.snep.SnepMessenger: com.android.nfc.snep.SnepMessage getMessage()> -> _SINK_
<android.nfc.tech.MifareUltralight: int getType()> -> _SINK_
<com.android.nfc.snep.SnepMessage: byte[] toByteArray()> -> _SINK_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)> -> _SINK_
<com.android.nfc.P2pLinkManager: int getMessageTnf(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()> -> _SINK_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: int getConnectedTechnology()> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: int getHandle()> -> _SINK_
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.tech.NfcB: byte[] getApplicationData()> -> _SINK_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getMessage(byte)> -> _SINK_
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTechIntent()> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.nfc.snep.SnepMessage: int getLength()> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpRwSize()> -> _SINK_
<com.android.nfc.NfcService$TagService: int getMaxTransceiveLength(int)> -> _SINK_
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)> -> _SINK_
<android.nfc.tech.MifareClassic: int getType()> -> _SINK_
<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()> -> _SINK_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(int,java.lang.String)> -> _SINK_
<android.nfc.Tag: int getServiceHandle()> -> _SINK_
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()> -> _SINK_
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: boolean getExtendedLengthApdusSupported()> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalRw()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: int getMaxTransceiveLength(int)> -> _SINK_
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)> -> _SINK_
<com.android.nfc.ndefpush.NdefPushProtocol: android.nfc.NdefMessage getImmediate()> -> _SINK_
<android.nfc.NdefRecord: byte[] getType()> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)> -> _SINK_
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.nfc.Tag: int getConnectedTechnology()> -> _SINK_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)> -> _SINK_
<android.nfc.NdefRecord: byte[] getId()> -> _SINK_
<com.android.nfc.NfcService: byte[] doTransceive(int,byte[])> -> _SINK_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: android.os.Bundle[] getTechExtras()> -> _SINK_
<com.android.nfc.snep.SnepMessage: int getAcceptableLength()> -> _SINK_
<android.nfc.tech.MifareUltralight: int getTimeout()> -> _SINK_
<android.nfc.tech.Ndef: int getMaxSize()> -> _SINK_
<android.nfc.tech.MifareUltralight: byte[] readPages(int)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String getName()> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpMiu()> -> _SINK_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getPutRequest(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)> -> _SINK_
<android.nfc.tech.MifareClassic: int getSectorCount()> -> _SINK_
<android.nfc.NfcAdapter: int getAdapterState()> -> _SINK_
<com.android.nfc.LlcpPacket: int getRemoteSap()> -> _SINK_
<android.nfc.NdefRecord: short getTnf()> -> _SINK_
<android.nfc.Tag: android.os.Bundle getTechExtras(int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> -> _SINK_
<com.android.nfc.NfcService$TagService: int[] getTechList(int)> -> _SINK_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcApplicationState findAppState(android.app.Application)> -> _SINK_
<com.android.nfc.P2pLinkManager: int getMessageSize(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()> -> _SINK_
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()> -> _SINK_
<android.view.Window: android.view.Window$Callback getCallback()> -> _SINK_
<com.android.emailcommon.utility.Utility$4: java.lang.Integer get(android.database.Cursor,int)> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandom: com.android.commands.monkey.MonkeyEvent getNextEvent()> -> _SINK_
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getAddressString()> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: short getFill()> -> _SINK_
<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()> -> _SINK_
<android.text.style.SuperscriptSpan: int getSpanTypeId()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getText()> -> _SINK_
<android.media.videoeditor.MediaProperties: int[] getSupportedAudioCodecs()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> -> _SINK_
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)> -> _SINK_
<android.provider.MediaStore$Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> -> _SINK_
<android.media.AudioTrack: int getNativeOutputSampleRate(int)> -> _SINK_
<org.apache.http.message.BasicHeader: java.lang.String getName()> -> _SINK_
<java.net.Authenticator: java.net.PasswordAuthentication getPasswordAuthentication()> -> _SINK_
<android.app.WallpaperManager: android.app.IWallpaperManager getIWallpaperManager()> -> _SINK_
<android.widget.RemoteViewsAdapter: int getViewTypeCount()> -> _SINK_
<android.webkit.WebViewClassic: int getWidth()> -> _SINK_
<java.lang.reflect.Method: java.lang.Object getDefaultValue()> -> _SINK_
<com.android.providers.telephony.MmsSmsProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()> -> _SINK_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> -> _SINK_
<android.content.res.Resources: java.lang.CharSequence getText(int)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: int getState()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLengthHeader()> -> _SINK_
<com.google.android.gms.common.internal.IGmsCallbacks$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.common.collect.ForwardingMultiset: java.lang.Object delegate()> -> _SINK_
<android.os.WorkSource: int get(int)> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewFactoryProvider$Statics getStatics()> -> _SINK_
<android.hardware.SystemSensorManager: java.util.List getFullSensorList()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: int getCursorCapsMode(int,java.util.Locale,boolean)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPhotoSize()> -> _SINK_
<com.google.android.picasasync.PicasaJsonReaderParser$BooleanObjectField: int getValue(boolean)> -> _SINK_
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: java.lang.String[] getLogStrings()> -> _SINK_
<gov.nist.core.GenericObjectList: java.lang.String debugDump()> -> _SINK_
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()> -> _SINK_
<android.content.Intent: char getCharExtra(java.lang.String,char)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()> -> _SINK_
<gov.nist.core.LexerCore: java.lang.String getBuffer()> -> _SINK_
<com.android.videoeditor.service.MovieTransition: int getBehavior()> -> _SINK_
<com.android.server.Watchdog: com.android.server.Watchdog getInstance()> -> _SINK_
<com.google.common.collect.ImmutableList: java.util.ListIterator listIterator(int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getPaddingSize(int)> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: android.content.Intent getInputLanguageSelectionIntent(java.lang.String,int)> -> _SINK_
<android.webkit.WebView$PrivateAccess: float getVerticalScrollFactor()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderFieldKey(int)> -> _SINK_
<java.net.Inet6Address: int getScopeId()> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getSigAlgParams()> -> _SINK_
<android.widget.OverScroller: int getCurrY()> -> _SINK_
<android.widget.OverScroller: int getCurrX()> -> _SINK_
<android.webkit.ViewManager: java.util.ArrayList access$300(android.webkit.ViewManager)> -> _SINK_
<android.content.ContentProvider$Transport: android.os.ICancellationSignal createCancellationSignal()> -> _SINK_
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()> -> _SINK_
<com.android.internal.app.ActionBarImpl: android.content.Context getThemedContext()> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getRunLimit()> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.CookieManager getCookieManager()> -> _SINK_
<com.android.camera.Util: int getJpegRotation(int,int)> -> _SINK_
<com.adobe.xmp.XMPMetaFactory$1: java.lang.String getMessage()> -> _SINK_
<android.hardware.ISerialManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.sax.BadXmlException: java.lang.String getMessage()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: long getOriginalLocalSequenceNumber()> -> _SINK_
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _SINK_
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: int getPromptPosition()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTF8String: java.lang.String getString()> -> _SINK_
<android.widget.PopupWindow: int getSoftInputMode()> -> _SINK_
<android.mtp.MtpDevice: byte[] getThumbnail(int)> -> _SINK_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> -> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()> -> _SINK_
<android.os.storage.IMountShutdownObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getAllowContentAccess()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemObject: byte[] getContent()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getMessageChannel()> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.Dialog getNewDialog(javax.sip.Transaction)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getHeaderNames()> -> _SINK_
<java.util.jar.Attributes$Name: java.lang.String getName()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.os.Bundle: int getInt(java.lang.String,int)> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.String getSignature(java.lang.Class)> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()> -> _SINK_
<java.nio.HeapByteBuffer: long getLong(int)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAtStatic(int)> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()> -> _SINK_
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()> -> _SINK_
<java.nio.MappedByteBufferAdapter: byte[] protectedArray()> -> _SINK_
<android.webkit.ZoomManager: float getMaxZoomScale()> -> _SINK_
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -> _SINK_
<android.widget.GridLayout: int getRowCount()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: android.graphics.drawable.Drawable getIconDrawable(int)> -> _SINK_
<com.android.videoeditor.util.MediaItemUtils: long getMinimumImageItemDuration()> -> _SINK_
<libcore.io.ForwardingOs: int geteuid()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getSmallerMapStorage(java.util.SortedMap)> -> _SINK_
<com.google.android.picasasync.PicasaSyncManager: com.google.android.picasasync.PicasaSyncManager get(android.content.Context)> -> _SINK_
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> -> _SINK_
<android.mtp.MtpStorageInfo: long getFreeSpace()> -> _SINK_
<com.android.emailcommon.mail.Multipart: int getCount()> -> _SINK_
<com.google.common.collect.Multisets$ImmutableEntry: java.lang.Object getElement()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: long getExpirationTime()> -> _SINK_
<android.media.audiofx.Equalizer: short getBand(int)> -> _SINK_
<java.util.WeakHashMap$Entry: java.lang.Object getKey()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: char getShortcut()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)> -> _SINK_
<org.apache.harmony.security.x509.OtherName: byte[] access$200(org.apache.harmony.security.x509.OtherName)> -> _SINK_
<com.android.internal.widget.ActionBarView: int getDropdownSelectedPosition()> -> _SINK_
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()> -> _SINK_
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getBegin()> -> _SINK_
<android.content.ClipDescription: java.lang.String getMimeType(int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: short getShort(int)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: int getNameResId()> -> _SINK_
<com.google.common.collect.ImmutableMap: java.util.Collection values()> -> _SINK_
<android.filterfw.core.FilterPort: java.lang.String getName()> -> _SINK_
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)> -> _SINK_
<android.view.View: int getScrollBarSize()> -> _SINK_
<com.google.common.collect.TransformedImmutableList: java.lang.Object get(int)> -> _SINK_
<java.util.Collections$SingletonList: java.lang.Object get(int)> -> _SINK_
<android.graphics.Bitmap: int getByteCount()> -> _SINK_
<java.net.URI: java.lang.String getRawUserInfo()> -> _SINK_
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentActivityName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String,boolean)> -> _SINK_
<java.util.zip.ZipEntry: long getCompressedSize()> -> _SINK_
<android.widget.TextView: int getTopPaddingOffset()> -> _SINK_
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$Settings getProperties()> -> _SINK_
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<com.android.phone.sip.SipEditor$PreferenceKey: java.lang.String getValue()> -> _SINK_
<com.android.deskclock.AlarmPreference: android.net.Uri getAlert()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getOwner()> -> _SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent: java.lang.String getActionName()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite$1: android.graphics.PointF getPosition(com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation)> -> _SINK_
<android.view.animation.Animation: int getZAdjustment()> -> _SINK_
<android.app.WallpaperManager: android.graphics.Bitmap getBitmap()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getMAddr()> -> _SINK_
<android.filterfw.core.Filter: int getStatus()> -> _SINK_
<android.hardware.usb.UsbDevice: int getDeviceClass()> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getSamples()> -> _SINK_
<android.webkit.WebBackForwardListClassic: int getSize()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.Principal getSubjectDN()> -> _SINK_
<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()> -> _SINK_
<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)> -> _SINK_
<android.widget.AbsListView: int findClosestMotionRow(int)> -> _SINK_
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)> -> _SINK_
<java.util.TimerTask: long scheduledExecutionTime()> -> _SINK_
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: int getType()> -> _SINK_
<android.accounts.AuthenticatorDescription: java.lang.String toString()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> -> _SINK_
<java.nio.MappedByteBufferAdapter: double getDouble()> -> _SINK_
<android.view.VelocityTracker: float getXVelocity(int)> -> _SINK_
<javax.xml.validation.Validator: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<com.android.emailcommon.utility.Utility$3: java.lang.Long get(android.database.Cursor,int)> -> _SINK_
<android.view.View: float getTopFadingEdgeStrength()> -> _SINK_
<android.net.Proxy: org.apache.http.conn.routing.HttpRoutePlanner getAndroidProxySelectorRoutePlanner(android.content.Context)> -> _SINK_
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()> -> _SINK_
<android.app.LoaderManagerImpl: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getViaHost()> -> _SINK_
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SINK_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()> -> _SINK_
<com.android.email.mail.store.imap.ImapString$1: java.io.InputStream getAsStream()> -> _SINK_
<com.android.mms.ui.MessageItem: java.lang.CharSequence getCachedFormattedMessage()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: int getBasicConstraints()> -> _SINK_
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()> -> _SINK_
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.RemoteViewsAdapter: int getCount()> -> _SINK_
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SINK_
<android.renderscript.Program: android.renderscript.Program$TextureType getTextureType(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)> -> _SINK_
<android.media.Metadata: java.lang.String getString(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1TypeCollection: void getValues(java.lang.Object,java.lang.Object[])> -> _SINK_
<android.content.ContentProviderOperation: int getType()> -> _SINK_
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandom: int getKeyCode(java.lang.String)> -> _SINK_
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()> -> _SINK_
<android.content.IClipboard$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.core.NameValue: java.lang.String getName()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader)> -> _SINK_
<org.apache.http.conn.scheme.Scheme: java.lang.String getName()> -> _SINK_
<com.android.launcher2.DragLayer$LayoutParams: int getHeight()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: java.lang.String getMacAlgorithm()> -> _SINK_
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Sprite: int getHeight()> -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<libcore.icu.CollationElementIteratorICU: libcore.icu.CollationElementIteratorICU getInstance(int,java.lang.String)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> -> _SINK_
<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()> -> _SINK_
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()> -> _SINK_
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()> -> _SINK_
<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)> -> _SINK_
<android.widget.ActivityChooserModel: android.content.Intent getIntent()> -> _SINK_
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getDispositionType()> -> _SINK_
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources)> -> _SINK_
<com.android.server.am.AppErrorResult: int get()> -> _SINK_
<android.hardware.input.IInputDevicesChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.webkit.WebSettings: java.lang.String getUserAgentString()> -> _SINK_
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer getContent(long,int)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: android.view.View getTabContainer()> -> _SINK_
<android.widget.TextView: int getGravity()> -> _SINK_
<com.android.videoeditor.util.StringUtils: java.lang.String getSimpleTimestampAsString(android.content.Context,long)> -> _SINK_
<com.googlecode.mp4parser.AbstractFullBox: int getFlags()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)> -> _SINK_
<org.apache.http.message.BasicHeaderElement: java.lang.String getName()> -> _SINK_
<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)> -> _SINK_
<java.security.Provider: double getVersion()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)> -> _SINK_
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()> -> _SINK_
<com.android.mms.transaction.DefaultRetryScheme: long getWaitingInterval()> -> _SINK_
<org.apache.harmony.security.x509.GeneralNames: java.util.Collection getPairsList()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> -> _SINK_
<com.google.common.collect.Multimaps$UnmodifiableListMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<android.webkit.WebViewClassic: android.content.Context getContext()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> -> _SINK_
<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)> -> _SINK_
<android.os.MemoryFile: int getSize(java.io.FileDescriptor)> -> _SINK_
<gov.nist.core.ThreadAuditor: long getPingIntervalInMillisecs()> -> _SINK_
<android.media.AudioRecord: int getRecordingState()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: int getHeight()> -> _SINK_
<android.gesture.GestureLibrary: int getOrientationStyle()> -> _SINK_
<android.filterfw.core.VertexFrame: int getVboId()> -> _SINK_
<com.android.camera.PhotoModule$ImageNamer: java.lang.String getTitle()> -> _SINK_
<android.media.videoeditor.MediaImageItem: java.lang.String getGeneratedImageClip()> -> _SINK_
<libcore.net.http.HttpEngine: libcore.net.http.HttpConnection getConnection()> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: android.widget.ListView getListView()> -> _SINK_
<java.util.zip.ZipEntry: java.lang.String getName()> -> _SINK_
<org.apache.harmony.security.x509.Certificate: byte[] access$300(org.apache.harmony.security.x509.Certificate)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()> -> _SINK_
<com.android.inputmethod.latin.SubtypeSwitcher: java.util.Locale getCurrentSubtypeLocale()> -> _SINK_
<java.security.Signature: java.security.AlgorithmParameters getParameters()> -> _SINK_
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] getArcs()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryEndTime()> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getEndTransition()> -> _SINK_
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()> -> _SINK_
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.SIPServerTransaction getCanceledInviteTransaction()> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.RectF getShownFrameLw()> -> _SINK_
<android.widget.ListPopupWindow: android.widget.ListView getListView()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,boolean)> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> -> _SINK_
<com.android.videoeditor.TransitionsAdapter: com.android.videoeditor.TransitionType[] getTransitions()> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()> -> _SINK_
<android.webkit.WebHistoryItem: int getId()> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableBreakIteratorLocales()> -> _SINK_
<android.widget.AdapterView: int getSelectedItemPosition()> -> _SINK_
<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getNumberFormat(int)> -> _SINK_
<com.google.common.collect.ImmutableEntry: java.lang.Object getValue()> -> _SINK_
<libcore.util.ZoneInfo: int getOffset(int,int,int,int,int,int)> -> _SINK_
<com.android.ex.chips.RecipientEntry: byte[] getPhotoBytes()> -> _SINK_
<android.graphics.drawable.ShapeDrawable$ShapeState: int getChangingConfigurations()> -> _SINK_
<java.lang.reflect.Method: java.lang.String getName()> -> _SINK_
<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)> -> _SINK_
<android.view.FocusFinder: android.view.View findNextFocusInAbsoluteDirection(java.util.ArrayList,android.view.ViewGroup,android.view.View,android.graphics.Rect,int)> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: long getUserId(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getRunningAppProcesses()> -> _SINK_
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList()> -> _SINK_
<com.android.deskclock.Utils: long getTimeNow()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> -> _SINK_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> -> _SINK_
<com.android.email.mail.store.ExchangeStore: java.lang.Class getSettingActivityClass()> -> _SINK_
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.text.CharacterIterator)> -> _SINK_
<android.hardware.input.IInputDevicesChangedListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.common.base.Joiner$3: java.lang.Object get(int)> -> _SINK_
<android.filterfw.core.FilterPort: android.filterfw.core.Filter getFilter()> -> _SINK_
<android.webkit.WebView: int getContentHeight()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int,int)> -> _SINK_
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: java.lang.String toString()> -> _SINK_
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: com.android.inputmethod.compat.InputMethodManagerCompatWrapper getInstance()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()> -> _SINK_
<com.android.launcher2.LauncherApplication: int getLongPressTimeout()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: int getMetadataCount()> -> _SINK_
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()> -> _SINK_
<org.apache.james.mime4j.field.Field: java.lang.String toString()> -> _SINK_
<com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)> -> _SINK_
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserParam()> -> _SINK_
<gov.nist.javax.sip.header.AllowEvents: java.lang.String getEventType()> -> _SINK_
<com.android.server.AppWidgetService: java.util.List getInstalledProviders(int)> -> _SINK_
<com.android.mms.dom.ElementImpl: java.lang.String getTagName()> -> _SINK_
<android.filterfw.core.SerializedFrame: float[] getFloats()> -> _SINK_
<android.webkit.WebViewDatabaseClassic: java.util.ArrayList getFormData(java.lang.String,java.lang.String)> -> _SINK_
<com.android.ex.chips.Queries$Query: java.lang.String[] getProjection()> -> _SINK_
<org.apache.harmony.security.x509.Validity: byte[] getEncoded()> -> _SINK_
<java.io.ObjectStreamClass: byte getFlags()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: long getExpirationTime()> -> _SINK_
<android.filterfw.core.NativeFrame: float[] getFloats()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: int getRestoreData(android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.mms.dom.events.EventImpl: java.lang.String getType()> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()> -> _SINK_
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()> -> _SINK_
<com.android.videoeditor.OverlaysAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: int getMappedViewType(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.BEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.view.View: android.view.Display getDisplay()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String debugDump()> -> _SINK_
<gov.nist.javax.sip.address.Authority: int getPort()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<java.util.EnumMap$EnumMapKeySet$1: java.lang.Enum get(java.util.MapEntry)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.Overlay getOverlay(java.lang.String)> -> _SINK_
<android.animation.Animator: android.animation.Animator clone()> -> _SINK_
<com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()> -> _SINK_
<com.android.mms.ui.UriImage: java.lang.String getSrc()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleToChunkBox getSampleToChunkBox()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: com.google.android.apps.lightcycle.camera.CameraPreview getCameraPreview()> -> _SINK_
<android.webkit.CookieManagerClassic: android.webkit.CookieManagerClassic getInstance()> -> _SINK_
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SINK_
<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()> -> _SINK_
<java.lang.Thread: java.lang.String getName()> -> _SINK_
<java.security.Provider: java.util.Set entrySet()> -> _SINK_
<android.widget.AbsListView$RecycleBin: android.view.View getActiveView(int)> -> _SINK_
<android.view.View: int getSystemUiVisibility()> -> _SINK_
<android.text.BoringLayout: int getTopPadding()> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatSymbolsLocales()> -> _SINK_
<java.util.zip.Inflater: int getRemaining()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()> -> _SINK_
<com.android.videoeditor.util.FileUtils: java.lang.String getMaskFilename(android.content.Context,int)> -> _SINK_
<android.preference.PreferenceActivity: java.util.ArrayList access$100(android.preference.PreferenceActivity)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.content.pm.IPackageInstallObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: int getOrder()> -> _SINK_
<android.view.Display: int getLayerStack()> -> _SINK_
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: int getMaxScrollAmount()> -> _SINK_
<android.media.videoeditor.TransitionAlpha: int getRGBFileHeight()> -> _SINK_
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])> -> _SINK_
<com.android.phone.PhoneGlobals: com.android.phone.Ringer getRinger()> -> _SINK_
<android.widget.Toast: float getVerticalMargin()> -> _SINK_
<android.widget.ActivityChooserModel: int getHistorySize()> -> _SINK_
<com.android.launcher2.Folder: int getItemCount()> -> _SINK_
<com.google.common.collect.TransformedImmutableList$1: java.lang.Object get(int)> -> _SINK_
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager getInstance()> -> _SINK_
<android.media.AudioRecord: int getPositionNotificationPeriod()> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: java.lang.String getName()> -> _SINK_
<com.android.phone.PhoneUtils: android.graphics.drawable.Drawable getProviderIcon(android.content.Context,android.content.Intent)> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int,int)> -> _SINK_
<android.mtp.MtpStorageInfo: java.lang.String getDescription()> -> _SINK_
<java.lang.System$SystemEnvironment: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)> -> _SINK_
<com.android.mms.dom.NodeListImpl: int getLength()> -> _SINK_
<android.view.PointerIcon: android.view.PointerIcon getNullIcon()> -> _SINK_
<com.google.android.picasasync.PicasaApi: int getAlbumPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> -> _SINK_
<java.net.Socket: java.net.InetAddress getInetAddress()> -> _SINK_
<android.test.IsolatedContext: android.content.ContentResolver getContentResolver()> -> _SINK_
<android.view.Window: int getLocalFeatures()> -> _SINK_
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<android.widget.TextView: int getTotalPaddingLeft()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()> -> _SINK_
<android.preference.TwoStatePreference: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<android.preference.DialogPreference: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<javax.obex.ServerOperation: javax.obex.HeaderSet getReceivedHeader()> -> _SINK_
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getExitFadeDuration()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.LauncherModel getModel()> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog show()> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: int getPort()> -> _SINK_
<com.android.launcher2.Workspace: com.android.launcher2.Folder getFolderForTag(java.lang.Object)> -> _SINK_
<android.widget.AdapterViewAnimator: int getDisplayedChild()> -> _SINK_
<android.widget.LinearLayout: int getShowDividers()> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])> -> _SINK_
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object)> -> _SINK_
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> -> _SINK_
<com.android.email.activity.DeleteMessageConfirmationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()> -> _SINK_
<android.content.pm.IPackageDataObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.net.JarURLConnection: java.security.cert.Certificate[] getCertificates()> -> _SINK_
<java.text.DecimalFormatSymbols: java.lang.String getNaN()> -> _SINK_
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentPackageName()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.ReplyTo: gov.nist.core.HostPort getHostPort()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)> -> _SINK_
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILMediaElement createMediaElement(java.lang.String,org.w3c.dom.smil.SMILDocument,java.lang.String)> -> _SINK_
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: int getViaPort()> -> _SINK_
<android.app.ActivityManager: int getLauncherLargeIconSize()> -> _SINK_
<org.apache.http.message.ParserCursor: int getUpperBound()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.CellLayout getCellLayout(long,int)> -> _SINK_
<android.content.pm.IPackageInstallObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getHttpParamsLine1Key()> -> _SINK_
<com.android.phone.AnimationUtils$CrossFadeDrawable: android.animation.ObjectAnimator getAnimator()> -> _SINK_
<com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()> -> _SINK_
<com.android.server.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getY(int)> -> _SINK_
<android.os.Environment: java.io.File getLegacyExternalStorageObbDirectory()> -> _SINK_
<android.appwidget.AppWidgetHostView: android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)> -> _SINK_
<android.graphics.drawable.BitmapDrawable$BitmapState: int getChangingConfigurations()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieOverlay getOverlay(java.lang.String,java.lang.String)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)> -> _SINK_
<android.text.StaticLayout: int getLineStart(int)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)> -> _SINK_
<java.text.CollationKey: java.lang.String getSourceString()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.DTDHandler getDTDHandler()> -> _SINK_
<gov.nist.javax.sip.header.Server: java.util.ListIterator getProduct()> -> _SINK_
<java.nio.CharToByteBufferAdapter: char get(int)> -> _SINK_
<gov.nist.javax.sip.header.ErrorInfo: java.lang.String getErrorMessage()> -> _SINK_
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()> -> _SINK_
<android.filterfw.core.GLFrame: java.lang.Object getObjectValue()> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getUnreadMessageCount()> -> _SINK_
<android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()> -> _SINK_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox: java.util.List getEntries()> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String getDebugString()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<dalvik.system.profiler.HprofData$StackTrace: int getThreadId()> -> _SINK_
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)> -> _SINK_
<android.text.StaticLayout: int getEllipsizedWidth()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.StatusLine getStatusLine()> -> _SINK_
<java.util.logging.Level: java.lang.String getName()> -> _SINK_
<android.media.AudioTrack: int getChannelConfiguration()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean getMainCountryForCode()> -> _SINK_
<android.hardware.input.InputManager: android.os.Vibrator getInputDeviceVibrator(int)> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: int getDefaultPort(java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.KeyUsage getKeyUsageValue()> -> _SINK_
<android.content.ISyncStatusObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getKeyUsage()> -> _SINK_
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<java.nio.SocketChannelImpl: java.io.FileDescriptor getFD()> -> _SINK_
<android.media.videoeditor.MediaProperties: int getSupportedAudioTrackCount()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()> -> _SINK_
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: char getNumericShortcut()> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedCollection: com.google.common.collect.AbstractMultimap$WrappedCollection getAncestor()> -> _SINK_
<org.apache.harmony.security.x509.GeneralNames$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> -> _SINK_
<android.content.Entity: android.content.ContentValues getEntityValues()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1ValueCollection: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()> -> _SINK_
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)> -> _SINK_
<android.widget.TextView: android.text.InputFilter[] getFilters()> -> _SINK_
<com.android.inputmethod.latin.Utils$RingCharBuffer: java.lang.String getLastWord(int)> -> _SINK_
<android.widget.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()> -> _SINK_
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)> -> _SINK_
<android.widget.PopupWindow: int getHeight()> -> _SINK_
<android.widget.CompoundButton: int[] onCreateDrawableState(int)> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: byte[] getBuffer()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: java.util.Date getRevocationDate()> -> _SINK_
<com.android.wallpaper.fall.ScriptField_Constants: android.renderscript.Element createElement(android.renderscript.RenderScript)> -> _SINK_
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> -> _SINK_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)> -> _SINK_
<libcore.net.http.RawHeaders: int getResponseCode()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> -> _SINK_
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()> -> _SINK_
<java.net.Socks4Message: int getPort()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()> -> _SINK_
<android.view.MotionEvent: int getActionIndex()> -> _SINK_
<android.widget.SimpleAdapter: android.widget.SimpleAdapter$ViewBinder getViewBinder()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getPeerAddress()> -> _SINK_
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()> -> _SINK_
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> -> _SINK_
<com.android.providers.media.MediaProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<org.apache.harmony.security.fortress.Services: java.security.Provider[] getProviders()> -> _SINK_
<com.android.videoeditor.ProjectPickerAdapter: int getCount()> -> _SINK_
<android.media.AudioRecord: int getState()> -> _SINK_
<android.widget.ArrayAdapter: android.widget.Filter getFilter()> -> _SINK_
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()> -> _SINK_
<com.android.launcher2.DeleteDropTarget$5: float getInterpolation(float)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()> -> _SINK_
<com.android.launcher2.DeleteDropTarget$3: float getInterpolation(float)> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: java.lang.String getSystemId()> -> _SINK_
<android.webkit.WebResourceResponse: java.io.InputStream getData()> -> _SINK_
<android.webkit.ZoomManager: float getDefaultMinZoomScale()> -> _SINK_
<android.view.GLES20Canvas: int getWidth()> -> _SINK_
<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)> -> _SINK_
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.media.AudioManager getAudioManager()> -> _SINK_
<com.android.email.activity.MailboxListFragment: long getAccountId()> -> _SINK_
<android.os.UserHandle: int getIdentifier()> -> _SINK_
<android.view.GLES20TextureLayer: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)> -> _SINK_
<android.text.method.TimeKeyListener: char[] getAcceptedChars()> -> _SINK_
<java.util.TimeZone: java.lang.Object clone()> -> _SINK_
<gov.nist.core.GenericObject: java.lang.String debugDump()> -> _SINK_
<android.view.View: int getAccessibilityWindowId()> -> _SINK_
<java.net.DatagramPacket: int getOffset()> -> _SINK_
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()> -> _SINK_
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.security.PublicKey getPublicKey()> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderField(int)> -> _SINK_
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()> -> _SINK_
<com.android.launcher2.LauncherViewPropertyAnimator: java.util.ArrayList getListeners()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.Insets getLayoutInsets()> -> _SINK_
<org.xml.sax.SAXParseException: java.lang.String getSystemId()> -> _SINK_
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getParentSelector()> -> _SINK_
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.content.Context: java.lang.String getString(int)> -> _SINK_
<android.content.IntentSender: java.lang.String getTargetPackage()> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.security.x509.DistributionPoint$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: byte[] access$202(org.apache.harmony.security.x509.GeneralName,byte[])> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()> -> _SINK_
<com.android.wallpaper.galaxy.ScriptField_VpConsts: android.renderscript.Element createElement(android.renderscript.RenderScript)> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: java.lang.String getLanguage()> -> _SINK_
<com.google.common.collect.SingletonImmutableMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.InputPointers: int getPointerSize()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: long getPlayheadPos()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: float getQValue()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List getHeadersAsEncodedStrings()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getVoiceMessageCount()> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int get()> -> _SINK_
<android.webkit.ZoomManager: float getDefaultMaxZoomScale()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getViewTypeCount()> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: byte[] getEncoded()> -> _SINK_
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> -> _SINK_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()> -> _SINK_
<android.content.pm.VerificationParams: android.net.Uri getReferrer()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()> -> _SINK_
<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()> -> _SINK_
<com.android.phone.ManageConferenceUtils: int getNumCallersInConference()> -> _SINK_
<javax.net.SocketFactory: java.net.Socket createSocket()> -> _SINK_
<android.webkit.HTML5VideoInline: int getTextureName()> -> _SINK_
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()> -> _SINK_
<com.googlecode.mp4parser.AbstractBox: long getSize()> -> _SINK_
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstModifier getModifier()> -> _SINK_
<java.net.URL: java.lang.String getAuthority()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: android.database.Cursor access$200(com.android.ex.chips.BaseRecipientAdapter,java.lang.CharSequence,int,java.lang.Long)> -> _SINK_
<android.widget.LinearLayout: int getOrientation()> -> _SINK_
<com.android.server.IntentResolverOld: java.lang.Object newResult(android.content.IntentFilter,int,int)> -> _SINK_
<java.net.URI: java.lang.String getAuthority()> -> _SINK_
<java.util.MissingFormatWidthException: java.lang.String getMessage()> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()> -> _SINK_
<android.mtp.MtpDevice: long getParent(int)> -> _SINK_
<com.android.server.am.TaskRecord: long getInactiveDuration()> -> _SINK_
<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)> -> _SINK_
<libcore.net.http.ResponseHeaders: java.util.Date getExpires()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.pm.Signature: java.security.PublicKey getPublicKey()> -> _SINK_
<android.widget.TextView: int getTotalPaddingBottom()> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: java.lang.Class getClass(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.LastComposedWord: int getSeparatorLength(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: gov.nist.javax.sip.header.extensions.SessionExpiresHeader createSessionExpiresHeader(int)> -> _SINK_
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.opengl.GLLogWrapper$PointerInfo: int getStride()> -> _SINK_
<gov.nist.javax.sip.header.From: java.lang.String getUserAtHostPort()> -> _SINK_
<android.app.ActivityManager: int getMemoryClass()> -> _SINK_
<com.android.camera.ui.MoreSettingPopup$MoreSettingAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.nio.Buffer: java.nio.Buffer mark()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getExclusiveQueuedThreads()> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.CompatibilityInfoHolder)> -> _SINK_
<android.widget.GridLayout$6: android.widget.GridLayout$Bounds getBounds()> -> _SINK_
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()> -> _SINK_
<android.view.View: int getVerticalFadingEdgeLength()> -> _SINK_
<java.security.Signature: java.lang.Object getParameter(java.lang.String)> -> _SINK_
<android.os.SystemProperties: long getLong(java.lang.String,long)> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getWidth()> -> _SINK_
<android.content.pm.ActivityInfo: int getRealConfigChanged()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> -> _SINK_
<java.net.Socket: int getPort()> -> _SINK_
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues()> -> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)> -> _SINK_
<android.view.View: int getSuggestedMinimumWidth()> -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel get(int)> -> _SINK_
<android.util.TypedValue: float getFloat()> -> _SINK_
<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object readResolve()> -> _SINK_
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()> -> _SINK_
<org.apache.harmony.security.utils.AlgNameMapper: java.lang.String getStandardName(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: long getFilePointer()> -> _SINK_
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)> -> _SINK_
<android.app.ActivityManager: java.util.Map getAllPackageLaunchCounts()> -> _SINK_
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult()> -> _SINK_
<android.view.InputDevice$MotionRange: float getFlat()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedDownEdgeFlags()> -> _SINK_
<android.app.Fragment: java.lang.String getTag()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()> -> _SINK_
<com.android.server.am.ActivityStack: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,int,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: java.lang.String getInfo()> -> _SINK_
<java.io.EmulatedFieldsForLoading: double get(java.lang.String,double)> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getGroupingSize()> -> _SINK_
<java.net.URLConnection: java.security.Permission getPermission()> -> _SINK_
<gov.nist.javax.sip.header.To: java.lang.String getUserAtHostPort()> -> _SINK_
<android.filterpacks.imageproc.ResizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.email.Preferences: boolean getEnableExchangeLogging()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getOpacity()> -> _SINK_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)> -> _SINK_
<javax.obex.ObexHelper: byte[] updateHeaderSet(javax.obex.HeaderSet,byte[])> -> _SINK_
<android.content.pm.PackageParser$Component: java.lang.String getComponentShortName()> -> _SINK_
<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.webkit.DateSorter: java.lang.String getLabel(int)> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.UserAgentHeader getDefaultUserAgentHeader()> -> _SINK_
<android.widget.ArrayAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader remove(int)> -> _SINK_
<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageEventListener getListener()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> -> _SINK_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> -> _SINK_
<android.app.ActivityManagerProxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> -> _SINK_
<com.android.inputmethod.latin.StaticInnerHandlerWrapper: java.lang.Object getOuterInstance()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Collection getSubjectAlternativeNames()> -> _SINK_
<android.content.Intent: long getLongExtra(java.lang.String,long)> -> _SINK_
<org.kxml2.io.KXmlParser: int getLineNumber()> -> _SINK_
<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()> -> _SINK_
<org.apache.harmony.security.pkcs7.ContentInfo: java.lang.Object getContent()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getLocalPort()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getBlockSize()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getETag()> -> _SINK_
<android.accounts.AccountAndUser: java.lang.String toString()> -> _SINK_
<java.util.Locale: java.util.Locale[] getAvailableLocales()> -> _SINK_
<com.android.mms.util.Recycler: int getMessageMinLimit()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: java.lang.String getMonth()> -> _SINK_
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> -> _SINK_
<android.os.Bundle: long getLong(java.lang.String,long)> -> _SINK_
<org.apache.http.impl.conn.tsccm.WaitingThread: java.util.concurrent.locks.Condition getCondition()> -> _SINK_
<com.android.launcher2.Folder: float getPivotYForIconAnimation()> -> _SINK_
<android.widget.AdapterViewAnimator: android.view.View getViewAtRelativeIndex(int)> -> _SINK_
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getAcceptType()> -> _SINK_
<java.net.URISyntaxException: int getIndex()> -> _SINK_
<android.content.ContextWrapper: android.content.res.Resources getResources()> -> _SINK_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SINK_
<android.media.AudioTrack: float getMaxVolume()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.SubMenu getSubMenu()> -> _SINK_
<com.android.phone.PhoneUtils: android.app.Dialog displayMMIInitiate(android.content.Context,com.android.internal.telephony.MmiCode,android.os.Message,android.app.Dialog)> -> _SINK_
<java.io.EmulatedFields: byte get(java.lang.String,byte)> -> _SINK_
<android.os.Debug: int getGlobalGcInvocationCount()> -> _SINK_
<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getMessages()> -> _SINK_
<java.security.Provider$Service: java.security.Provider getProvider()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()> -> _SINK_
<java.security.Security$SecurityDoor: java.security.Provider$Service getService(java.security.Provider,java.lang.String)> -> _SINK_
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()> -> _SINK_
<android.filterpacks.performance.ThroughputFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.app.admin.DeviceAdminInfo: java.util.ArrayList getUsedPolicies()> -> _SINK_
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getNoLanguageSubtype()> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()> -> _SINK_
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildAtPosition(android.view.MotionEvent)> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()> -> _SINK_
<java.util.IllegalFormatConversionException: java.lang.Class getArgumentClass()> -> _SINK_
<com.android.email.activity.MessageViewFragment: long getMessageId()> -> _SINK_
<android.content.ContentProvider: android.content.Context getContext()> -> _SINK_
<android.widget.TextView: float getLineSpacingMultiplier()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: com.android.email.Controller getController()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: java.math.BigInteger getSerialNumber()> -> _SINK_
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])> -> _SINK_
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetInitialHeader()> -> _SINK_
<gov.nist.javax.sip.header.Event: java.lang.String getEventId()> -> _SINK_
<java.nio.DirectByteBuffer: long getLong()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(java.lang.Object)> -> _SINK_
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()> -> _SINK_
<android.media.AudioManager: boolean isSpeechRecognitionActive()> -> _SINK_
<java.io.File: java.io.File getParentFile()> -> _SINK_
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> -> _SINK_
<android.webkit.WebViewCore$EventHub: android.os.Looper getWebKitLooper()> -> _SINK_
<java.lang.reflect.Method: java.lang.String getSignatureAttribute()> -> _SINK_
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin)> -> _SINK_
<android.text.style.StyleSpan: int getSpanTypeId()> -> _SINK_
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.ArrayList getParamValues()> -> _SINK_
<com.android.phone.CallerInfoCache: com.android.phone.CallerInfoCache$CacheEntry getCacheEntry(java.lang.String)> -> _SINK_
<android.os.Handler: android.os.Looper getLooper()> -> _SINK_
<java.text.StringCharacterIterator: int getIndex()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()> -> _SINK_
<java.lang.Package: java.lang.String getName()> -> _SINK_
<android.webkit.WebStorageClassic: android.webkit.WebStorageClassic getInstance()> -> _SINK_
<com.android.mms.dom.DocumentImpl: java.lang.String getNodeName()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: int getLanguageOnSpacebarAnimAlpha()> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: int getHorizontalFadingEdgeLength()> -> _SINK_
<com.android.internal.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()> -> _SINK_
<com.android.camera.ActivityBase: long getStorageSpace()> -> _SINK_
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfGeographicalAreaCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> -> _SINK_
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: float getFieldOfView()> -> _SINK_
<com.android.email.activity.setup.AccountSettingsUtils: android.content.ContentValues getAccountContentValues(com.android.emailcommon.provider.Account)> -> _SINK_
<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()> -> _SINK_
<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)> -> _SINK_
<android.content.res.ColorStateList: int getColorForState(int[],int)> -> _SINK_
<android.webkit.ZoomManager: int getDocumentAnchorY()> -> _SINK_
<android.webkit.ZoomManager: int getDocumentAnchorX()> -> _SINK_
<org.apache.http.util.VersionInfo: java.lang.String getClassloader()> -> _SINK_
<android.widget.ListView: android.widget.Adapter getAdapter()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: int getOpacity()> -> _SINK_
<com.android.launcher2.LauncherViewPropertyAnimator: long getStartDelay()> -> _SINK_
<com.android.server.sip.SipSessionListenerProxy: android.net.sip.ISipSessionListener getListener()> -> _SINK_
<android.content.PeriodicSync$1: android.content.PeriodicSync createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.email.SecurityPolicy: android.content.ComponentName getAdminComponent()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker$BogusMoveEventDetector: int getDistanceFromDownEvent(int,int)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: long getFrameCount()> -> _SINK_
<android.media.Ringtone: int getStreamType()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void getCursorCapsMode(int,int,com.android.internal.view.IInputContextCallback)> -> _SINK_
<com.android.launcher2.Workspace: android.graphics.Rect getCellLayoutMetrics(com.android.launcher2.Launcher,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()> -> _SINK_
<java.util.Formatter$FormatToken: char getDateSuffix()> -> _SINK_
<com.android.deskclock.Alarms: java.util.Calendar calculateAlarm(int,int,com.android.deskclock.Alarm$DaysOfWeek)> -> _SINK_
<android.hardware.Camera$Parameters: float getVerticalViewAngle()> -> _SINK_
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> -> _SINK_
<com.android.mms.TempFileProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<java.nio.MappedByteBufferAdapter: float getFloat()> -> _SINK_
<android.filterfw.core.OutputPort: android.filterfw.core.Filter getTargetFilter()> -> _SINK_
<android.view.ViewConfiguration: int getWindowTouchSlop()> -> _SINK_
<android.content.Loader: int getId()> -> _SINK_
<java.nio.DoubleBuffer: java.lang.Object array()> -> _SINK_
<com.android.inputmethod.keyboard.KeyDetector: com.android.inputmethod.keyboard.Keyboard getKeyboard()> -> _SINK_
<com.googlecode.mp4parser.authoring.Movie: com.googlecode.mp4parser.authoring.Track getTrackByTrackId(long)> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)> -> _SINK_
<java.net.URISyntaxException: java.lang.String getReason()> -> _SINK_
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForWildcard: java.lang.reflect.Type[] getUpperBounds()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: java.math.BigInteger getSerialNumber()> -> _SINK_
<java.util.EnumSet: java.lang.Object clone()> -> _SINK_
<com.android.email.mail.transport.CountingOutputStream: long getCount()> -> _SINK_
<android.webkit.HTML5VideoView: boolean getPlayerBuffering()> -> _SINK_
<java.util.Date: int getDay()> -> _SINK_
<com.android.internal.util.TypedProperties: short getShort(java.lang.String,short)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTimeString()> -> _SINK_
<java.net.DatagramPacket: byte[] getData()> -> _SINK_
<javax.obex.ClientOperation: int getMaxPacketSize()> -> _SINK_
<java.lang.reflect.Field: java.lang.String getSignatureAttribute()> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> -> _SINK_
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.ContactsBinaryDictionary getContactsDictionary()> -> _SINK_
<android.util.SparseIntArray: int get(int,int)> -> _SINK_
<android.preference.GenericInflater: java.lang.String getDefaultPackage()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getRenderingMode()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtrees$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> -> _SINK_
<com.android.email.Controller: com.android.email.Controller getInstance(android.content.Context)> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getIndex()> -> _SINK_
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()> -> _SINK_
<android.view.View: int getBottom()> -> _SINK_
<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()> -> _SINK_
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> -> _SINK_
<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: int getSPIClient()> -> _SINK_
<com.android.server.am.CompatModePackages: int getPackageScreenCompatModeLocked(java.lang.String)> -> _SINK_
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getCurrentCallState()> -> _SINK_
<android.view.InputDevice$MotionRange: float getMin()> -> _SINK_
<android.drm.DrmRights: java.lang.String getSubscriptionId()> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)> -> _SINK_
<com.android.email.provider.ContentCache$CachedCursor: int getCount()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: long getItemId(int)> -> _SINK_
<android.widget.CursorTreeAdapter: android.widget.CursorTreeAdapter$MyCursorHelper getChildrenCursorHelper(int,boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String)> -> _SINK_
<com.android.email.mail.store.ImapFolder: int getUnreadMessageCount()> -> _SINK_
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getPreviewIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<com.android.launcher2.PagedViewWidget: int[] getPreviewSize()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> -> _SINK_
<android.preference.Preference: java.lang.CharSequence getTitle()> -> _SINK_
<dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag get(byte)> -> _SINK_
<android.mtp.MtpObjectInfo: int getThumbPixHeight()> -> _SINK_
<android.webkit.WebView: java.lang.String getTouchIconUrl()> -> _SINK_
<android.view.GLES20Layer: int getLayer()> -> _SINK_
<android.filterfw.core.Filter: java.lang.String toString()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getSIPVersion()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded()> -> _SINK_
<android.widget.NumberPicker: int getMinValue()> -> _SINK_
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> -> _SINK_
<android.renderscript.Mesh$Builder: int getCurrentIndexSetIndex()> -> _SINK_
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()> -> _SINK_
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getError()> -> _SINK_
<com.android.phone.EditPhoneNumberPreference: java.lang.String getPhoneNumber()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.GLFrame: float[] getFloats()> -> _SINK_
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()> -> _SINK_
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()> -> _SINK_
<android.speech.tts.PlaybackQueueItem: java.lang.Object getCallerIdentity()> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getFirstHeader(java.lang.String)> -> _SINK_
<android.media.videoeditor.Transition: java.lang.String getId()> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromResource(android.content.Context,int,android.preference.PreferenceScreen)> -> _SINK_
<com.android.email.provider.EmailProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.RetryAfter: java.lang.String getComment()> -> _SINK_
<com.android.server.display.DisplayDevice: android.os.IBinder getDisplayTokenLocked()> -> _SINK_
<android.filterfw.core.Filter: int getNumberOfConnectedInputs()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.content.Context getContext()> -> _SINK_
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)> -> _SINK_
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAlbumCoverKey(long,java.lang.String)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForWildcard: java.lang.reflect.Type[] getLowerBounds()> -> _SINK_
<com.android.launcher2.DragLayer$LayoutParams: int getWidth()> -> _SINK_
<com.android.camera.ui.PieItem: float getAnimationAngle()> -> _SINK_
<android.view.InputDevice$MotionRange: float getMax()> -> _SINK_
<org.apache.harmony.security.x509.PolicyConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.os.storage.StorageManager$StorageEvent: android.os.Message getMessage()> -> _SINK_
<android.content.BroadcastReceiver: boolean getAbortBroadcast()> -> _SINK_
<com.android.systemui.statusbar.phone.QuickSettings: com.android.systemui.statusbar.phone.PhoneStatusBar getService()> -> _SINK_
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getRealm()> -> _SINK_
<libcore.net.url.FileURLConnection: java.security.Permission getPermission()> -> _SINK_
<com.android.launcher2.CellLayout: int getCountX()> -> _SINK_
<com.android.launcher2.CellLayout: int getCountY()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()> -> _SINK_
<android.widget.AbsListView: int getCacheColorHint()> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: int getEntity(java.lang.String)> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getTimeInstance()> -> _SINK_
<android.view.ViewConfiguration: int getMaximumFlingVelocity()> -> _SINK_
<com.android.launcher2.Folder: float getPivotXForIconAnimation()> -> _SINK_
<android.hardware.display.WifiDisplayStatus: int getFeatureState()> -> _SINK_
<java.nio.MappedByteBufferAdapter: byte get(int)> -> _SINK_
<android.media.videoeditor.MediaImageItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getImageClipProperties()> -> _SINK_
<android.os.Debug: java.lang.String getCallers(int,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo infoFromShortcutIntent(android.content.Context,android.content.Intent,android.graphics.Bitmap)> -> _SINK_
<gov.nist.javax.sip.header.RAck: long getCSequenceNumber()> -> _SINK_
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.media.videoeditor.AudioTrack: android.media.videoeditor.WaveformData getWaveformData()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: int getItemViewType(int)> -> _SINK_
<javax.crypto.Mac: byte[] doFinal()> -> _SINK_
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh create(boolean)> -> _SINK_
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: short getFill()> -> _SINK_
<android.os.IUserManager$Stub$Proxy: int getUserSerialNumber(int)> -> _SINK_
<com.android.mms.transaction.TransactionBundle: int getProxyPort()> -> _SINK_
<android.content.SyncStorageEngine: long getDelayUntilTime(android.accounts.Account,int,java.lang.String)> -> _SINK_
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance()> -> _SINK_
<com.android.email.mail.store.imap.ImapSimpleString: java.lang.String getString()> -> _SINK_
<com.google.android.mms.pdu.CharacterSets: java.lang.String getMimeName(int)> -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Account getAccount()> -> _SINK_
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)> -> _SINK_
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getStartRect()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndColumn()> -> _SINK_
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()> -> _SINK_
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<gov.nist.javax.sip.header.RequestLine: java.lang.String getVersionMajor()> -> _SINK_
<android.view.InputDevice$MotionRange: int getAxis()> -> _SINK_
<com.android.videoeditor.ProjectPickerAdapter: java.lang.Object getItem(int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getMethodParam()> -> _SINK_
<android.graphics.drawable.Drawable: int getMinimumHeight()> -> _SINK_
<android.view.MotionEvent: float getTouchMajor()> -> _SINK_
<com.android.email.mail.store.ImapConnection: java.util.List getCommandResponses()> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getHomeButton()> -> _SINK_
<com.android.camera.CameraActivity: long getPictureDisplayedToJpegCallbackTime()> -> _SINK_
<com.android.launcher2.Workspace: int getScrollMode()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getAcceptLanguage()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getThirdArgument(int)> -> _SINK_
<org.apache.http.entity.InputStreamEntity: java.io.InputStream getContent()> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] listAllTransports()> -> _SINK_
<android.filterpacks.base.RetargetFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.renderscript.ProgramFragmentFixedFunction$Builder: android.renderscript.ProgramFragmentFixedFunction create()> -> _SINK_
<android.support.v13.app.FragmentPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: float getRowDelay()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getUserName()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)> -> _SINK_
<android.view.MotionEvent: float getY(int)> -> _SINK_
<android.view.MotionEvent: float getX(int)> -> _SINK_
<java.nio.ReadOnlyHeapByteBuffer: byte[] protectedArray()> -> _SINK_
<android.view.animation.GridLayoutAnimationController: int getDirection()> -> _SINK_
<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()> -> _SINK_
<android.app.Activity: android.app.ActionBar getActionBar()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object)> -> _SINK_
<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String getTouchIconUrl()> -> _SINK_
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()> -> _SINK_
<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()> -> _SINK_
<android.widget.GridLayout: int getMeasurementIncludingMargin(android.view.View,boolean)> -> _SINK_
<java.net.JarURLConnection: java.lang.String getEntryName()> -> _SINK_
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.apache.harmony.security.x509.IssuingDistributionPoint$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.content.res.AssetManager: int createTheme()> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getMenuButton()> -> _SINK_
<android.speech.tts.TextToSpeech$Connection: android.os.IBinder getCallerIdentity()> -> _SINK_
<android.content.Context: java.lang.String getString(int,java.lang.Object[])> -> _SINK_
<java.security.Signature: java.security.Provider getProvider()> -> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<android.filterfw.core.SimpleFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)> -> _SINK_
<android.widget.LinearLayout: int getVirtualChildCount()> -> _SINK_
<android.content.SyncStorageEngine: java.util.ArrayList getPendingOperations()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlpha()> -> _SINK_
<android.app.ActivityThread: android.os.Handler getHandler()> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)> -> _SINK_
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.graphics.Paint: android.graphics.Typeface getTypeface()> -> _SINK_
<android.view.Choreographer: android.view.Choreographer getInstance()> -> _SINK_
<android.text.style.TypefaceSpan: int getSpanTypeId()> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getAuthority(int)> -> _SINK_
<com.android.emailcommon.internet.MimeUtility: java.io.InputStream getInputStreamForContentTransferEncoding(java.io.InputStream,java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.AbstractFullBox: int getVersion()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: long getExpirationTime()> -> _SINK_
<android.graphics.drawable.shapes.Shape: float getWidth()> -> _SINK_
<android.view.MotionEvent: int getSource()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<android.view.Display: float getRefreshRate()> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: int getCoded()> -> _SINK_
<java.util.AbstractCollection: java.lang.String toString()> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request,javax.sip.header.ContentTypeHeader,byte[])> -> _SINK_
<android.view.GLES20RenderLayer: android.view.HardwareCanvas getCanvas()> -> _SINK_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset createDescendingMultiset()> -> _SINK_
<com.google.common.collect.TreeMultiset$LiveEntry: int getCount()> -> _SINK_
<com.android.inputmethod.latin.LogEntries$AutoCorrectionCancelledEntry: java.lang.String[] getLogStrings()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getResponse()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.util.Map getRequestProperties()> -> _SINK_
<org.kxml2.io.KXmlParser: int getEventType()> -> _SINK_
<android.support.v4.view.MotionEventCompat: float getX(android.view.MotionEvent,int)> -> _SINK_
<com.android.commands.monkey.MonkeyMotionEvent: long getDownTime()> -> _SINK_
<android.support.v4.view.MotionEventCompat: float getY(android.view.MotionEvent,int)> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()> -> _SINK_
<android.view.View: int getPaddingBottom()> -> _SINK_
<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()> -> _SINK_
<android.widget.CursorTreeAdapter$MyCursorHelper: long getId(int)> -> _SINK_
<com.android.exchange.EasResponse: org.apache.http.Header getHeader(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost getTargetHost()> -> _SINK_
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> -> _SINK_
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getSwitchStatePath()> -> _SINK_
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.email.FolderProperties: android.graphics.drawable.Drawable getIcon(int,long,int)> -> _SINK_
<com.android.email.activity.UiUtilities: java.lang.String getMessageCountForUi(android.content.Context,int,boolean)> -> _SINK_
<com.android.camera.IconListPreference: boolean getUseSingleIcon()> -> _SINK_
<android.filterfw.core.GLFrame: int getFboId()> -> _SINK_
<android.media.RingtoneManager: android.database.Cursor getCursor()> -> _SINK_
<android.filterfw.core.SimpleFrame: float[] getFloats()> -> _SINK_
<android.preference.Preference: int getTitleRes()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: long getExpirationTime()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()> -> _SINK_
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> -> _SINK_
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -> _SINK_
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()> -> _SINK_
<android.view.animation.Animation: int getRepeatCount()> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()> -> _SINK_
<libcore.io.IoBridge: int getSocketLocalPort(java.io.FileDescriptor)> -> _SINK_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)> -> _SINK_
<com.android.phone.sip.SipProfileDb: int getProfilesCount()> -> _SINK_
<com.android.launcher2.Workspace: android.graphics.Bitmap createWidgetBitmap(com.android.launcher2.ItemInfo,android.view.View)> -> _SINK_
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlEncoding()> -> _SINK_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SINK_
<android.renderscript.Mesh: android.renderscript.Allocation getIndexSetAllocation(int)> -> _SINK_
<android.app.PendingIntent: android.content.Intent getIntent()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.Header createHeader(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getY()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getX()> -> _SINK_
<org.apache.http.message.BasicRequestLine: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()> -> _SINK_
<java.security.Security: java.lang.String getProperty(java.lang.String)> -> _SINK_
<android.view.inputmethod.InputBinding: int getPid()> -> _SINK_
<android.net.sip.SimpleSessionDescription: java.lang.String[] getBandwidthTypes()> -> _SINK_
<android.widget.Toast: android.view.View getView()> -> _SINK_
<android.text.BoringLayout: int getLineStart(int)> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()> -> _SINK_
<com.android.inputmethod.latin.LatinImeLogger$LogEntry: java.lang.String[] getLogStrings()> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)> -> _SINK_
<android.filterfw.core.SerializedFrame: java.nio.ByteBuffer getData()> -> _SINK_
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getCurrentPosition()> -> _SINK_
<java.util.BitSet: byte[] toByteArray()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestSHA()> -> _SINK_
<com.google.common.collect.AbstractMultimap$AsMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SINK_
<com.android.phone.CallNotifier: com.android.internal.telephony.Call$State getPreviousCdmaCallState()> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: java.util.HashSet getSetDays()> -> _SINK_
<android.widget.TextView: boolean getHorizontallyScrolling()> -> _SINK_
<com.android.server.CertBlacklister$BlacklistObserver: java.lang.String getValue()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SINK_
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper get(android.content.Context)> -> _SINK_
<com.android.commands.monkey.MonkeyKeyEvent: int getAction()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getRepeatArray()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: java.lang.String getName()> -> _SINK_
<android.app.ApplicationThreadNative: android.os.IBinder asBinder()> -> _SINK_
<com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicate withNarrowedType()> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextAfterCursor(int,int,int,com.android.internal.view.IInputContextCallback)> -> _SINK_
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()> -> _SINK_
<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()> -> _SINK_
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrame(android.filterfw.core.Frame)> -> _SINK_
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)> -> _SINK_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.util.LinkedList getMessageAsEncodedStrings()> -> _SINK_
<com.android.deskclock.TimerSetupView: int getTime()> -> _SINK_
<java.net.Socket: int getSoTimeout()> -> _SINK_
<java.net.Socket: int getSoLinger()> -> _SINK_
<android.preference.PreferenceActivity: java.util.List getHeaders()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getOverlaySettings(android.media.videoeditor.OverlayFrame)> -> _SINK_
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createEditDialog(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int,int,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherApplication: com.android.launcher2.IconCache getIconCache()> -> _SINK_
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()> -> _SINK_
<android.content.ISyncAdapter$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getHopTarget(int)> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getAspectRatio(int,int)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()> -> _SINK_
<android.mtp.MtpStorage: int getStorageId(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getViaHost()> -> _SINK_
<android.text.style.ScaleXSpan: int getSpanTypeId()> -> _SINK_
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.CharSequence getCurrentMessage()> -> _SINK_
<android.util.NtpTrustedTime: long getCachedNtpTime()> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFocusMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByName(java.lang.String)> -> _SINK_
<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: int getReadTimeout()> -> _SINK_
<java.net.Socket: boolean getTcpNoDelay()> -> _SINK_
<com.android.launcher2.Workspace$InverseZInterpolator: float getInterpolation(float)> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int,short[])> -> _SINK_
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getMaxEntries()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance()> -> _SINK_
<android.view.View: android.view.View$ListenerInfo getListenerInfo()> -> _SINK_
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute getRoute()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPort()> -> _SINK_
<java.net.DatagramSocket: int getPort()> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()> -> _SINK_
<gov.nist.javax.sip.header.RequestLine: java.lang.String getMethod()> -> _SINK_
<android.filterfw.core.Filter: java.util.Collection getOutputPorts()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: long getExpirationTime()> -> _SINK_
<java.util.EventObject: java.lang.Object getSource()> -> _SINK_
<android.webkit.ZoomManager: android.view.ScaleGestureDetector getScaleGestureDetector()> -> _SINK_
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: boolean isWakeLockLevelSupported(int)> -> _SINK_
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)> -> _SINK_
<android.text.Layout$SpannedEllipsizer: int getSpanEnd(java.lang.Object)> -> _SINK_
<android.content.BroadcastReceiver: int getSendingUserId()> -> _SINK_
<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.TabHost: android.view.View getCurrentView()> -> _SINK_
<android.content.IntentFilter$AuthorityEntry: int getPort()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getHeaderName()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getDate()> -> _SINK_
<android.content.res.Configuration: int getLayoutDirection()> -> _SINK_
<java.lang.Thread: java.util.Map getAllStackTraces()> -> _SINK_
<com.android.exchange.adapter.Parser: java.io.InputStream getInput()> -> _SINK_
<com.android.videoeditor.ExportOptionsDialog: android.app.Dialog create(android.content.Context,com.android.videoeditor.ExportOptionsDialog$ExportOptionsListener,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int)> -> _SINK_
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)> -> _SINK_
<com.android.camera.MosaicFrameProcessor: com.android.camera.MosaicFrameProcessor getInstance()> -> _SINK_
<android.media.videoeditor.Overlay: long getDuration()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: java.lang.String getWordAtCursor(java.lang.String)> -> _SINK_
<android.content.pm.IPackageDataObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()> -> _SINK_
<android.view.animation.Animation: long getStartOffset()> -> _SINK_
<gov.nist.javax.sip.header.CSeq: long getSeqNumber()> -> _SINK_
<org.apache.harmony.security.x509.DistributionPointName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<java.text.DecimalFormatSymbols: char getZeroDigit()> -> _SINK_
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.SampleTableBox getSampleTableBox()> -> _SINK_
<android.content.SyncStorageEngine: java.util.ArrayList getAuthorities()> -> _SINK_
<android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: com.adobe.xmp.options.AliasOptions getAliasForm()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: float[] getAnimationScales()> -> _SINK_
<java.text.Collator: int getDecomposition()> -> _SINK_
<java.lang.reflect.Array: int getInt(java.lang.Object,int)> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getProcessesInErrorState()> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getFileType()> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()> -> _SINK_
<com.android.commands.monkey.MonkeyMotionEvent: long getEventTime()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> -> _SINK_
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstNodeFactory getNodeFactory()> -> _SINK_
<android.content.pm.PathPermission: java.lang.String getWritePermission()> -> _SINK_
<android.app.Fragment: int getTargetRequestCode()> -> _SINK_
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> -> _SINK_
<libcore.util.ZoneInfo: int getOffset(long)> -> _SINK_
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int)> -> _SINK_
<org.apache.http.impl.cookie.NetscapeDraftSpec: org.apache.http.Header getVersionHeader()> -> _SINK_
<com.android.org.bouncycastle.asn1.BERApplicationSpecificParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.view.InputDevice: int[] getDeviceIds()> -> _SINK_
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.lang.String[] getHeader(java.lang.String)> -> _SINK_
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas getCanvas()> -> _SINK_
<android.util.XmlPullAttributes: float getAttributeFloatValue(int,float)> -> _SINK_
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> -> _SINK_
<android.text.format.Time: int getWeekNumber()> -> _SINK_
<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()> -> _SINK_
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)> -> _SINK_
<gov.nist.javax.sip.address.UserInfo: java.lang.String getUser()> -> _SINK_
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String getSelection()> -> _SINK_
<android.app.IStopUserCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.lang.Character: byte getDirectionality(char)> -> _SINK_
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()> -> _SINK_
<android.os.AsyncTask: java.lang.Object get()> -> _SINK_
<com.android.mms.model.MediaModel: int getDuration()> -> _SINK_
<gov.nist.core.DuplicateNameValueList: java.util.Collection getNameValue(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)> -> _SINK_
<org.json.JSONObject: java.lang.String getString(java.lang.String)> -> _SINK_
<android.widget.DatePicker: int getDayOfMonth()> -> _SINK_
<java.util.zip.Inflater: int getTotalOut()> -> _SINK_
<java.net.URI: int getEffectivePort()> -> _SINK_
<android.view.ViewConfiguration: int getKeyRepeatDelay()> -> _SINK_
<java.net.URL: int getEffectivePort()> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.widget.TextView: android.text.TextPaint getPaint()> -> _SINK_
<android.media.MediaSyncEvent: int getType()> -> _SINK_
<android.os.Debug: int getThreadGcInvocationCount()> -> _SINK_
<java.security.KeyStoreSpi: java.security.KeyStore$Entry engineGetEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)> -> _SINK_
<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()> -> _SINK_
<android.util.EventLog$Event: int getProcessId()> -> _SINK_
<android.widget.TextView: boolean getDefaultEditable()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()> -> _SINK_
<android.hardware.usb.UsbDevice: int getProductId()> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildContentView(android.view.View)> -> _SINK_
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context,java.lang.String)> -> _SINK_
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String getMessage()> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessagesInternal(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<libcore.net.http.RawHeaders: java.lang.String getValue(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<com.google.common.collect.ForwardingMultiset$StandardElementSet: com.google.common.collect.Multiset multiset()> -> _SINK_
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithAutoCorrectionIndicatorUnderline(android.content.Context,java.lang.CharSequence)> -> _SINK_
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getUIAccountId()> -> _SINK_
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()> -> _SINK_
<android.support.v4.app.NotificationCompat$Builder: android.app.Notification getNotification()> -> _SINK_
<javax.crypto.KeyGenerator: java.security.Provider getProvider()> -> _SINK_
<java.net.MulticastSocket: boolean getLoopbackMode()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int,int)> -> _SINK_
<com.android.email.Preferences: java.lang.String getLegacyBackupPreference(android.content.Context)> -> _SINK_
<com.android.internal.os.ZygoteConnection: java.io.FileDescriptor getFileDesciptor()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace(java.lang.String)> -> _SINK_
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()> -> _SINK_
<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)> -> _SINK_
<com.android.email.ResourceHelper: int getAccountColorIndex(long)> -> _SINK_
<android.os.SystemProperties: int getInt(java.lang.String,int)> -> _SINK_
<android.renderscript.Element: android.renderscript.Element getSubElement(int)> -> _SINK_
<android.view.View: int getScrollBarStyle()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: long getId(int)> -> _SINK_
<android.graphics.Interpolator: int getValueCount()> -> _SINK_
<com.android.phone.PhoneUtils: boolean getMute()> -> _SINK_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()> -> _SINK_
<android.os.IHardwareService$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()> -> _SINK_
<java.math.BigInteger: int getLowestSetBit()> -> _SINK_
<java.security.KeyPairGenerator: java.security.Provider getProvider()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaItem getMediaItem(java.lang.String)> -> _SINK_
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getHeight()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()> -> _SINK_
<android.widget.BaseExpandableListAdapter: int getGroupType(int)> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)> -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> -> _SINK_
<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo,int)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: long getItemId(int)> -> _SINK_
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)> -> _SINK_
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> -> _SINK_
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: java.lang.Object clone()> -> _SINK_
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> -> _SINK_
<android.hardware.display.WifiDisplay: java.lang.String getFriendlyDisplayName()> -> _SINK_
<com.android.mms.ui.DeliveryReportAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getKey()> -> _SINK_
<javax.sip.TransactionTerminatedEvent: javax.sip.ServerTransaction getServerTransaction()> -> _SINK_
<android.widget.Scroller: float getCurrVelocity()> -> _SINK_
<android.text.method.DateKeyListener: char[] getAcceptedChars()> -> _SINK_
<android.media.audiofx.BassBoost: short getRoundedStrength()> -> _SINK_
<java.util.concurrent.Semaphore: int getQueueLength()> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String getApplicationIdentifiers()> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteObject()> -> _SINK_
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(int)> -> _SINK_
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()> -> _SINK_
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getFullName()> -> _SINK_
<android.filterfw.core.GLFrame: java.nio.ByteBuffer getData()> -> _SINK_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)> -> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> -> _SINK_
<android.widget.AbsSeekBar: int getKeyProgressIncrement()> -> _SINK_
<android.widget.AbsListView: int getChoiceMode()> -> _SINK_
<android.widget.TextView$Marquee: float getScroll()> -> _SINK_
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<junit.framework.ComparisonFailure: java.lang.String getMessage()> -> _SINK_
<com.googlecode.mp4parser.AbstractBox: byte[] getUserType()> -> _SINK_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SINK_
<java.nio.DoubleArrayBuffer: java.nio.DoubleBuffer get(double[],int,int)> -> _SINK_
<com.android.phone.OtaUtils: com.android.phone.OtaUtils$CdmaOtaInCallScreenUiState$State getCdmaOtaInCallScreenUiState()> -> _SINK_
<java.util.TimeZone: int getOffset(long)> -> _SINK_
<com.android.mms.layout.HVGALayoutParameters: int getTextHeight()> -> _SINK_
<org.apache.http.impl.client.BasicCookieStore: java.util.List getCookies()> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: java.lang.String getWkday()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)> -> _SINK_
<android.webkit.Plugin: java.lang.String getName()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double getHeadingDegrees()> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: int getCount()> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.TextModel getText()> -> _SINK_
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILParElement addPar(org.w3c.dom.smil.SMILDocument)> -> _SINK_
<com.android.wallpaper.grass.ScriptField_Vertex: android.renderscript.Element createElement(android.renderscript.RenderScript)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getUsername()> -> _SINK_
<android.opengl.GLSurfaceView: int getDebugFlags()> -> _SINK_
<android.view.inputmethod.InputBinding: int getUid()> -> _SINK_
<com.android.launcher2.Cling: java.lang.String getDrawIdentifier()> -> _SINK_
<android.app.ActivityManager: int getLauncherLargeIconDensity()> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: int getAddressType()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()> -> _SINK_
<com.google.common.collect.Multimaps$FilteredMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.lang.String getIPAddress()> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getBeginIndex()> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: int getFilter()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()> -> _SINK_
<android.webkit.WebHistoryItemClassic: android.graphics.Bitmap getFavicon()> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getViaHost()> -> _SINK_
<org.apache.http.util.VersionInfo: java.lang.String getModule()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(java.lang.String,java.lang.String)> -> _SINK_
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SINK_
<android.view.ViewConfiguration: long getZoomControlsTimeout()> -> _SINK_
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)> -> _SINK_
<libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Finished: int getType()> -> _SINK_
<java.security.cert.PKIXParameters: java.util.Date getDate()> -> _SINK_
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getInsertAfterMediaItem(long)> -> _SINK_
<android.text.Layout: int getLineForVertical(int)> -> _SINK_
<java.net.URI: java.lang.String getSchemeSpecificPart()> -> _SINK_
<java.util.SimpleTimeZone: int getDSTSavings()> -> _SINK_
<android.text.SpannableString: int getSpanStart(java.lang.Object)> -> _SINK_
<com.android.launcher2.Workspace: float getChildrenOutlineAlpha()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getSubType()> -> _SINK_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> -> _SINK_
<android.view.MotionEvent: float getYPrecision()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.util.LinkedList getMessageAsEncodedStrings()> -> _SINK_
<android.view.ViewRootImpl: android.view.ViewParent getParent()> -> _SINK_
<com.coremedia.iso.boxes.fragment.MovieFragmentBox: long getOffset()> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getExpiresString()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()> -> _SINK_
<java.net.NetworkInterface: java.lang.String getName()> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> -> _SINK_
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace()> -> _SINK_
<dalvik.system.VMRuntime: long getExternalBytesAllocated()> -> _SINK_
<java.net.URI: int getPort()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()> -> _SINK_
<java.net.URL: int getPort()> -> _SINK_
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()> -> _SINK_
<android.preference.ListPreference: java.lang.CharSequence getEntry()> -> _SINK_
<com.android.ex.chips.SingleRecipientArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestMD5()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncodedAuthenticatedAttributes()> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> -> _SINK_
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getInputFormat(java.lang.String)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.channels.DatagramChannel getChannel()> -> _SINK_
<com.android.videoeditor.util.MediaItemUtils: long getMinimumVideoItemDuration()> -> _SINK_
<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData getHprofData()> -> _SINK_
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)> -> _SINK_
<android.app.ContextImpl: java.lang.String getPackageCodePath()> -> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getMaximumMessageSize()> -> _SINK_
<android.content.ISyncStatusObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<libcore.icu.CollationElementIteratorICU: int getOffset()> -> _SINK_
<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.parser.Parser: java.lang.String sipVersion()> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)> -> _SINK_
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)> -> _SINK_
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()> -> _SINK_
<com.android.mms.ui.MessageListItem: com.android.mms.ui.MessageItem getMessageItem()> -> _SINK_
<android.text.method.CharacterPickerDialog$OptionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.view.FocusFinder: int getWeightedDistanceFor(int,int)> -> _SINK_
<java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)> -> _SINK_
<android.app.LoadedApk: android.app.Application getApplication()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebViewClient getWebViewClient()> -> _SINK_
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)> -> _SINK_
<org.xml.sax.InputSource: java.lang.String getSystemId()> -> _SINK_
<android.preference.Preference: int getOrder()> -> _SINK_
<android.view.InputEvent: int getSequenceNumber()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebViewCore getWebViewCore()> -> _SINK_
<android.widget.NumberPicker: float getBottomFadingEdgeStrength()> -> _SINK_
<java.security.MessageDigest: java.security.Provider getProvider()> -> _SINK_
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> -> _SINK_
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> -> _SINK_
<android.app.ActivityManagerProxy: java.lang.String getPackageForToken(android.os.IBinder)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.lang.String,int)> -> _SINK_
<android.widget.TextView: int getAccessibilityCursorPosition()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getNextNonce()> -> _SINK_
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> -> _SINK_
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String getCurrentKeyboardLayout()> -> _SINK_
<com.android.email.widget.EmailWidget: int getViewTypeCount()> -> _SINK_
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()> -> _SINK_
<com.coremedia.iso.IsoFile: com.coremedia.iso.boxes.MovieBox getMovieBox()> -> _SINK_
<java.util.zip.Adler32: long getValue()> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: java.util.Enumeration getDeclaredPrefixes()> -> _SINK_
<java.security.Provider: java.lang.String getName()> -> _SINK_
<java.security.MessageDigest: java.lang.Object clone()> -> _SINK_
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)> -> _SINK_
<android.os.Message: android.os.Handler getTarget()> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$ToggleAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String,boolean)> -> _SINK_
<com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPreviewSize()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: int getConnectTimeout()> -> _SINK_
<android.content.res.Resources: android.content.res.AssetManager getAssets()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: int getWrongPasswordStringId()> -> _SINK_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: long getItemId(int)> -> _SINK_
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: int getWidth(android.view.View,boolean)> -> _SINK_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: int getHash()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getRadius()> -> _SINK_
<com.android.server.pm.Installer: int getSizeInfo(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,android.content.pm.PackageStats)> -> _SINK_
<android.view.Display: android.view.CompatibilityInfoHolder getCompatibilityInfo()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getExtensionValue(java.lang.String)> -> _SINK_
<java.nio.DirectByteBuffer: byte[] protectedArray()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getId()> -> _SINK_
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet tailSet(java.lang.Object)> -> _SINK_
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()> -> _SINK_
<java.text.DecimalFormat: int getMultiplier()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: long getHeaderFieldDate(java.lang.String,long)> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)> -> _SINK_
<android.widget.TabHost$ViewIdContentStrategy: android.view.View getContentView()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getQName(int)> -> _SINK_
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getDisposition()> -> _SINK_
<java.lang.Character: java.lang.String getName(int)> -> _SINK_
<gov.nist.javax.sip.header.AcceptEncoding: float getQValue()> -> _SINK_
<gov.nist.javax.sip.header.ContentType: java.lang.String getContentSubType()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getDefaultSampleDuration()> -> _SINK_
<android.drm.mobile1.DrmConstraintInfo: int getCount()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)> -> _SINK_
<com.adobe.xmp.options.Options: java.lang.String toString()> -> _SINK_
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()> -> _SINK_
<android.graphics.Paint: android.graphics.Shader getShader()> -> _SINK_
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)> -> _SINK_
<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)> -> _SINK_
<android.app.LoadedApk: java.lang.String getDataDir()> -> _SINK_
<android.hardware.SensorManager: int getSensors()> -> _SINK_
<java.util.logging.LogManager: java.util.logging.Logger getOrCreate(java.lang.String,java.lang.String)> -> _SINK_
<android.speech.tts.FileSynthesisCallback: int getMaxBufferSize()> -> _SINK_
<gov.nist.javax.sip.Utils: java.lang.String getQuotedString(java.lang.String)> -> _SINK_
<android.os.storage.IObbActionListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.media.videoeditor.AudioTrack: java.lang.String getId()> -> _SINK_
<android.widget.TextView: int getMinHeight()> -> _SINK_
<android.view.InputDevice: android.view.InputDevice getDevice(int)> -> _SINK_
<android.widget.PopupWindow: android.view.View getContentView()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> -> _SINK_
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)> -> _SINK_
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getSummary(android.content.res.Resources)> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object)> -> _SINK_
<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.util.ResourceBundle$MissingBundle: java.util.Enumeration getKeys()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerInetAddress()> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(long)> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getHeaderAsFormattedString(java.lang.String)> -> _SINK_
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()> -> _SINK_
<com.android.videoeditor.widgets.AudioTrackView: android.media.videoeditor.WaveformData getWaveformData()> -> _SINK_
<java.net.URLConnection: int getConnectTimeout()> -> _SINK_
<android.app.ActivityThread$ApplicationThread: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.LayoutModel getLayout()> -> _SINK_
<com.android.camera.Storage: long getAvailableSpace()> -> _SINK_
<java.util.Locale: java.lang.String[] getISOLanguages()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getPhoneNumber()> -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> -> _SINK_
<android.preference.DialogPreference: android.view.View onCreateDialogView()> -> _SINK_
<android.os.Bundle: double getDouble(java.lang.String)> -> _SINK_
<com.android.exchange.adapter.Serializer: byte[] toByteArray()> -> _SINK_
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)> -> _SINK_
<android.hardware.Camera$Parameters: int getInt(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object getContent()> -> _SINK_
<java.util.HashMap: java.util.Iterator newEntryIterator()> -> _SINK_
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.widget.GridLayout$Axis: int[] getLocations()> -> _SINK_
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme(android.content.Context)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getNavDump()> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.KeyboardSwitcher getInstance()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getToHeader()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getCallId()> -> _SINK_
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String getPropertyString(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.GeolocationPermissions getGeolocationPermissions()> -> _SINK_
<java.util.logging.LogRecord: java.lang.String getLoggerName()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1StringType$7: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<org.apache.http.util.VersionInfo: java.lang.String getTimestamp()> -> _SINK_
<java.util.Date: int getHours()> -> _SINK_
<java.text.ParsePosition: int getIndex()> -> _SINK_
<com.android.camera.IconListPreference: int[] getImageIds()> -> _SINK_
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)> -> _SINK_
<android.emoji.EmojiFactory: int getMinimumAndroidPua()> -> _SINK_
<java.net.URL: java.lang.String getHost()> -> _SINK_
<com.android.mms.model.MediaModel: int getMediaSize()> -> _SINK_
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.widget.ActivityChooserModel getDataModel()> -> _SINK_
<com.android.launcher2.CellLayout: int getCellHeight()> -> _SINK_
<android.accounts.AccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)> -> _SINK_
<java.util.HashMap$HashMapEntry: java.lang.Object getValue()> -> _SINK_
<java.net.URI: java.lang.String getHost()> -> _SINK_
<java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)> -> _SINK_
<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()> -> _SINK_
<android.mtp.MtpObjectInfo: int getThumbPixWidth()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<com.android.mms.MmsConfig: int getMaxTextLimit()> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat: float getYVelocity(android.view.VelocityTracker,int)> -> _SINK_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)> -> _SINK_
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRights installRights(java.io.InputStream,int,java.lang.String)> -> _SINK_
<android.view.InputQueue: android.view.InputChannel getInputChannel()> -> _SINK_
<com.android.exchange.ExchangeService$AccountList: com.android.emailcommon.provider.Account getById(long)> -> _SINK_
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()> -> _SINK_
<libcore.icu.LocaleData: java.lang.String getDateFormat(int)> -> _SINK_
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> -> _SINK_
<java.security.cert.Certificate: java.lang.Object writeReplace()> -> _SINK_
<android.hardware.Sensor: int getVersion()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: java.lang.String getISO8601String()> -> _SINK_
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> -> _SINK_
<android.app.IThumbnailReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.widget.TableRow: int[] getColumnsWidths(int)> -> _SINK_
<com.android.mms.model.LayoutModel: int getLayoutType()> -> _SINK_
<android.view.InputDevice$MotionRange: float getFuzz()> -> _SINK_
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)> -> _SINK_
<android.os.CommonTimeConfig: long getMasterElectionGroupId()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1BitString: org.apache.harmony.security.asn1.ASN1BitString getInstance()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertException: javax.net.ssl.SSLException getReason()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()> -> _SINK_
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()> -> _SINK_
<com.android.inputmethod.latin.InputPointers: int[] getYCoordinates()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: int getIntrinsicWidth()> -> _SINK_
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver getAddressResolver()> -> _SINK_
<android.app.ListActivity: long getSelectedItemId()> -> _SINK_
<android.animation.KeyframeSet: java.lang.Object getValue(float)> -> _SINK_
<com.android.camera.FocusOverlayManager: int getFocusState()> -> _SINK_
<com.android.launcher2.Launcher: int[] getMinSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: int getYear()> -> _SINK_
<javax.sip.DialogTerminatedEvent: javax.sip.Dialog getDialog()> -> _SINK_
<android.view.Display: java.lang.String getName()> -> _SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer get(float[],int,int)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> -> _SINK_
<android.filterfw.core.GLFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<android.os.DropBoxManager$Entry: java.lang.String getTag()> -> _SINK_
<com.android.wallpaper.RenderScriptScene: android.renderscript.ScriptC getScript()> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: int getPort()> -> _SINK_
<android.accounts.IAccountManager$Stub: android.accounts.IAccountManager asInterface(android.os.IBinder)> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: java.lang.String getPrefix()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Time: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.os.Parcel: byte[] marshall()> -> _SINK_
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.app.Activity,int)> -> _SINK_
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.os.Environment: java.io.File getEmulatedStorageSource(int)> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: java.net.Socket getSocket()> -> _SINK_
<android.widget.PopupMenu: android.view.Menu getMenu()> -> _SINK_
<android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas getNextPoolable()> -> _SINK_
<android.text.format.Time: java.lang.String getCurrentTimezone()> -> _SINK_
<android.text.method.DigitsKeyListener: int getInputType()> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getHour()> -> _SINK_
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: int getType()> -> _SINK_
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: int[] getNextIndexToLoad()> -> _SINK_
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()> -> _SINK_
<android.renderscript.Mesh$Builder: android.renderscript.Type newType(android.renderscript.Element,int)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: int getCurrentModeType()> -> _SINK_
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()> -> _SINK_
<android.widget.TextView: float getShadowRadius()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: int getVersion()> -> _SINK_
<android.widget.AutoCompleteTextView: int getListSelection()> -> _SINK_
<android.filterfw.core.Frame: android.filterfw.core.Frame retain()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)> -> _SINK_
<com.google.common.collect.ForwardingMap: java.util.Set keySet()> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getPostDial()> -> _SINK_
<android.widget.Toast: float getHorizontalMargin()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.EventHeader getEventHeader()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getGivenContentInsetsLw()> -> _SINK_
<android.widget.Spinner: int getBaseline()> -> _SINK_
<gov.nist.core.Host: java.lang.String getHostname()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()> -> _SINK_
<com.adobe.xmp.options.ParseOptions: boolean getFixControlChars()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: int getDistance(int,int,int,int)> -> _SINK_
<java.net.Socket: int getLocalPort()> -> _SINK_
<android.view.InputDevice: java.util.List getMotionRanges()> -> _SINK_
<com.android.inputmethod.latin.SettingsValues: android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes()> -> _SINK_
<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Sprite: int getWidth()> -> _SINK_
<android.content.pm.ResolveInfo: int getIconResource()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<com.android.mms.transaction.MessagingNotification$NotificationInfo: long getTime()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getStyleAttribute()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SINK_
<com.android.server.pm.PackageSettingBase: java.lang.String getInstallerPackageName()> -> _SINK_
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getDecryptedStream(java.io.InputStream)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndColumn()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: java.lang.Object getKey()> -> _SINK_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc()> -> _SINK_
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getTitle(android.content.res.Resources)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getPhotoId()> -> _SINK_
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.widget.Spinner$DialogPopup: android.graphics.drawable.Drawable getBackground()> -> _SINK_
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()> -> _SINK_
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)> -> _SINK_
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)> -> _SINK_
<org.apache.harmony.security.x509.CRLNumber: java.math.BigInteger getNumber()> -> _SINK_
<gov.nist.javax.sip.header.Indentation: java.lang.String getIndentation()> -> _SINK_
<java.security.AllPermission: java.lang.String getActions()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object clone()> -> _SINK_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()> -> _SINK_
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MimeVersionHeader createMimeVersionHeader(int,int)> -> _SINK_
<android.widget.TextView: int getRightPaddingOffset()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getCipherSuite()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: com.coremedia.iso.boxes.fragment.SampleFlags getSampleFlags()> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: int getDecomposition()> -> _SINK_
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: int getPageForComponent(int)> -> _SINK_
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)> -> _SINK_
<android.renderscript.Script$FieldBase: android.renderscript.Element getElement()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.app.backup.RestoreSet[] getAvailableRestoreSets()> -> _SINK_
<android.filterfw.core.SimpleFrame: java.nio.ByteBuffer getData()> -> _SINK_
<android.test.IsolatedContext: java.io.File getFilesDir()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference: java.lang.Object get()> -> _SINK_
<android.webkit.CallbackProxy$ResultTransport: java.lang.Object getResult()> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getText()> -> _SINK_
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)> -> _SINK_
<android.graphics.Canvas: android.graphics.Matrix getMatrix()> -> _SINK_
<java.lang.Class: java.lang.Package getPackage()> -> _SINK_
<com.android.internal.os.storage.ExternalStorageFormatter: android.os.storage.IMountService getMountService()> -> _SINK_
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> -> _SINK_
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherModel: android.content.ComponentName getComponentNameFromResolveInfo(android.content.pm.ResolveInfo)> -> _SINK_
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.LatinIME$BatchInputUpdater getInstance()> -> _SINK_
<com.android.launcher2.AppWidgetResizeFrame: android.graphics.Rect getWidgetSizeRanges(com.android.launcher2.Launcher,int,int,android.graphics.Rect)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()> -> _SINK_
<com.android.inputmethod.latin.SubtypeSwitcher: com.android.inputmethod.latin.SubtypeSwitcher getInstance()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()> -> _SINK_
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()> -> _SINK_
<android.app.IAlarmManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<libcore.net.http.ResponseHeaders: int getMaxAgeSeconds()> -> _SINK_
<com.android.providers.applications.ApplicationsProvider: android.content.pm.PackageManager getPackageManager()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getX()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getY()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: byte[] encode(java.lang.Object)> -> _SINK_
<android.view.ViewConfiguration: float getScrollFriction()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean,java.lang.String)> -> _SINK_
<android.test.IsolatedContext: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.google.common.collect.ForwardingMultiset: int add(java.lang.Object,int)> -> _SINK_
<java.util.AbstractMap: java.util.Set keySet()> -> _SINK_
<android.app.Fragment: android.app.LoaderManager getLoaderManager()> -> _SINK_
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getEndTransition()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getMacKey()> -> _SINK_
<org.apache.http.impl.conn.tsccm.WaitingThread: java.lang.Thread getThread()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)> -> _SINK_
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)> -> _SINK_
<com.android.commands.monkey.MonkeyEvent: int getEventType()> -> _SINK_
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: java.util.ArrayList getLoadedTasks()> -> _SINK_
<android.view.View: java.util.ArrayList getTouchables()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud: float getScale()> -> _SINK_
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: int getPeerPacketSourcePort()> -> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: int getIconId(java.lang.String)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getText()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: int getPeerPacketSourcePort()> -> _SINK_
<android.media.videoeditor.OverlayFrame: java.lang.String getBitmapImageFileName()> -> _SINK_
<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String getClazzName()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSet entrySet()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.DateHeader createDateHeader(java.util.Calendar)> -> _SINK_
<android.app.ContextImpl: android.content.res.AssetManager getAssets()> -> _SINK_
<android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.util.ListIterator getChargingCollectionFunctionAddresses()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHello: int getType()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpConnectionMetrics getMetrics()> -> _SINK_
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<java.nio.FileChannelImpl: long transferTo(long,long,java.nio.channels.WritableByteChannel)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: long getUploadedTime()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader)> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)> -> _SINK_
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()> -> _SINK_
<java.nio.DirectByteBuffer: float getFloat()> -> _SINK_
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getShortcut(java.lang.String)> -> _SINK_
<android.webkit.WebHistoryItemClassic: java.lang.String getTitle()> -> _SINK_
<com.android.phone.EmergencyDialer: android.app.Dialog onCreateDialog(int)> -> _SINK_
<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: float getPreference()> -> _SINK_
<android.widget.Editor$SelectionModifierCursorController: int getMinTouchOffset()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: int getQualifierLength()> -> _SINK_
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _SINK_
<com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndLine()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()> -> _SINK_
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()> -> _SINK_
<com.android.internal.util.TypedProperties: int getInt(java.lang.String)> -> _SINK_
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()> -> _SINK_
<android.view.MotionEvent: float getPressure(int)> -> _SINK_
<com.android.internal.net.VpnProfile: byte[] encode()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()> -> _SINK_
<android.view.MotionEvent: long getEventTime()> -> _SINK_
<android.app.WallpaperManager: android.graphics.Bitmap generateBitmap(android.content.Context,android.graphics.Bitmap,int,int)> -> _SINK_
<android.text.format.Time: int getJulianDay(long,long)> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getContentAppWidgetId()> -> _SINK_
<android.os.UserManager: int getUserSerialNumber(int)> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.Effect getEffect(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<libcore.icu.ICU: java.lang.String[] getISOLanguages()> -> _SINK_
<com.google.common.base.CharMatcher: java.lang.String trimFrom(java.lang.CharSequence)> -> _SINK_
<android.renderscript.Matrix2f: float[] getArray()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: int getZoomLevel()> -> _SINK_
<android.os.IRemoteCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.lang.ClassNotFoundException: java.lang.Throwable getException()> -> _SINK_
<android.animation.ObjectAnimator: java.lang.Object getTarget()> -> _SINK_
<com.android.email.Preferences: boolean getInhibitGraphicsAcceleration()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getMediaStorageDirectory()> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getSampleDependencies()> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getIntrinsicHeight()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.lang.String getContentType()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object getParameterValue(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getSupported()> -> _SINK_
<com.google.common.collect.GenericMapMaker: com.google.common.collect.MapMaker$RemovalListener getRemovalListener()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.MessageDisplay: com.google.android.apps.lightcycle.opengl.Sprite access$200(com.google.android.apps.lightcycle.panorama.MessageDisplay,android.graphics.Bitmap,float,float)> -> _SINK_
<org.apache.harmony.security.utils.ObjectIdentifier: int[] getOid()> -> _SINK_
<android.view.InputChannel: java.lang.String getName()> -> _SINK_
<android.webkit.ZoomManager: float getTextWrapScale()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioService()> -> _SINK_
<com.android.internal.logging.AndroidHandler: int getAndroidLevel(java.util.logging.Level)> -> _SINK_
<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)> -> _SINK_
<android.view.ViewGroup: android.view.View findViewByAccessibilityIdTraversal(int)> -> _SINK_
<android.drm.mobile1.DrmRawContent: java.lang.String getContentType()> -> _SINK_
<com.android.launcher2.CellLayout$LayoutParams: int getHeight()> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.util.ListIterator getEventChargingFunctionAddresses()> -> _SINK_
<android.text.style.StyleSpan: int getStyle()> -> _SINK_
<org.xml.sax.SAXParseException: int getColumnNumber()> -> _SINK_
<android.view.KeyEvent: long getEventTimeNano()> -> _SINK_
<com.coremedia.iso.boxes.FileTypeBox: long getMinorVersion()> -> _SINK_
<com.android.mms.model.ImageModel: boolean getMediaResizable()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.io.InputStream getInputStream()> -> _SINK_
<com.android.deskclock.Utils: int getPressedColorId()> -> _SINK_
<android.widget.AdapterViewAnimator: int getNumActiveViews()> -> _SINK_
<android.renderscript.Matrix4f: float[] getArray()> -> _SINK_
<java.net.SocketImpl: int getLocalPort()> -> _SINK_
<com.android.launcher2.DragLayer: float getDescendantCoordRelativeToSelf(android.view.View,int[])> -> _SINK_
<android.graphics.NinePatch: int getHeight()> -> _SINK_
<javax.crypto.MacSpi: java.lang.Object clone()> -> _SINK_
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)> -> _SINK_
<com.android.launcher2.Launcher: android.view.View createShortcut(com.android.launcher2.ShortcutInfo)> -> _SINK_
<java.net.PasswordAuthentication: char[] getPassword()> -> _SINK_
<java.util.zip.ZipEntry: long getSize()> -> _SINK_
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getTempFileName(java.lang.String,android.content.Context)> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: android.view.View getPageAt(int)> -> _SINK_
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)> -> _SINK_
<android.media.videoeditor.AudioTrack: long getBoundaryBeginTime()> -> _SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: int getColumnNumber()> -> _SINK_
<android.filterfw.geometry.Quad: float getBoundingHeight()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getSubject()> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getValue()> -> _SINK_
<android.os.Bundle: long[] getLongArray(java.lang.String)> -> _SINK_
<java.nio.HeapByteBuffer: double getDouble()> -> _SINK_
<com.android.email.mail.store.ImapStore: com.android.email.mail.Transport cloneTransport()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getStartTime()> -> _SINK_
<android.os.storage.StorageVolume: java.lang.String getPath()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()> -> _SINK_
<java.net.PlainDatagramSocketImpl: java.lang.Object getOption(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> -> _SINK_
<com.android.camera.CameraSettings: com.android.camera.PreferenceGroup getPreferenceGroup(int)> -> _SINK_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView: float getExpandedFraction()> -> _SINK_
<android.os.ParcelUuid: java.util.UUID getUuid()> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getType()> -> _SINK_
<android.renderscript.Matrix3f: float[] getArray()> -> _SINK_
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> -> _SINK_
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(int,boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView$10: float getInterpolation(float)> -> _SINK_
<com.google.android.gms.common.internal.GmsClient: android.os.IInterface getService()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: com.google.android.apps.lightcycle.math.Vector3 getFilteredAcceleration()> -> _SINK_
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy getInstance()> -> _SINK_
<android.content.SyncQueue: java.util.Collection getOperations()> -> _SINK_
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> -> _SINK_
<java.net.SocketImpl: java.io.FileDescriptor getFD$()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getPeerProfile()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getHeaderValue()> -> _SINK_
<android.app.ActivityManager: java.util.List getRecentTasksForUser(int,int,int)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getVideoClipProperties()> -> _SINK_
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()> -> _SINK_
<android.os.StrictMode: int getThreadPolicyMask()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RSeqHeader createRSeqHeader(int)> -> _SINK_
<com.android.launcher2.ShortcutInfo: android.graphics.Bitmap getIcon(com.android.launcher2.IconCache)> -> _SINK_
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getImageRegion()> -> _SINK_
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int)> -> _SINK_
<java.security.KeyStore$CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()> -> _SINK_
<com.android.launcher2.PagedView: int getChildOffset(int)> -> _SINK_
<java.security.cert.CertPath: java.lang.String toString()> -> _SINK_
<com.android.camera.ActivityBase: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()> -> _SINK_
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getImplicitDuration()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> -> _SINK_
<android.support.v4.view.ViewConfigurationCompat: int getScaledPagingTouchSlop(android.view.ViewConfiguration)> -> _SINK_
<android.content.res.TypedArray: java.lang.String getString(int)> -> _SINK_
<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> -> _SINK_
<com.android.providers.downloads.DownloadInfo: java.util.Collection getHeaders()> -> _SINK_
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)> -> _SINK_
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()> -> _SINK_
<gov.nist.javax.sip.message.ContentImpl: java.lang.Object getContent()> -> _SINK_
<android.view.MotionEvent: long getHistoricalEventTimeNano(int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetX()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetY()> -> _SINK_
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: java.lang.Object getKey()> -> _SINK_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: int getType()> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.view.View getCustomView()> -> _SINK_
<android.media.videoeditor.Transition: java.util.List isEffectandOverlayOverlapping(android.media.videoeditor.MediaItem,android.media.videoeditor.MediaArtistNativeHelper$ClipSettings,int)> -> _SINK_
<gov.nist.javax.sip.address.Authority: java.lang.String getUser()> -> _SINK_
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()> -> _SINK_
<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes()> -> _SINK_
<android.widget.Switch: int getSwitchPadding()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)> -> _SINK_
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> -> _SINK_
<com.android.camera.drawable.TextDrawable: int getIntrinsicHeight()> -> _SINK_
<android.content.pm.PathPermission: java.lang.String getReadPermission()> -> _SINK_
<android.app.ActivityManagerProxy: int getRequestedOrientation(android.os.IBinder)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request)> -> _SINK_
<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()> -> _SINK_
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()> -> _SINK_
<android.widget.TextView: java.lang.String getPrivateImeOptions()> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])> -> _SINK_
<android.app.Activity: java.lang.String getLocalClassName()> -> _SINK_
<com.android.launcher2.InterruptibleInOutAnimator: android.animation.ValueAnimator getAnimator()> -> _SINK_
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: gov.nist.core.NameValue getAuthInfo(java.lang.String)> -> _SINK_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SINK_
<android.app.ActivityManager: com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats()> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getEndTransition()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: long getParameterAsLong(java.lang.String)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()> -> _SINK_
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.mms.MmsConfig: int getAliasMaxChars()> -> _SINK_
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getCategoryAt(int)> -> _SINK_
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)> -> _SINK_
<android.view.View: int getLabelFor()> -> _SINK_
<android.renderscript.Mesh: int getVertexAllocationCount()> -> _SINK_
<java.text.DecimalFormat: java.lang.String getPositivePrefix()> -> _SINK_
<com.android.emailcommon.provider.Account: java.lang.String getProtocol(android.content.Context)> -> _SINK_
<android.app.Dialog: android.view.View getCurrentFocus()> -> _SINK_
<com.android.mms.util.CacheManager: com.android.mms.util.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)> -> _SINK_
<android.content.ClipData: int getItemCount()> -> _SINK_
<android.opengl.ManagedEGLContext: javax.microedition.khronos.egl.EGLContext getContext()> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.ErrorHandler getErrorHandler()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> -> _SINK_
<com.android.launcher2.DragView: float getInitialScale()> -> _SINK_
<android.view.ViewConfiguration: int getEdgeSlop()> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextBeforeCursor(int,int,int,com.android.internal.view.IInputContextCallback)> -> _SINK_
<android.widget.ScrollView: float getTopFadingEdgeStrength()> -> _SINK_
<javax.xml.parsers.DocumentBuilder: javax.xml.validation.Schema getSchema()> -> _SINK_
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)> -> _SINK_
<android.webkit.WebStorage$Origin: long getUsage()> -> _SINK_
<junit.textui.ResultPrinter: java.io.PrintStream getWriter()> -> _SINK_
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> -> _SINK_
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()> -> _SINK_
<android.content.pm.VerificationParams: android.content.pm.ManifestDigest getManifestDigest()> -> _SINK_
<android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)> -> _SINK_
<android.widget.NumberPicker$InputTextFilter: char[] getAcceptedChars()> -> _SINK_
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: java.lang.String getFileName(int,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> -> _SINK_
<java.util.jar.JarVerifier: java.security.cert.Certificate[] getCertificates(java.lang.String)> -> _SINK_
<java.security.KeyStore: java.lang.String getDefaultType()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getBranch()> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView$TabView: android.app.ActionBar$Tab getTab()> -> _SINK_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> -> _SINK_
<dalvik.system.BlockGuard$BlockGuardPolicyException: java.lang.String getMessage()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getNumColumnInRow(int)> -> _SINK_
<android.content.ContextWrapper: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)> -> _SINK_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)> -> _SINK_
<java.text.DateFormatSymbols: java.util.Locale[] getAvailableLocales()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getLoadsImagesAutomatically()> -> _SINK_
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)> -> _SINK_
<android.accounts.AccountAuthenticatorCache: android.accounts.AuthenticatorDescription parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object[] toArray(java.lang.Object[])> -> _SINK_
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumWidth()> -> _SINK_
<com.android.videoeditor.LoadPreviewBitmapTask: android.graphics.Bitmap doInBackground(java.lang.Void[])> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: java.io.FileDescriptor getFD()> -> _SINK_
<com.android.mms.transaction.DefaultRetryScheme: int getRetryLimit()> -> _SINK_
<javax.obex.PasswordAuthentication: byte[] getPassword()> -> _SINK_
<libcore.io.ForwardingOs: int getegid()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: android.content.Context getContext()> -> _SINK_
<android.util.Singleton: java.lang.Object get()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportWidth()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid: org.apache.harmony.security.asn1.ASN1Oid getInstanceForString()> -> _SINK_
<org.apache.harmony.security.x509.AlgorithmIdentifier$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getTrackId()> -> _SINK_
<android.preference.Preference: java.lang.String getFragment()> -> _SINK_
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.content.ComponentName,int,int)> -> _SINK_
<android.content.res.AssetManager: boolean getThemeValue(int,int,android.util.TypedValue,boolean)> -> _SINK_
<android.view.PointerIcon: float getHotSpotY()> -> _SINK_
<android.view.PointerIcon: float getHotSpotX()> -> _SINK_
<java.net.URL: java.lang.String getRef()> -> _SINK_
<android.text.method.TimeKeyListener: int getInputType()> -> _SINK_
<com.android.camera.CameraScreenNail: int getHeight()> -> _SINK_
<com.android.wallpaper.grass.ScriptField_Blade: android.renderscript.Element createElement(android.renderscript.RenderScript)> -> _SINK_
<java.net.CookieHandler: java.net.CookieHandler getDefault()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: long getItemId(int)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()> -> _SINK_
<android.view.Display: int getMaximumSizeDimension()> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: java.lang.String getCallId()> -> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> -> _SINK_
<com.android.server.NativeDaemonConnectorException: java.lang.String getCmd()> -> _SINK_
<com.android.internal.widget.WaveView: int getSuggestedMinimumWidth()> -> _SINK_
<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()> -> _SINK_
<android.widget.AbsListView: boolean performLongPress(android.view.View,int,long)> -> _SINK_
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getTargetAlpha()> -> _SINK_
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: int getParameterAsInt(java.lang.String)> -> _SINK_
<com.android.emailcommon.provider.Account: android.net.Uri save(android.content.Context)> -> _SINK_
<android.filterfw.core.SerializedFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.content.ContentProvider: java.lang.String getReadPermission()> -> _SINK_
<android.content.IOnPrimaryClipChangedListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<libcore.net.http.HttpEngine: libcore.net.http.RawHeaders getNetworkRequestHeaders()> -> _SINK_
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)> -> _SINK_
<com.android.email.widget.WidgetManager: long loadAccountIdPref(android.content.Context,int)> -> _SINK_
<android.app.ActivityManager: java.util.List getRunningServices(int)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()> -> _SINK_
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> -> _SINK_
<android.filterpacks.imageproc.ImageStitcher: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getRadius()> -> _SINK_
<org.apache.http.message.BasicHttpResponse: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<android.hardware.LegacySensorManager: int getSensors()> -> _SINK_
<com.android.launcher2.CellLayout: android.view.View getChildAt(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.NameValueList getParameters()> -> _SINK_
<android.app.Activity: android.content.ComponentName getComponentName()> -> _SINK_
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getPreviousCallState()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: java.lang.Runnable getCallback()> -> _SINK_
<gov.nist.core.StringTokenizer: java.lang.String getSDPFieldName(java.lang.String)> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAuthority()> -> _SINK_
<android.hardware.LegacySensorManager: int getRotation()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getUseFixedViewport()> -> _SINK_
<javax.crypto.Cipher: byte[] update(byte[],int,int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.PhotoCollection: float[] getCameraToWorld(int)> -> _SINK_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)> -> _SINK_
<android.gesture.GestureStore: android.gesture.Learner getLearner()> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription createTaskDescription(int,int,android.content.Intent,android.content.ComponentName,java.lang.CharSequence)> -> _SINK_
<java.io.ByteArrayOutputStream: byte[] toByteArray()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: int getPointerCount()> -> _SINK_
<android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)> -> _SINK_
<android.util.LongSparseArray: java.lang.Object get(long)> -> _SINK_
<android.widget.EditText: boolean getDefaultEditable()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)> -> _SINK_
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> -> _SINK_
<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()> -> _SINK_
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoBitrates()> -> _SINK_
<com.google.android.apps.lightcycle.LightCycleApp: com.google.android.apps.lightcycle.camera.CameraUtility getCameraUtility()> -> _SINK_
<java.text.DecimalFormat: int getGroupingSize()> -> _SINK_
<com.google.common.collect.AbstractIterator: java.lang.Object next()> -> _SINK_
<com.android.mms.model.ImageModel: android.graphics.Bitmap getBitmap(int,int)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getPositionDescription()> -> _SINK_
<android.webkit.WebViewCore: android.webkit.DeviceOrientationService getDeviceOrientationService()> -> _SINK_
<android.app.Activity: android.view.Window getWindow()> -> _SINK_
<libcore.util.ZoneInfo: int getDSTSavings()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getAudioBitrate()> -> _SINK_
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlVersion()> -> _SINK_
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,java.lang.Object,javax.sip.header.ContentTypeHeader)> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getNthPreviousWord(java.lang.String,int)> -> _SINK_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()> -> _SINK_
<android.text.DynamicLayout: int getEllipsisCount(int)> -> _SINK_
<android.hardware.SystemSensorManager$ListenerDelegate: java.lang.Object getListener()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.videoeditor.widgets.ImageViewTouchBase: float getMaxZoom()> -> _SINK_
<com.android.camera.ui.PieItem: float getSweep()> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.Type getConstantInputType(android.renderscript.RenderScript)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: int getOpacity()> -> _SINK_
<android.widget.SearchView: java.lang.CharSequence getQuery()> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: int getNameResId()> -> _SINK_
<libcore.icu.TimeZones: java.lang.String[][] getZoneStrings(java.util.Locale)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.Collection getWaitingThreads()> -> _SINK_
<android.widget.GridLayout$Alignment: android.widget.GridLayout$Bounds getBounds()> -> _SINK_
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()> -> _SINK_
<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()> -> _SINK_
<android.widget.Toast: int getGravity()> -> _SINK_
<java.security.cert.PKIXParameters: java.util.List getCertPathCheckers()> -> _SINK_
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: long getExpirationTime()> -> _SINK_
<android.content.Context: int getThemeResId()> -> _SINK_
<android.view.View: float getAlpha()> -> _SINK_
<android.webkit.WebSettings: int getMinimumLogicalFontSize()> -> _SINK_
<java.util.jar.Manifest: java.util.jar.Manifest$Chunk getChunk(java.lang.String)> -> _SINK_
<com.android.launcher2.PagedView: float getScrollProgress(int,android.view.View,int)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)> -> _SINK_
<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()> -> _SINK_
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedList: java.util.List getListDelegate()> -> _SINK_
<android.media.Metadata: double getDouble(int)> -> _SINK_
<com.android.server.display.WifiDisplayController: android.hardware.display.WifiDisplay access$2200(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.widget.ExpandableListPosition: long getPackedPosition()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: gov.nist.core.NameValueList getQheaders()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints getGestureStrokeWithPreviewPoints()> -> _SINK_
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()> -> _SINK_
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> -> _SINK_
<com.android.videoeditor.OverlayType: int getType()> -> _SINK_
<android.view.View: int getSuggestedMinimumHeight()> -> _SINK_
<java.util.UUID: long getLeastSignificantBits()> -> _SINK_
<com.android.mms.model.AudioModel: java.util.Map getExtras()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509DefaultEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive getConvertedValue(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)> -> _SINK_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SINK_
<android.widget.TextView: int getMinLines()> -> _SINK_
<android.webkit.HTML5VideoViewProxy: android.content.Context getContext()> -> _SINK_
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)> -> _SINK_
<android.security.KeyStore: byte[] get(java.lang.String)> -> _SINK_
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()> -> _SINK_
<android.widget.AbsListView$RecycleBin: android.view.View getScrapView(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: int getSize()> -> _SINK_
<com.android.mms.transaction.TransactionSettings: java.lang.String getMmscUrl()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int[],int[])> -> _SINK_
<java.nio.channels.FileLock: long size()> -> _SINK_
<com.android.inputmethod.keyboard.KeyDetector: int getKeyHysteresisDistanceSquared(boolean)> -> _SINK_
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClient getWebBackForwardListClient()> -> _SINK_
<android.webkit.CallbackProxy: android.webkit.WebChromeClient getWebChromeClient()> -> _SINK_
<java.net.Socks4Message: int getCommandOrResult()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ExpiresHeader createExpiresHeader(int)> -> _SINK_
<java.nio.IntToByteBufferAdapter: int get()> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<java.io.EmulatedFields$ObjectSlot: java.io.ObjectStreamField getField()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getAccountId()> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long[] getLapTimes()> -> _SINK_
<android.widget.TextView$Marquee: float getGhostOffset()> -> _SINK_
<android.test.mock.MockContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeArgument()> -> _SINK_
<android.graphics.drawable.RotateDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: org.w3c.dom.smil.ElementTime getElement()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getIntValue(java.lang.String[],java.lang.String,int)> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getAudioSamplingFrequency()> -> _SINK_
<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()> -> _SINK_
<java.util.zip.Deflater: long getBytesWritten()> -> _SINK_
<android.app.ActivityOptions: java.lang.String getPackageName()> -> _SINK_
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieAudioTrack getAudioTrack()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: android.text.style.ImageSpan getMoreChip()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> -> _SINK_
<java.net.URI: java.lang.String getRawPath()> -> _SINK_
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()> -> _SINK_
<java.net.Socket: java.net.InetAddress getLocalAddress()> -> _SINK_
<java.nio.IntBuffer: java.lang.Object array()> -> _SINK_
<android.widget.TextView: float getLineSpacingExtra()> -> _SINK_
<android.app.ContextImpl: java.io.File getCacheDir()> -> _SINK_
<org.apache.harmony.security.x509.InfoAccessSyntax$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromIntent(android.content.Intent,android.preference.PreferenceScreen)> -> _SINK_
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawVerticalTrack()> -> _SINK_
<java.lang.reflect.Constructor: int getModifiers()> -> _SINK_
<com.android.videoeditor.service.MovieEffect: java.lang.String getId()> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.google.android.gles_jni.EGLContextImpl: javax.microedition.khronos.opengles.GL getGL()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: int getHash()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()> -> _SINK_
<android.app.Activity: android.view.View getCurrentFocus()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.security.Principal getPeerPrincipal()> -> _SINK_
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap)> -> _SINK_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SINK_
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getOriginalRoot()> -> _SINK_
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()> -> _SINK_
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentPackageName()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getSubjectUniqueID()> -> _SINK_
<com.android.mms.ui.MessageListAdapter: android.database.Cursor getCursorForItem(com.android.mms.ui.MessageItem)> -> _SINK_
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.mtp.MtpObjectInfo: int getImagePixDepth()> -> _SINK_
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()> -> _SINK_
<android.view.ViewConfiguration: int getScaledScrollBarSize()> -> _SINK_
<android.text.Layout: float getSpacingMultiplier()> -> _SINK_
<java.net.URI: java.lang.String getScheme()> -> _SINK_
<android.renderscript.Type: int getCount()> -> _SINK_
<java.lang.StackTraceElement: java.lang.String getFileName()> -> _SINK_
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: char[] getAcceptedChars()> -> _SINK_
<org.apache.harmony.security.pkcs7.AuthenticatedAttributes: byte[] getEncoded()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()> -> _SINK_
<com.android.internal.policy.impl.IconUtilities: android.graphics.drawable.Drawable createIconDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: long getItemId(int)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownY(int)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownX(int)> -> _SINK_
<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)> -> _SINK_
<android.widget.LinearLayout: android.view.View getVirtualChildAt(int)> -> _SINK_
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)> -> _SINK_
<java.security.MessageDigest$MessageDigestImpl: byte[] engineDigest()> -> _SINK_
<android.os.CommonTimeConfig: java.net.InetSocketAddress getMasterElectionEndpoint()> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String getTitle()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<java.lang.Number: byte byteValue()> -> _SINK_
<com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints: int getGestureStrokeId()> -> _SINK_
<com.android.videoeditor.OverlaysAdapter: android.graphics.Bitmap loadImage(java.lang.Object)> -> _SINK_
<com.android.mms.model.MediaModel: boolean getMediaResizable()> -> _SINK_
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter$DirectoryFilter: int getLimit()> -> _SINK_
<com.android.internal.backup.LocalTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()> -> _SINK_
<java.security.Permission: java.lang.String getName()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()> -> _SINK_
<android.widget.ScrollView: int getMaxScrollAmount()> -> _SINK_
<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()> -> _SINK_
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()> -> _SINK_
<android.widget.AbsSpinner: int getChildHeight(android.view.View)> -> _SINK_
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageListFragment getMessageListFragment()> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: float getVolume()> -> _SINK_
<com.adobe.xmp.impl.QName: java.lang.String getPrefix()> -> _SINK_
<android.hardware.Camera$Parameters: int getMinExposureCompensation()> -> _SINK_
<com.android.server.sip.SipSessionGroup$MakeCallCommand: java.lang.String getSessionDescription()> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: boolean isResponseAvailable(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()> -> _SINK_
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<com.android.exchange.EasResponse: int getStatus()> -> _SINK_
<gov.nist.javax.sip.header.Subject: java.lang.String getSubject()> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getHint()> -> _SINK_
<java.util.IllegalFormatCodePointException: java.lang.String getMessage()> -> _SINK_
<android.widget.ListPopupWindow: int getSoftInputMode()> -> _SINK_
<com.google.common.collect.Sets$PowerSet$1: java.lang.Object get(int)> -> _SINK_
<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getLoadWithOverviewMode()> -> _SINK_
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()> -> _SINK_
<com.android.mms.MmsConfig: int getMinMessageCountPerThread()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.ActionProvider getActionProvider()> -> _SINK_
<android.app.DialogFragment: int getTheme()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getName()> -> _SINK_
<android.content.ClipData$Item: android.content.Intent getIntent()> -> _SINK_
<libcore.net.http.RequestHeaders: int getContentLength()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginLine()> -> _SINK_
<android.filterfw.core.GLFrame: int[] getInts()> -> _SINK_
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.util.HashMap: java.util.Iterator newKeyIterator()> -> _SINK_
<com.android.internal.util.MemInfoReader: long getFreeSize()> -> _SINK_
<android.widget.ActivityChooserModel: int getHistoryMaxSize()> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getSupportedTypes()> -> _SINK_
<android.graphics.YuvImage: int getHeight()> -> _SINK_
<java.text.Annotation: java.lang.Object getValue()> -> _SINK_
<com.android.internal.os.ProcessStats: long[] getLastCpuSpeedTimes()> -> _SINK_
<android.media.AudioTrack: int getAudioFormat()> -> _SINK_
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()> -> _SINK_
<android.media.AudioTrack: float getMinVolume()> -> _SINK_
<com.coremedia.iso.IsoFile: com.coremedia.iso.IsoFile getIsoFile()> -> _SINK_
<org.json.JSONObject: long getLong(java.lang.String)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getAllHeaders()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> -> _SINK_
<java.util.logging.Level: java.lang.String getResourceBundleName()> -> _SINK_
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)> -> _SINK_
<org.apache.http.message.BufferedHeader: org.apache.http.util.CharArrayBuffer getBuffer()> -> _SINK_
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getContentDescription()> -> _SINK_
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> -> _SINK_
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL getRenderScriptGL()> -> _SINK_
<android.preference.Preference: int getPersistedInt(int)> -> _SINK_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SINK_
<android.graphics.drawable.ScaleDrawable: int getIntrinsicWidth()> -> _SINK_
<gov.nist.javax.sip.header.From: gov.nist.core.HostPort getHostPort()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getAudioChannels()> -> _SINK_
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> -> _SINK_
<com.google.common.collect.RegularImmutableList: java.lang.Object get(int)> -> _SINK_
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SINK_
<org.apache.http.impl.conn.AbstractPooledConnAdapter: java.lang.Object getState()> -> _SINK_
<android.media.MediaRouter$RouteGroup: android.media.MediaRouter$RouteInfo getRouteAt(int)> -> _SINK_
<gov.nist.javax.sip.header.To: gov.nist.core.HostPort getHostPort()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: java.lang.String getAlertDescription()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int getSessionCacheSize()> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: java.util.List getSearchablesInGlobalSearch()> -> _SINK_
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float calcTotalWidth(java.lang.String)> -> _SINK_
<libcore.icu.CollationKeyICU: byte[] toByteArray()> -> _SINK_
<android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession(android.os.Looper)> -> _SINK_
<org.apache.harmony.security.x509.ORAddress$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()> -> _SINK_
<android.mtp.MtpObjectInfo: int getImagePixWidth()> -> _SINK_
<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)> -> _SINK_
<java.io.FileInputStream: java.io.FileDescriptor getFD()> -> _SINK_
<java.net.Socket: boolean getOOBInline()> -> _SINK_
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean)> -> _SINK_
<android.webkit.ByteArrayBuilder: int getByteSize()> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.webkit.WebHistoryItemClassic: int getId()> -> _SINK_
<android.view.KeyEvent: int getModifierMetaStateMask()> -> _SINK_
<com.android.uiautomator.core.UiDevice: android.graphics.Point getDisplaySizeDp()> -> _SINK_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)> -> _SINK_
<android.view.MotionEvent: int getFlags()> -> _SINK_
<com.android.deskclock.worldclock.WorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()> -> _SINK_
<com.android.camera.Storage: android.net.Uri addImage(android.content.ContentResolver,java.lang.String,long,android.location.Location,int,int,java.lang.String,int,int)> -> _SINK_
<java.net.InetAddress: byte[] getAddress()> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getPrefix()> -> _SINK_
<java.util.Locale: java.lang.String getISO3Language()> -> _SINK_
<gov.nist.javax.sip.address.Authority: gov.nist.javax.sip.address.UserInfo getUserInfo()> -> _SINK_
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getAlpha()> -> _SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String getRefresher()> -> _SINK_
<com.android.ex.chips.RecipientChip: com.android.ex.chips.RecipientEntry getEntry()> -> _SINK_
<com.android.mms.dom.AttrImpl: boolean getSpecified()> -> _SINK_
<com.google.common.collect.ForwardingMultiset: java.util.Set elementSet()> -> _SINK_
<android.widget.TextView: int getLeftPaddingOffset()> -> _SINK_
<java.util.jar.Manifest: java.util.Map getEntries()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardHostView: long getUserActivityTimeout()> -> _SINK_
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)> -> _SINK_
<com.android.mms.model.SlideModel: int getDuration()> -> _SINK_
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid: org.apache.harmony.security.asn1.ASN1Oid getInstance()> -> _SINK_
<java.util.EnumMap$Entry: java.lang.Enum getKey()> -> _SINK_
<gov.nist.core.Host: java.lang.String getIpAddress()> -> _SINK_
<com.android.emailcommon.mail.PackedString: java.lang.String get(java.lang.String)> -> _SINK_
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromAndroidPua(int)> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(android.accounts.Account,int,java.lang.String)> -> _SINK_
<android.view.View: int getFadeHeight(boolean)> -> _SINK_
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getIntrinsicWidth()> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: java.util.List getSpecNames()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getUserAgent()> -> _SINK_
<java.util.AbstractList: java.util.ListIterator listIterator()> -> _SINK_
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1InputStream: int getLimit()> -> _SINK_
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.ProgressBar: com.android.videoeditor.widgets.ProgressBar getProgressBar(android.content.Context)> -> _SINK_
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificSjis(char)> -> _SINK_
<gov.nist.javax.sip.header.Via: gov.nist.core.HostPort getSentBy()> -> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.X509PublicKey: java.lang.String getFormat()> -> _SINK_
<android.content.IIntentReceiver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SINK_
<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()> -> _SINK_
<android.view.Display: int getOrientation()> -> _SINK_
<org.apache.harmony.security.x501.DirectoryString$1: java.lang.Object getObjectToEncode(java.lang.Object)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1SetParser parser()> -> _SINK_
<gov.nist.javax.sip.header.To: java.lang.String getTag()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: boolean getGeneratePreview()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: byte[] toBytes()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: gov.nist.core.NameValueList getParameters()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedUpPointerId()> -> _SINK_
<java.nio.DatagramChannelImpl: java.io.FileDescriptor getFD()> -> _SINK_
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(byte[],byte[])> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle getParams()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAndroidDataDir()> -> _SINK_
<javax.obex.ClientOperation: java.lang.String getType()> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIds(android.content.ComponentName)> -> _SINK_
<android.widget.Editor$PositionListener: int getPositionX()> -> _SINK_
<android.widget.Editor$PositionListener: int getPositionY()> -> _SINK_
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: int getRemaining()> -> _SINK_
<com.android.providers.media.MediaProvider: int getDatabaseVersion(android.content.Context)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getLastHeader(java.lang.String)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)> -> _SINK_
<com.android.camera.CameraSettings: int getMaxVideoDuration(android.content.Context)> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: int getStrength()> -> _SINK_
<android.filterfw.core.ShaderProgram: android.filterfw.core.GLEnvironment getGLEnvironment()> -> _SINK_
<android.text.Layout: int getLineVisibleEnd(int)> -> _SINK_
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()> -> _SINK_
<android.support.v4.view.MotionEventCompat: int getPointerId(android.view.MotionEvent,int)> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.util.Date getSentDate()> -> _SINK_
<android.widget.CursorTreeAdapter: int getGroupCount()> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()> -> _SINK_
<android.filterfw.core.InputPort: android.filterfw.core.OutputPort getSourcePort()> -> _SINK_
<android.webkit.ZoomManager: float getScale()> -> _SINK_
<org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)> -> _SINK_
<android.widget.TextView: android.text.method.WordIterator getWordIterator()> -> _SINK_
<android.webkit.HTML5VideoView: int getCurrentPosition()> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription getFirstTask()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getStandardFontFamily()> -> _SINK_
<android.media.videoeditor.VideoEditorProfile: int getExportProfile(int)> -> _SINK_
<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()> -> _SINK_
<android.preference.PreferenceGroupAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.internal.content.PackageHelper: java.lang.String getSdFilesystem(java.lang.String)> -> _SINK_
<android.view.View: int getHeight()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getPeerProtocol()> -> _SINK_
<android.graphics.BitmapRegionDecoder: int getWidth()> -> _SINK_
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()> -> _SINK_
<android.media.videoeditor.VideoEditorProfile: int getExportLevel(int)> -> _SINK_
<android.app.Fragment: boolean getUserVisibleHint()> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(android.view.MotionEvent)> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getPropName()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()> -> _SINK_
<android.text.Layout: int getOffsetToRightOf(int)> -> _SINK_
<org.apache.http.message.BasicNameValuePair: java.lang.String getName()> -> _SINK_
<android.support.v4.view.PagerAdapter: android.os.Parcelable saveState()> -> _SINK_
<android.util.EventLog$Event: int getTag()> -> _SINK_
<java.text.FieldPosition: int getEndIndex()> -> _SINK_
<android.content.pm.IPackageStatsObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.server.pm.PackageVerificationState: com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getFps()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> -> _SINK_
<android.widget.ExpandableListConnector: android.widget.Filter getFilter()> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String[] processName(java.lang.String,boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getCNonce()> -> _SINK_
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.MediaInformationBox getMediaInformationBox()> -> _SINK_
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor buildGalResultCursor(java.lang.String[],com.android.exchange.provider.GalResult)> -> _SINK_
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)> -> _SINK_
<org.apache.harmony.security.x509.ExtendedKeyUsage: byte[] getEncoded()> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)> -> _SINK_
<android.content.pm.PackageParser$Component: android.content.ComponentName getComponentName()> -> _SINK_
<android.app.SharedPreferencesImpl: int getInt(java.lang.String,int)> -> _SINK_
<com.android.email.mail.transport.DiscourseLogger: java.lang.String[] getLines()> -> _SINK_
<android.content.Intent: int getIntExtra(java.lang.String,int)> -> _SINK_
<javax.crypto.KeyAgreement: byte[] generateSecret()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTime()> -> _SINK_
<com.android.email.activity.MoveMessageToDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.MessageChannel getResponseChannel()> -> _SINK_
<java.net.PlainSocketImpl: java.io.InputStream getInputStream()> -> _SINK_
<android.os.IUpdateLock$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getScaledHeight()> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int,int)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getAccountDisplayName()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$MmsRecycler getMmsRecycler()> -> _SINK_
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)> -> _SINK_
<java.util.logging.Handler: java.util.logging.Level getLevel()> -> _SINK_
<java.net.SocketPermission: java.lang.String getActions()> -> _SINK_
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getMethod()> -> _SINK_
<gov.nist.javax.sip.header.AllowList: java.util.ListIterator getMethods()> -> _SINK_
<android.filterfw.core.KeyValueMap: java.lang.String getString(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Provider)> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: int getViewIndex(int)> -> _SINK_
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()> -> _SINK_
<gov.nist.javax.sip.header.ExtensionHeaderImpl: java.lang.String getHeaderValue()> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Folder$OpenMode getMode()> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getIdAttribute()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getIntegrityProtected()> -> _SINK_
<android.view.IWindow$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: byte[] getMacTag()> -> _SINK_
<java.nio.DirectByteBuffer: char getChar()> -> _SINK_
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstanceIfPrimary()> -> _SINK_
<gov.nist.javax.sip.header.CallInfo: java.lang.String getPurpose()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getType()> -> _SINK_
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)> -> _SINK_
<android.hardware.Camera$Parameters: float getFocalLength()> -> _SINK_
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)> -> _SINK_
<libcore.io.DropBox: libcore.io.DropBox$Reporter getReporter()> -> _SINK_
<com.android.deskclock.TimerSetupView: int getLayoutId()> -> _SINK_
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier()> -> _SINK_
<android.text.StaticLayout: int getLineForVertical(int)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> -> _SINK_
<java.io.EmulatedFields: long get(java.lang.String,long)> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getUserAtHostPort()> -> _SINK_
<java.lang.UnsafeByteSequence: byte[] toByteArray()> -> _SINK_
<android.widget.Spinner$DialogPopup: int getHorizontalOffset()> -> _SINK_
<android.animation.ValueAnimator: float getDurationScale()> -> _SINK_
<android.hardware.Sensor: java.lang.String getName()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getMinute()> -> _SINK_
<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getAuthType(boolean)> -> _SINK_
<com.android.phone.PhoneUtils: java.lang.CharSequence getProviderLabel(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$MyAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.webkit.CookieManagerClassic: java.lang.String getCookie(android.net.WebAddress)> -> _SINK_
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> -> _SINK_
<com.android.server.pm.Settings: java.util.ArrayList getListOfIncompleteInstallPackagesLPr()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getTimelineDuration()> -> _SINK_
<java.io.ObjectStreamClass: long getConstructor()> -> _SINK_
<android.view.ScaleGestureDetector: float getPreviousSpan()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object getMultiParameterValue(java.lang.String)> -> _SINK_
<com.android.email.Preferences: long getLastUsedAccountId()> -> _SINK_
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.HandlerBox getHandlerBox()> -> _SINK_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)> -> _SINK_
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)> -> _SINK_
<com.android.commands.monkey.MonkeySourceScript: com.android.commands.monkey.MonkeyEvent getNextEvent()> -> _SINK_
<com.android.inputmethod.latin.VibratorUtils: com.android.inputmethod.latin.VibratorUtils getInstance(android.content.Context)> -> _SINK_
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)> -> _SINK_
<com.coremedia.iso.boxes.DataEntryUrlBox: long getContentSize()> -> _SINK_
<java.util.regex.PatternSyntaxException: java.lang.String getMessage()> -> _SINK_
<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()> -> _SINK_
<java.util.zip.Deflater: int getTotalOut()> -> _SINK_
<com.android.wallpaper.galaxy.ScriptField_Particle: android.renderscript.Element createElement(android.renderscript.RenderScript)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> -> _SINK_
<java.net.URISyntaxException: java.lang.String getInput()> -> _SINK_
<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()> -> _SINK_
<android.media.videoeditor.MediaItem: int getRenderingMode()> -> _SINK_
<com.android.phone.PhoneUtils: java.lang.String getCompactNameFromCallerInfo(com.android.internal.telephony.CallerInfo,android.content.Context)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<android.view.GLES20Canvas: int getMaximumBitmapHeight()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(java.lang.Object)> -> _SINK_
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)> -> _SINK_
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<android.app.SearchableInfo: int getVoiceLanguageId()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: android.graphics.Rect getBoundingRect()> -> _SINK_
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<gov.nist.javax.sip.header.Protocol: java.lang.String getTransport()> -> _SINK_
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<gov.nist.core.NameValueList: gov.nist.core.NameValue get(java.lang.Object)> -> _SINK_
<org.apache.harmony.security.x509.OtherName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.widget.TextView: int getExtendedPaddingTop()> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: int getDeltaSeconds()> -> _SINK_
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.widget.TextView: int getFadeHeight(boolean)> -> _SINK_
<android.mtp.MtpStorage: java.lang.String getPath()> -> _SINK_
<android.media.videoeditor.Transition: long getDuration()> -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: java.lang.String getString()> -> _SINK_
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SINK_
<android.view.ViewConfiguration: int getScaledOverscrollDistance()> -> _SINK_
<org.kxml2.io.KXmlParser: int getDepth()> -> _SINK_
<com.android.internal.database.SortCursor: long getLong(int)> -> _SINK_
<android.app.ContextImpl: int getThemeResId()> -> _SINK_
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()> -> _SINK_
<android.os.storage.IMountShutdownObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> -> _SINK_
<android.view.IRotationWatcher$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.BackStackRecord: int getTransitionStyle()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()> -> _SINK_
<java.nio.DirectByteBuffer: byte get(int)> -> _SINK_
<android.view.MotionEvent: int getAction()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getScheme()> -> _SINK_
<android.view.View: android.view.animation.Animation getAnimation()> -> _SINK_
<android.widget.AccessibilityIterators$LineTextSegmentIterator: android.widget.AccessibilityIterators$LineTextSegmentIterator getInstance()> -> _SINK_
<com.android.videoeditor.util.FileUtils: java.lang.String getAudioTrackFilename(android.content.Context,int)> -> _SINK_
<android.webkit.WebSettings: int getDefaultFixedFontSize()> -> _SINK_
<libcore.net.http.RawHeaders: int getHttpMinorVersion()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getDay()> -> _SINK_
<com.android.server.sip.SipSessionGroup: com.android.server.sip.SipSessionGroup$SipSessionImpl access$400(com.android.server.sip.SipSessionGroup,javax.sip.RequestEvent,android.net.sip.ISipSessionListener,javax.sip.ServerTransaction,int)> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)> -> _SINK_
<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.phone.Ticker: java.util.ArrayList access$200(com.android.systemui.statusbar.phone.Ticker)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: int getViaPort()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: int getTitleMode()> -> _SINK_
<com.android.camera.ListPreference: java.lang.String getKey()> -> _SINK_
<org.apache.http.message.BasicHeader: org.apache.http.HeaderElement[] getElements()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarFile getJarFile()> -> _SINK_
<gov.nist.javax.sip.header.CSeq: java.lang.String getMethod()> -> _SINK_
<android.view.GLES20Canvas: int getMaximumBitmapWidth()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.hardware.display.WifiDisplayStatus: int getScanState()> -> _SINK_
<android.view.ViewRootImpl: int getHostVisibility()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getVideoType()> -> _SINK_
<com.android.systemui.statusbar.policy.DateView: int getSuggestedMinimumWidth()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportHeight()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemRenderingMode(int)> -> _SINK_
<android.media.AudioManager: boolean isMusicActive()> -> _SINK_
<gov.nist.javax.sip.header.Reason: int getCause()> -> _SINK_
<android.text.BoringLayout: int getEllipsisStart(int)> -> _SINK_
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SINK_
<android.widget.ScrollBarDrawable: int getOpacity()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getUseWebViewBackgroundForOverscrollBackground()> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$MailboxPickerLoader: android.database.Cursor loadInBackground()> -> _SINK_
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getScaledWidth()> -> _SINK_
<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaItem: android.graphics.Bitmap[] getThumbnailList(int,int,long,long,int)> -> _SINK_
<com.android.launcher2.CellLayout: com.android.launcher2.CellLayout$CellInfo getTag()> -> _SINK_
<android.app.INotificationManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Any: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)> -> _SINK_
<android.preference.PreferenceGroup: int getPreferenceCount()> -> _SINK_
<com.android.camera.CameraScreenNail: int getUncroppedRenderHeight()> -> _SINK_
<android.speech.tts.BlockingAudioTrack: long getAudioLengthMs(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLanguageHeader getContentLanguage()> -> _SINK_
<com.google.common.collect.Multimaps$MapMultimap$AsMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.app.UiModeManager: int getNightMode()> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> -> _SINK_
<java.net.HttpURLConnection: java.security.Permission getPermission()> -> _SINK_
<android.media.videoeditor.WaveformData: int getFramesCount()> -> _SINK_
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)> -> _SINK_
<android.view.animation.AnimationSet: long getDuration()> -> _SINK_
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup,android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()> -> _SINK_
<org.apache.harmony.security.x509.DistributionPointName$1: java.lang.Object getObjectToEncode(java.lang.Object)> -> _SINK_
<com.android.camera.FocusOverlayManager: java.lang.String getFocusMode()> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: int getLineNumber()> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getTextForAccessibility()> -> _SINK_
<org.apache.http.message.BasicHeaderElement: java.lang.String getValue()> -> _SINK_
<android.hardware.input.KeyboardLayout: java.lang.String getCollection()> -> _SINK_
<android.content.Intent: int getFlags()> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)> -> _SINK_
<android.widget.Switch: android.graphics.drawable.Drawable getTrackDrawable()> -> _SINK_
<org.apache.http.client.methods.HttpHead: java.lang.String getMethod()> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperInfo getWallpaperInfo()> -> _SINK_
<gov.nist.core.HostPort: java.net.InetAddress getInetAddress()> -> _SINK_
<com.android.commands.monkey.MonkeyMotionEvent: boolean getIntermediateNote()> -> _SINK_
<gov.nist.javax.sip.header.Via: gov.nist.core.NameValueList getViaParms()> -> _SINK_
<android.content.BroadcastReceiver: int getResultCode()> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])> -> _SINK_
<java.net.SocketImpl: int getPort()> -> _SINK_
<android.os.Environment: java.io.File getDownloadCacheDirectory()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -> _SINK_
<android.app.Dialog: android.app.Activity getOwnerActivity()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.google.common.collect.Multimaps$CustomListMultimap: java.util.Collection createCollection()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getSelectedAlarmsArray()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: int getNonceCount()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: long getAccountId(int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getLastMediaItem()> -> _SINK_
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper$Version: android.media.videoeditor.MediaArtistNativeHelper$Version getVersion()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase()> -> _SINK_
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()> -> _SINK_
<android.widget.TextView: int getBaseline()> -> _SINK_
<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence getAutoCorrectionOrNull()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedRegions()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: java.util.Comparator unsafeComparator()> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SINK_
<com.android.mms.model.MediaModel: com.android.mms.model.MediaModel$MediaAction getCurrentAction()> -> _SINK_
<android.app.ContextImpl: java.io.File getObbDir()> -> _SINK_
<android.app.Activity: android.app.FragmentManager getFragmentManager()> -> _SINK_
<java.text.StringCharacterIterator: int getBeginIndex()> -> _SINK_
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()> -> _SINK_
<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.media.videoeditor.AudioTrack: int getVolume()> -> _SINK_
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getNamespace()> -> _SINK_
<android.content.BroadcastReceiver: boolean getDebugUnregister()> -> _SINK_
<android.preference.Preference: long getPersistedLong(long)> -> _SINK_
<java.security.SecureRandom: byte[] getSeed(int)> -> _SINK_
<java.net.MulticastSocket: int getTimeToLive()> -> _SINK_
<android.text.StaticLayout: int getLineTop(int)> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()> -> _SINK_
<android.hardware.usb.UsbInterface: int getInterfaceClass()> -> _SINK_
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameter(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()> -> _SINK_
<java.util.EnumMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.preference.Preference: java.lang.CharSequence getSummary()> -> _SINK_
<android.provider.Settings$Global: java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)> -> _SINK_
<com.android.internal.database.SortCursor: int getInt(int)> -> _SINK_
<android.view.KeyEvent: long getEventTime()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.AlertDialog: android.widget.ListView getListView()> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedList: java.lang.Object get(int)> -> _SINK_
<android.view.LayoutInflater: android.view.View createViewFromTag(android.view.View,java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.graphics.Paint: float getFontSpacing()> -> _SINK_
<android.media.ExifInterface: long getDateTime()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientEntry access$2300(com.android.ex.chips.RecipientEditTextView,com.android.ex.chips.RecipientEntry)> -> _SINK_
<java.util.logging.Level: java.lang.String getLocalizedName()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getBlockNetworkImage()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<android.widget.Editor: android.widget.Editor$InsertionPointCursorController getInsertionController()> -> _SINK_
<android.view.View: int getNextFocusRightId()> -> _SINK_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<javax.crypto.Cipher: java.lang.String getAlgorithm()> -> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1Encodable getParameters()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()> -> _SINK_
<android.webkit.WebHistoryItemClassic: java.lang.Object getCustomData()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getVolume()> -> _SINK_
<java.net.URLConnection: java.lang.Object getContent()> -> _SINK_
<android.view.GLES20Canvas: int getRenderer()> -> _SINK_
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.lang.String getType()> -> _SINK_
<android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])> -> _SINK_
<com.android.server.am.BroadcastQueue: com.android.server.am.BroadcastRecord getMatchingOrderedReceiver(android.os.IBinder)> -> _SINK_
<android.media.videoeditor.MediaImageItem: android.graphics.Bitmap getThumbnail(int,int,long)> -> _SINK_
<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: byte[] getContents()> -> _SINK_
<android.view.KeyEvent: long getDownTime()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: int getTotalPhotos()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: int getViaPort()> -> _SINK_
<android.content.Intent: android.content.Intent getSelector()> -> _SINK_
<java.security.SecureRandom: java.security.Provider getProvider()> -> _SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineDoFinal(byte[],int,int)> -> _SINK_
<java.security.BasicPermission: java.lang.String getActions()> -> _SINK_
<android.webkit.WebView: android.webkit.PluginList getPluginList()> -> _SINK_
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> -> _SINK_
<java.nio.ShortArrayBuffer: short get()> -> _SINK_
<android.media.videoeditor.AudioTrack: long getStartTime()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<android.os.UserManager: int getUserHandle(int)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getLocalName(int)> -> _SINK_
<java.lang.RealToString: java.lang.RealToString getInstance()> -> _SINK_
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()> -> _SINK_
<android.app.ActivityManager$TaskThumbnails: android.graphics.Bitmap getSubThumbnail(int)> -> _SINK_
<android.util.XmlPullAttributes: int getAttributeCount()> -> _SINK_
<java.io.FilePermission: java.lang.String getActions()> -> _SINK_
<android.view.View: float getLeftFadingEdgeStrength()> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.String getClassSignatureAttribute(java.lang.Class)> -> _SINK_
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getNamespacePrefix(int)> -> _SINK_
<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()> -> _SINK_
<java.net.URLConnection: java.util.Map getRequestProperties()> -> _SINK_
<java.util.EnumMap$Entry: java.lang.Object getValue()> -> _SINK_
<com.android.camera.FocusOverlayManager: boolean getAeAwbLock()> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: java.lang.String getSlot(int)> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getClassAttribute()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()> -> _SINK_
<java.text.ChoiceFormat: java.lang.Object[] getFormats()> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getHost()> -> _SINK_
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: long get()> -> _SINK_
<android.app.ContextImpl: android.content.res.Resources getResources()> -> _SINK_
<android.widget.TimePicker$SavedState: int getMinute()> -> _SINK_
<android.os.Build: java.lang.String getRadioVersion()> -> _SINK_
<com.android.internal.app.IUsageStats$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostString()> -> _SINK_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)> -> _SINK_
<com.android.internal.util.StateMachine$LogRecords: com.android.internal.util.StateMachine$LogRec get(int)> -> _SINK_
<gov.nist.core.GenericObject: java.lang.String getIndentation()> -> _SINK_
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()> -> _SINK_
<android.widget.LinearLayout: int getBaseline()> -> _SINK_
<android.webkit.ZoomManager: float getZoomOverviewScale()> -> _SINK_
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo get()> -> _SINK_
<android.widget.CursorAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()> -> _SINK_
<android.webkit.WebHistoryItem: java.lang.String getUrl()> -> _SINK_
<android.animation.ValueAnimator: long getDuration()> -> _SINK_
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getCompositionTimeEntries()> -> _SINK_
<android.widget.GridLayout: int getOrientation()> -> _SINK_
<libcore.io.ForwardingOs: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)> -> _SINK_
<android.view.View: android.os.IBinder getWindowToken()> -> _SINK_
<android.filterfw.core.FrameFormat: int getTarget()> -> _SINK_
<android.widget.CursorTreeAdapter: long getGroupId(int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getActivePhoneType()> -> _SINK_
<android.media.MediaRouter: int getCategoryCount()> -> _SINK_
<java.lang.Enum: java.lang.Class getDeclaringClass()> -> _SINK_
<android.widget.RelativeLayout$LayoutParams: int[] getRules(int)> -> _SINK_
<android.text.PackedObjectVector: java.lang.Object getValue(int,int)> -> _SINK_
<java.lang.Thread: int getPriority()> -> _SINK_
<android.webkit.CallbackProxy: android.webkit.WebViewClient getWebViewClient()> -> _SINK_
<android.view.View: int getRawTextAlignment()> -> _SINK_
<android.view.VelocityTracker$Estimator: float getXCoeff(int)> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request,javax.sip.header.ContentTypeHeader,java.lang.Object)> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs()> -> _SINK_
<java.util.zip.CRC32: long getValue()> -> _SINK_
<com.android.server.NativeDaemonConnectorException: int getCode()> -> _SINK_
<android.text.format.DateUtils: java.lang.String getStandaloneMonthString(int,int)> -> _SINK_
<org.apache.james.mime4j.field.address.DomainList: java.lang.String get(int)> -> _SINK_
<android.filterpacks.imageproc.FixedRotationFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()> -> _SINK_
<java.lang.System: java.lang.String getProperty(java.lang.String)> -> _SINK_
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic: int getContentWidth()> -> _SINK_
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$Settings getProperties()> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: double get(int)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String)> -> _SINK_
<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()> -> _SINK_
<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getChildWidth(int)> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: android.os.Bundle getDefaultOptionsForWidget(com.android.launcher2.Launcher,com.android.launcher2.PendingAddWidgetInfo)> -> _SINK_
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> -> _SINK_
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.CharacterStyle getUnderlying()> -> _SINK_
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getRootNode()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFrom()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: int getHash()> -> _SINK_
<android.filterfw.core.GLFrameTimer: android.filterfw.core.StopWatchMap get()> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.camera.ActivityBase: android.content.Intent getResultData()> -> _SINK_
<android.content.res.Resources: android.graphics.Movie getMovie(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.Object getTag()> -> _SINK_
<android.app.ActivityOptions: int getAnimationType()> -> _SINK_
<java.lang.Class: java.lang.reflect.Field[] getFields()> -> _SINK_
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String getApplicationIdentifiers()> -> _SINK_
<java.net.URLConnection: java.net.URL getURL()> -> _SINK_
<android.appwidget.AppWidgetHostView: android.view.View getDefaultView()> -> _SINK_
<com.android.server.display.DisplayAdapter: android.os.Handler getHandler()> -> _SINK_
<com.android.launcher2.CellLayout$LayoutParams: int getY()> -> _SINK_
<android.app.LoadedApk: java.lang.String getAppDir()> -> _SINK_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SINK_
<com.android.launcher2.CellLayout$LayoutParams: int getX()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()> -> _SINK_
<com.android.phone.PhoneUtils: java.lang.String getInitialNumber(android.content.Intent)> -> _SINK_
<android.accounts.ChooseAccountTypeActivity$AccountArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getNextTrackId()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: double getWidth()> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getDeclaredPrefixes()> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int)> -> _SINK_
<com.android.launcher2.PagedView: float distanceInfluenceForSnapDuration(float)> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getName()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<gov.nist.javax.sip.header.ims.PMediaAuthorization: java.lang.String getToken()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> -> _SINK_
<android.widget.HeaderViewListAdapter: int getItemViewType(int)> -> _SINK_
<java.nio.IntArrayBuffer: java.nio.IntBuffer get(int[],int,int)> -> _SINK_
<java.security.Provider: java.lang.String getInfo()> -> _SINK_
<org.xml.sax.SAXException: java.lang.String getMessage()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: java.lang.String convertUriToPath(android.content.Context,android.net.Uri)> -> _SINK_
<android.app.IThumbnailRetriever$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.launcher2.PagedView$ScrollInterpolator: float getInterpolation(float)> -> _SINK_
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> -> _SINK_
<android.app.DialogFragment: boolean getShowsDialog()> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes(java.lang.Class)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableLocales()> -> _SINK_
<android.widget.Editor: android.text.method.WordIterator getWordIterator()> -> _SINK_
<android.app.ActivityManagerProxy: int getFrontActivityScreenCompatMode()> -> _SINK_
<org.apache.http.impl.cookie.AbstractCookieSpec: java.util.Collection getAttribHandlers()> -> _SINK_
<com.android.camera.ui.Switch: int getCompoundPaddingRight()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SINK_
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.telephony.IccCardConstants$State getSimState()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(gov.nist.core.HostPort,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.InputPointers: int[] getPointerIds()> -> _SINK_
<android.text.style.TextAppearanceSpan: int getTextStyle()> -> _SINK_
<com.android.email.mail.store.imap.ImapSimpleString: java.io.InputStream getAsStream()> -> _SINK_
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getSampleDependencies()> -> _SINK_
<com.android.internal.app.ResolverActivity$ResolveListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.media.MediaRouter$Static: android.view.Display[] getAllPresentationDisplays()> -> _SINK_
<com.android.inputmethod.keyboard.Key: int getDrawX()> -> _SINK_
<javax.obex.PasswordAuthentication: byte[] getUserName()> -> _SINK_
<java.nio.NioUtils: int getDirectBufferAddress(java.nio.Buffer)> -> _SINK_
<android.net.sip.SipSession: java.lang.String getLocalIp()> -> _SINK_
<android.app.WallpaperInfo: android.content.ComponentName getComponent()> -> _SINK_
<android.view.LayoutInflater: android.content.Context getContext()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: int getResourceId()> -> _SINK_
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getMaxBytesOverMobile()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: com.android.launcher2.PagedViewCellLayoutChildren getChildrenLayout()> -> _SINK_
<java.lang.reflect.Method: int getModifiers()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)> -> _SINK_
<com.android.email.MessageListContext: com.android.emailcommon.service.SearchParams getSearchParams()> -> _SINK_
<android.view.View: int getFadeTop(boolean)> -> _SINK_
<com.adobe.xmp.options.ParseOptions: int getValidOptions()> -> _SINK_
<com.android.mms.data.WorkingMessage: com.android.mms.model.SlideshowModel getSlideshow()> -> _SINK_
<com.android.mms.MmsApp: com.android.mms.util.PduLoaderManager getPduLoaderManager()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)> -> _SINK_
<dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()> -> _SINK_
<com.android.email.mail.store.ImapStore: android.content.Context getContext()> -> _SINK_
<android.text.SpannableString: int getSpanEnd(java.lang.Object)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getPhoneState()> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()> -> _SINK_
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getCurrentDropLayout()> -> _SINK_
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.AudioTrackLinearLayout getAudioTrackLayout()> -> _SINK_
<java.util.MissingFormatArgumentException: java.lang.String getMessage()> -> _SINK_
<javax.obex.ClientOperation: long getLength()> -> _SINK_
<android.graphics.Path: android.graphics.Path$FillType getFillType()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getSampleDescriptionIndex()> -> _SINK_
<java.io.EmulatedFieldsForLoading: java.lang.Object get(java.lang.String,java.lang.Object)> -> _SINK_
<android.app.Activity: android.view.WindowManager getWindowManager()> -> _SINK_
<com.android.org.bouncycastle.asn1.DEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<java.lang.reflect.Method: java.lang.Class getReturnType()> -> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: android.hardware.Camera$Parameters getParameters()> -> _SINK_
<android.widget.AbsListView: int getLeftPaddingOffset()> -> _SINK_
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)> -> _SINK_
<android.app.ActivityOptions: int getCustomExitResId()> -> _SINK_
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginColumn()> -> _SINK_
<com.android.mms.ui.UriImage: java.lang.String getContentType()> -> _SINK_
<com.android.mms.util.SmileyParser: com.android.mms.util.SmileyParser getInstance()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemFileType(int)> -> _SINK_
<com.google.common.collect.ArrayListMultimap: java.util.Collection createCollection()> -> _SINK_
<android.text.style.BackgroundColorSpan: int getSpanTypeId()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<javax.net.SocketFactory: javax.net.SocketFactory getDefault()> -> _SINK_
<android.text.SpannedString: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String encode()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getEras()> -> _SINK_
<com.android.launcher2.PagedView: int getAssociatedUpperPageBound(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.filterfw.core.GraphRunner: android.filterfw.core.FilterContext getContext()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getRemoteTarget()> -> _SINK_
<android.view.View: int getHorizontalScrollbarHeight()> -> _SINK_
<android.mtp.MtpPropertyGroup: android.mtp.MtpPropertyList getPropertyList(int,int,int)> -> _SINK_
<android.media.videoeditor.AudioTrack: long getTimelineDuration()> -> _SINK_
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> -> _SINK_
<android.view.View: float getBottomFadingEdgeStrength()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)> -> _SINK_
<android.widget.AbsListView: int getListPaddingTop()> -> _SINK_
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.security.cert.Certificate: java.lang.String getType()> -> _SINK_
<java.net.DefaultFileNameMap: java.lang.String getContentTypeFor(java.lang.String)> -> _SINK_
<com.android.email.activity.UIControllerOnePane: long getUIAccountId()> -> _SINK_
<java.util.Hashtable$HashtableEntry: java.lang.Object getValue()> -> _SINK_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()> -> _SINK_
<android.widget.TextView: int getCurrentHintTextColor()> -> _SINK_
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadHoldCount()> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)> -> _SINK_
<javax.xml.validation.ValidatorHandler: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getCursiveFontFamily()> -> _SINK_
<android.view.View: float getRotation()> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: byte[] getByteArray()> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: java.lang.String getPrimaryAccount()> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getPositionForSection(int)> -> _SINK_
<com.android.camera.ui.PieItem: float getStartAngle()> -> _SINK_
<android.view.View: int getTextAlignment()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: int getEndConstraints()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getCannonicalName(java.lang.String)> -> _SINK_
<android.view.KeyEvent: int getRepeatCount()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()> -> _SINK_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)> -> _SINK_
<android.view.View: android.view.HardwareLayer getHardwareLayer()> -> _SINK_
<libcore.io.ForwardingOs: libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> -> _SINK_
<com.android.email.RecipientAdapter: int getDefaultPhotoResource()> -> _SINK_
<com.google.common.collect.ImmutableSet$TransformedImmutableSet$1: java.lang.Object get(int)> -> _SINK_
<android.text.method.TextKeyListener$NullKeyListener: android.text.method.TextKeyListener$NullKeyListener getInstance()> -> _SINK_
<android.view.inputmethod.CompletionInfo: long getId()> -> _SINK_
<java.nio.charset.Charset: java.lang.String name()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()> -> _SINK_
<com.android.mms.MmsConfig: int getAliasMinChars()> -> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)> -> _SINK_
<android.widget.Switch: int getThumbTextPadding()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int)> -> _SINK_
<android.view.View: int getWidth()> -> _SINK_
<javax.obex.ServerOperation: int getHeaderLength()> -> _SINK_
<android.view.Display: int getType()> -> _SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineUpdate(byte[],int,int)> -> _SINK_
<javax.crypto.Cipher: int getBlockSize()> -> _SINK_
<android.os.CommonTimeConfig: int getPanicThreshold()> -> _SINK_
<java.lang.Package: java.lang.String getImplementationVersion()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getEffectSettings(android.media.videoeditor.EffectColor)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation getOrientation()> -> _SINK_
<android.preference.DialogPreference: android.app.Dialog getDialog()> -> _SINK_
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()> -> _SINK_
<com.coremedia.iso.boxes.MediaInformationBox: com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()> -> _SINK_
<com.android.launcher2.InterruptibleInOutAnimator: java.lang.Object getTag()> -> _SINK_
<com.adobe.xmp.options.ParseOptions: boolean getRequireXMPMeta()> -> _SINK_
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)> -> _SINK_
<android.text.style.RelativeSizeSpan: int getSpanTypeId()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier[] getAttributeTypes()> -> _SINK_
<android.widget.NumberPicker: android.widget.NumberPicker$Formatter getTwoDigitFormatter()> -> _SINK_
<android.widget.Toast: int getYOffset()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)> -> _SINK_
<android.app.BackStackRecord: java.lang.String getName()> -> _SINK_
<android.hardware.Camera$Parameters: int getExposureCompensation()> -> _SINK_
<android.filterpacks.performance.Throughput: int getTotalFrameCount()> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getAssistIntent(int)> -> _SINK_
<gov.nist.javax.sip.header.RAck: long getRSequenceNumber()> -> _SINK_
<android.view.ViewGroup: int getDescendantFocusability()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<java.net.URLConnection: java.lang.String toString()> -> _SINK_
<com.android.launcher2.LauncherModel: int getCellCountX()> -> _SINK_
<com.android.launcher2.LauncherModel: int getCellCountY()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: int getLength()> -> _SINK_
<javax.sip.RequestEvent: javax.sip.ServerTransaction getServerTransaction()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SINK_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()> -> _SINK_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()> -> _SINK_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()> -> _SINK_
<android.widget.Editor$ActionPopupWindow: int getVerticalLocalPosition(int)> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()> -> _SINK_
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()> -> _SINK_
<android.text.style.SuggestionRangeSpan: int getSpanTypeId()> -> _SINK_
<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.Header getVersionHeader()> -> _SINK_
<android.app.ContextImpl: android.content.ContentResolver getContentResolver()> -> _SINK_
<android.text.BoringLayout: float getLineMax(int)> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownAnchor()> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> -> _SINK_
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: int getGroupId()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getLineInstance()> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: int getVerticalFadingEdgeLength()> -> _SINK_
<com.android.inputmethod.latin.InputPointers: int[] getXCoordinates()> -> _SINK_
<android.view.ViewConfiguration: int getPressedStateDuration()> -> _SINK_
<com.android.exchange.adapter.Search$SearchParser: int getTotalResults()> -> _SINK_
<java.util.Locale: java.util.Locale getDefault()> -> _SINK_
<android.os.UserManager: int getMaxSupportedUsers()> -> _SINK_
<android.media.audiofx.PresetReverb: short getPreset()> -> _SINK_
<java.nio.charset.UnmappableCharacterException: int getInputLength()> -> _SINK_
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getIfModifiedSince()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.view.View,boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> -> _SINK_
<org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)> -> _SINK_
<android.widget.AbsListView: int getHeaderViewsCount()> -> _SINK_
<gov.nist.javax.sip.header.ContentType: java.lang.String getMediaSubType()> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: int getRemotePort()> -> _SINK_
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> -> _SINK_
<javax.security.cert.X509Certificate$1: java.util.Date getNotBefore()> -> _SINK_
<android.media.audiofx.Equalizer: short getBandLevel(short)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()> -> _SINK_
<android.media.videoeditor.VideoEditorProfile: android.media.videoeditor.VideoEditorProfile get()> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()> -> _SINK_
<java.math.BigInteger: java.math.BigInt getBigInt()> -> _SINK_
<android.app.ActivityManagerProxy: long[] getProcessPss(int[])> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getFromTag()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int getWaitQueueLength()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getId()> -> _SINK_
<android.media.AudioTrack: int getPositionNotificationPeriod()> -> _SINK_
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> -> _SINK_
<com.google.android.gms.common.ConnectionResult: int getErrorCode()> -> _SINK_
<android.content.res.TypedArray: float getFloat(int,float)> -> _SINK_
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstBalancePolicy getBalancePolicy()> -> _SINK_
<com.android.ex.chips.RecipientChip: long getContactId()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: long getBoundaryBeginTime()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> -> _SINK_
<com.google.common.collect.ForwardingMultiset: int count(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.ContentLanguage: java.lang.String getLanguageTag()> -> _SINK_
<android.media.ExifInterface: long getGpsDateTime()> -> _SINK_
<android.view.ViewConfiguration: int getHoverTapSlop()> -> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<java.util.ResourceBundle$Control: java.util.ResourceBundle$Control getControl(java.util.List)> -> _SINK_
<java.util.logging.Logger: java.util.logging.Filter getFilter()> -> _SINK_
<android.webkit.WebViewClassic: int getContentHeight()> -> _SINK_
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> -> _SINK_
<com.android.launcher2.FolderIcon: com.android.launcher2.Folder getFolder()> -> _SINK_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()> -> _SINK_
<java.io.File: long getFreeSpace()> -> _SINK_
<android.mtp.MtpObjectInfo: int getCompressedSize()> -> _SINK_
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()> -> _SINK_
<org.apache.harmony.security.x509.GeneralName$1: java.lang.Object getObjectToEncode(java.lang.Object)> -> _SINK_
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder()> -> _SINK_
<com.android.internal.widget.ActionBarView: android.view.View getCustomNavigationView()> -> _SINK_
<com.google.common.collect.ForwardingConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> -> _SINK_
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()> -> _SINK_
<android.filterfw.core.FrameFormat: int getHeight()> -> _SINK_
<android.view.View: android.view.ViewParent getParentForAccessibility()> -> _SINK_
<android.widget.AbsListView: int getTopPaddingOffset()> -> _SINK_
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: int getMessageCount()> -> _SINK_
<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()> -> _SINK_
<com.android.server.wm.DisplayContent: android.view.Display getDisplay()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Object: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()> -> _SINK_
<com.android.internal.util.StateMachine: java.lang.String getLogRecString(android.os.Message)> -> _SINK_
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getAccountName()> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Element getElementById(java.lang.String)> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String)> -> _SINK_
<android.widget.TabHost$IntentContentStrategy: android.view.View getContentView()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getAttributeResourceValue(int,int)> -> _SINK_
<com.android.systemui.recent.TaskDescription: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getOriginalText()> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String getUrl()> -> _SINK_
<android.app.IThumbnailRetriever$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.camera.CameraSettings: java.lang.String getDefaultVideoQuality(int,java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: byte[] getEncoded()> -> _SINK_
<android.graphics.drawable.DrawableContainer: android.graphics.Insets getLayoutInsets()> -> _SINK_
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> -> _SINK_
<android.os.DropBoxManager$Entry: long getTimeMillis()> -> _SINK_
<com.android.phone.sip.SipProfileDb: java.util.List retrieveSipProfileList()> -> _SINK_
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: java.lang.Object getProvider()> -> _SINK_
<java.lang.StackTraceElement: int getLineNumber()> -> _SINK_
<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String)> -> _SINK_
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: int getIntrinsicWidth()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: java.util.Date getThisUpdate()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()> -> _SINK_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getP()> -> _SINK_
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)> -> _SINK_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()> -> _SINK_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest)> -> _SINK_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()> -> _SINK_
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getNextSibling()> -> _SINK_
<com.android.email.widget.EmailWidget: long getItemId(int)> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getSamples()> -> _SINK_
<com.android.systemui.statusbar.StatusBarIconView: android.graphics.drawable.Drawable getIcon(android.content.Context,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getItemViewType(int)> -> _SINK_
<android.media.videoeditor.Effect: long getDuration()> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()> -> _SINK_
<libcore.net.url.FtpURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAccount()> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: int getResultCode()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getShareTitle(android.content.Context)> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: java.lang.String getPath()> -> _SINK_
<android.view.Surface: int getWidth()> -> _SINK_
<java.nio.CharArrayBuffer: java.nio.CharBuffer get(char[],int,int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserAtHostPort()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<android.os.StatFs: int getBlockCount()> -> _SINK_
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()> -> _SINK_
<android.webkit.WebSettings: boolean getDisplayZoomControls()> -> _SINK_
<android.app.DialogFragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> -> _SINK_
<java.net.URLConnection: long getIfModifiedSince()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<android.webkit.WebSettingsClassic: int getMinimumFontSize()> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStorageEngine getSingleton()> -> _SINK_
<libcore.net.http.HttpEngine: javax.net.ssl.SSLSocketFactory getSslSocketFactory()> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getICIDGeneratedAt()> -> _SINK_
<com.google.android.picasastore.SystemProperties: long getLong(java.lang.String,long)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getDomain()> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl$1: float getDur()> -> _SINK_
<java.text.DateFormat$Field: int getCalendarField()> -> _SINK_
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)> -> _SINK_
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SINK_
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager,javax.sip.header.HeaderFactory)> -> _SINK_
<com.android.mms.layout.HVGALayoutParameters: int getHeight()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonySpn()> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtRawPosition(float,float)> -> _SINK_
<android.app.SearchableInfo: int getImeOptions()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getDefaultPhotoResource()> -> _SINK_
<com.android.camera.ComboPreferences: long getLong(java.lang.String,long)> -> _SINK_
<android.media.MediaPlayer: int getIntParameter(int)> -> _SINK_
<java.net.DatagramSocket: int getReceiveBufferSize()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getDefaultTargetPort()> -> _SINK_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()> -> _SINK_
<java.nio.ShortToByteBufferAdapter: short get()> -> _SINK_
<com.google.common.collect.AbstractIterator: java.lang.Object endOfData()> -> _SINK_
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getYear()> -> _SINK_
<android.widget.Editor$SelectionStartHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> -> _SINK_
<java.nio.DirectByteBuffer: long getLong(int)> -> _SINK_
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)> -> _SINK_
<com.android.camera.CameraPreference: java.lang.String getTitle()> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: int getPosition()> -> _SINK_
<android.os.RegistrantList: java.lang.Object get(int)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: android.graphics.Bitmap getUserIcon(int)> -> _SINK_
<com.android.launcher2.CellLayout$LayoutParams: int getWidth()> -> _SINK_
<org.apache.http.ProtocolVersion: java.lang.String getProtocol()> -> _SINK_
<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()> -> _SINK_
<libcore.net.http.ResponseHeaders: java.lang.String getContentEncoding()> -> _SINK_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()> -> _SINK_
<android.net.sip.SipSession: int getState()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: byte[] getNinePatchChunk()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: int getAspectRatio()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.text.style.TypefaceSpan: java.lang.String getFamily()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: int getGroupId()> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()> -> _SINK_
<android.os.storage.StorageManager: java.lang.String[] getVolumePaths()> -> _SINK_
<java.util.HashMap$HashMapEntry: java.lang.Object getKey()> -> _SINK_
<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getMaxChallengeTop()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<com.android.deskclock.Alarm: java.lang.String getLabelOrDefault(android.content.Context)> -> _SINK_
<java.util.Locale: java.lang.String getLanguage()> -> _SINK_
<android.app.ActivityManagerProxy: boolean isUserRunning(int,boolean)> -> _SINK_
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> -> _SINK_
<org.apache.http.protocol.DefaultedHttpContext: org.apache.http.protocol.HttpContext getDefaults()> -> _SINK_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getRememberedDisplays()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getDefaultSampleSize()> -> _SINK_
<libcore.util.ZoneInfoDB: java.util.TimeZone getSystemDefault()> -> _SINK_
<android.content.pm.IPackageStatsObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.AbsListView: int getListPaddingRight()> -> _SINK_
<android.preference.EditTextPreference: android.widget.EditText getEditText()> -> _SINK_
<android.mtp.MtpObjectInfo: int getThumbFormat()> -> _SINK_
<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()> -> _SINK_
<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: int getSendingUserId()> -> _SINK_
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSampleDescriptionIndex()> -> _SINK_
<gov.nist.javax.sip.header.ContentType: java.lang.String getMediaType()> -> _SINK_
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()> -> _SINK_
<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getAudioType()> -> _SINK_
<org.apache.harmony.security.x509.ExtensionValue: byte[] getEncoded()> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int[] getStorageUsers(java.lang.String)> -> _SINK_
<android.os.BatteryStats: long getRadioDataUptimeMs()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getRequestProperty(java.lang.String)> -> _SINK_
<android.widget.TextView: float getLeftFadingEdgeStrength()> -> _SINK_
<android.os.Environment: java.io.File getSystemSecureDirectory()> -> _SINK_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.pm.UserInfo getCurrentUser()> -> _SINK_
<android.os.MemoryFile: java.io.OutputStream getOutputStream()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> -> _SINK_
<java.io.ObjectStreamClass: java.util.List getHierarchy()> -> _SINK_
<java.io.InputStreamReader: java.lang.String getEncoding()> -> _SINK_
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)> -> _SINK_
<com.android.mms.ui.MessageListAdapter: int getViewTypeCount()> -> _SINK_
<android.app.DownloadManager$CursorTranslator: long getLong(int)> -> _SINK_
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getCharacterInstance(java.util.Locale)> -> _SINK_
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(android.content.ComponentName)> -> _SINK_
<com.android.launcher2.DragLayer: float getLocationInDragLayer(android.view.View,int[])> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)> -> _SINK_
<android.content.IntentSender: android.content.IIntentSender getTarget()> -> _SINK_
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)> -> _SINK_
<android.os.Bundle: double[] getDoubleArray(java.lang.String)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(java.lang.String)> -> _SINK_
<android.view.View: android.view.ViewParent getParent()> -> _SINK_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> -> _SINK_
<android.app.IUserSwitchObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<javax.crypto.Mac: int getMacLength()> -> _SINK_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()> -> _SINK_
<android.net.sip.SipSession: java.lang.String getCallId()> -> _SINK_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()> -> _SINK_
<android.view.animation.LinearInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.exchange.ExchangeService: com.android.emailcommon.provider.Account getAccountById(long)> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.Keyboard getKeyboard()> -> _SINK_
<com.android.mms.model.LayoutModel: int getLayoutWidth()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress getPeerPacketSourceAddress()> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SINK_
<org.apache.http.message.BasicStatusLine: int getStatusCode()> -> _SINK_
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.Context)> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatLocales()> -> _SINK_
<java.util.TreeMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHello: byte[] getRandom()> -> _SINK_
<android.widget.FastScroller: android.widget.SectionIndexer getSectionIndexer()> -> _SINK_
<android.widget.ScrollView: float getBottomFadingEdgeStrength()> -> _SINK_
<android.widget.AccessibilityIterators$PageTextSegmentIterator: android.widget.AccessibilityIterators$PageTextSegmentIterator getInstance()> -> _SINK_
<android.text.DynamicLayout: int getTopPadding()> -> _SINK_
<android.view.MotionEvent: int getToolType(int)> -> _SINK_
<android.view.PointerIcon$1: android.view.PointerIcon createFromParcel(android.os.Parcel)> -> _SINK_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastSystemTime()> -> _SINK_
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getCurrentItem()> -> _SINK_
<com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetPosition(int)> -> _SINK_
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> -> _SINK_
<android.filterpacks.imageproc.DrawRectFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.AbsListView: int getVerticalScrollbarWidth()> -> _SINK_
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntryValues()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getDefaultSampleSize()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getCount()> -> _SINK_
<android.text.SpannableStringBuilder: int getTextWidths(int,int,float[],android.graphics.Paint)> -> _SINK_
<android.widget.Editor$InsertionHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestPath()> -> _SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate: java.lang.String getActionName()> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getDuration()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: java.lang.String getName()> -> _SINK_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()> -> _SINK_
<android.app.WallpaperManager: int getDesiredMinimumWidth()> -> _SINK_
<android.view.MotionEvent: float getTouchMajor(int)> -> _SINK_
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)> -> _SINK_
<com.android.deskclock.Alarms: android.content.CursorLoader getAlarmsCursorLoader(android.content.Context)> -> _SINK_
<android.animation.ValueAnimator: long getStartDelay()> -> _SINK_
<gov.nist.core.DuplicateNameValueList: java.lang.Object getValue(java.lang.String)> -> _SINK_
<com.coremedia.iso.boxes.SampleSizeBox: long getContentSize()> -> _SINK_
<org.apache.http.message.BasicNameValuePair: java.lang.String getValue()> -> _SINK_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: int getLength(byte[])> -> _SINK_
<java.nio.MappedByteBufferAdapter: byte get()> -> _SINK_
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageViewFragment getMessageViewFragment()> -> _SINK_
<com.android.launcher2.DragLayer: float getDescendantRectRelativeToSelf(android.view.View,android.graphics.Rect)> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getContentFrameLw()> -> _SINK_
<java.lang.Thread: long getId()> -> _SINK_
<java.util.logging.LogRecord: java.lang.Object[] getParameters()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: int getResponseInterceptorCount()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(java.net.InetAddress,int,java.lang.String)> -> _SINK_
<java.util.logging.LogRecord: java.lang.String getMessage()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip getLastChip()> -> _SINK_
<com.android.camera.PanoramaModule: int getPreviewBufSize()> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera getCamera()> -> _SINK_
<com.coremedia.iso.boxes.SampleSizeBox: long[] getSampleSizes()> -> _SINK_
<com.android.email.widget.EmailWidgetLoader: android.database.Cursor loadInBackground()> -> _SINK_
<android.sax.Children: android.sax.Element get(java.lang.String,java.lang.String)> -> _SINK_
<android.os.IUpdateLock$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.preference.YesNoPreference: boolean getValue()> -> _SINK_
<java.net.AddressCache: java.lang.Object get(java.lang.String)> -> _SINK_
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> -> _SINK_
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()> -> _SINK_
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()> -> _SINK_
<com.android.videoeditor.service.MovieEffect: long getDuration()> -> _SINK_
<android.content.res.TypedArray: java.lang.String getNonConfigurationString(int,int)> -> _SINK_
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()> -> _SINK_
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> -> _SINK_
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: int getId()> -> _SINK_
<java.net.URLConnection: long getExpiration()> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow: int getVerticalLocalPosition(int)> -> _SINK_
<com.google.common.collect.ImmutableSet$ArrayImmutableSet: com.google.common.collect.ImmutableList createAsList()> -> _SINK_
<android.app.SearchableInfo: android.content.Context getProviderContext(android.content.Context,android.content.Context)> -> _SINK_
<android.text.Layout: float measurePara(android.text.TextPaint,java.lang.CharSequence,int,int)> -> _SINK_
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<java.util.TreeMap$BoundedMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getEncoded()> -> _SINK_
<android.os.UEventObserver: java.lang.String access$100()> -> _SINK_
<com.android.email.mail.store.Pop3Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> -> _SINK_
<java.security.Provider: java.util.Set getServices()> -> _SINK_
<android.os.Binder: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.http.params.AbstractHttpParams: long getLongParameter(java.lang.String,long)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarFile openJarFile()> -> _SINK_
<android.webkit.WebSettings: int getDefaultFontSize()> -> _SINK_
<libcore.icu.LocaleData: java.lang.String getTimeFormat(int)> -> _SINK_
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty()> -> _SINK_
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> -> _SINK_
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.Map parseChallenges(org.apache.http.Header[])> -> _SINK_
<java.security.cert.CertificateFactory: java.lang.String getType()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getPeerAddress()> -> _SINK_
<gov.nist.javax.sip.header.CSeq: int getSequenceNumber()> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()> -> _SINK_
<android.preference.PreferenceGroupAdapter: long getItemId(int)> -> _SINK_
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> -> _SINK_
<java.util.AbstractQueue: java.lang.Object remove()> -> _SINK_
<com.android.camera.ComboPreferences: android.content.SharedPreferences getGlobal()> -> _SINK_
<com.android.systemui.statusbar.phone.QuickSettingsTileView: int getColumnSpan()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getFit()> -> _SINK_
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)> -> _SINK_
<org.apache.james.mime4j.field.Field: java.lang.String getName()> -> _SINK_
<com.android.commands.monkey.MonkeyTrackballEvent: java.lang.String getTypeLabel()> -> _SINK_
<java.nio.MemoryBlock: byte[] array()> -> _SINK_
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.lang.String getChallenge()> -> _SINK_
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<java.util.AbstractList: java.util.List subList(int,int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)> -> _SINK_
<java.net.DatagramSocketImpl: int getLocalPort()> -> _SINK_
<libcore.net.url.FileURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<android.mtp.MtpStorage: long getMaxFileSize()> -> _SINK_
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<android.os.Debug: int getLoadedClassCount()> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String getPacketHeader()> -> _SINK_
<com.coremedia.iso.boxes.SyncSampleBox: long[] getSampleNumber()> -> _SINK_
<android.webkit.WebViewCore: android.webkit.WebViewInputDispatcher$WebKitCallbacks getInputDispatcherCallbacks()> -> _SINK_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERT61String: byte[] getOctets()> -> _SINK_
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoFileFormat()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getIssuer()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,javax.sip.header.ContentTypeHeader,java.lang.Object)> -> _SINK_
<android.media.videoeditor.Effect: android.media.videoeditor.MediaItem getMediaItem()> -> _SINK_
<android.content.res.Resources: int[] getIntArray(int)> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int)> -> _SINK_
<android.view.IInputFilterHost$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.dom.AttrImpl: java.lang.String getName()> -> _SINK_
<com.android.email.activity.ThreePaneLayout: int getPaneState()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getCellCountX()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getCellCountY()> -> _SINK_
<android.animation.LayoutTransition: long getStartDelay(int)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTheme getTheme(android.content.Context,java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<android.widget.GridView: int getRequestedHorizontalSpacing()> -> _SINK_
<android.view.animation.Animation: float resolveSize(int,float,int,int)> -> _SINK_
<gov.nist.javax.sip.header.NameMap: java.lang.Class getClassFromName(java.lang.String)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.CharSequence getPooledString(int)> -> _SINK_
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)> -> _SINK_
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$Viewport: android.graphics.Rect getBounds()> -> _SINK_
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.content.AbstractThreadedSyncAdapter: android.content.Context getContext()> -> _SINK_
<com.android.videoeditor.widgets.OverlayLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.RAck: int getRSeqNumber()> -> _SINK_
<com.android.mms.ui.UriImage: java.lang.String getPath()> -> _SINK_
<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getPageChildCount()> -> _SINK_
<org.apache.harmony.security.x509.CertificateIssuer: javax.security.auth.x500.X500Principal getIssuer()> -> _SINK_
<android.app.BackStackRecord: int getBreadCrumbTitleRes()> -> _SINK_
<android.view.MotionEvent: float getAxisValue(int)> -> _SINK_
<java.text.RuleBasedCollator: java.lang.String getRules()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$EntryFactory: com.google.common.collect.MapMakerInternalMap$EntryFactory getFactory(com.google.common.collect.MapMakerInternalMap$Strength,boolean,boolean)> -> _SINK_
<com.android.mms.model.RegionModel: java.lang.String getBackgroundColor()> -> _SINK_
<android.support.v13.app.FragmentPagerAdapter: long getItemId(int)> -> _SINK_
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: java.lang.Object getKey()> -> _SINK_
<android.view.KeyCharacterMap: char getMatch(int,char[])> -> _SINK_
<com.android.server.am.ActivityStack: android.graphics.Bitmap getTaskTopThumbnailLocked(com.android.server.am.TaskRecord)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader)> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(int)> -> _SINK_
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()> -> _SINK_
<com.google.common.collect.ImmutableEntry: java.lang.Object getKey()> -> _SINK_
<java.util.IllegalFormatConversionException: java.lang.String getMessage()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: int getType()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAuthTokenType()> -> _SINK_
<java.security.cert.CertStore: java.security.Provider getProvider()> -> _SINK_
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()> -> _SINK_
<com.android.email.activity.UIControllerSearchTwoPane: long getUIAccountId()> -> _SINK_
<android.widget.TwoLineListItem: android.widget.TextView getText1()> -> _SINK_
<android.widget.TwoLineListItem: android.widget.TextView getText2()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getDuckingThreshhold()> -> _SINK_
<java.text.NumberFormat: java.util.Currency getCurrency()> -> _SINK_
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<org.kxml2.io.KXmlParser: char[] getTextCharacters(int[])> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: int getFrequency()> -> _SINK_
<android.gesture.GestureStore: java.util.Set getGestureEntries()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean,java.lang.String)> -> _SINK_
<android.animation.LayoutTransition: long getDuration(int)> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getQOP()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginColumn()> -> _SINK_
<java.security.Timestamp: java.util.Date getTimestamp()> -> _SINK_
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: float getDur()> -> _SINK_
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub: android.accounts.IAccountAuthenticatorResponse asInterface(android.os.IBinder)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()> -> _SINK_
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()> -> _SINK_
<android.widget.AbsListView: int getTranscriptMode()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getDefaultProtocols()> -> _SINK_
<android.os.Debug: int getGlobalFreedCount()> -> _SINK_
<com.android.emailcommon.utility.Utility: java.lang.Long getFirstRowLong(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Long)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: int getCurrentPosition()> -> _SINK_
<android.app.SearchableInfo: int getVoicePromptTextId()> -> _SINK_
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerId(android.view.MotionEvent,int)> -> _SINK_
<java.nio.CharSequenceAdapter: java.nio.CharBuffer get(char[],int,int)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getAdjustedTime()> -> _SINK_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()> -> _SINK_
<com.android.mms.model.SlideshowModel: int getCurrentMessageSize()> -> _SINK_
<android.view.View: int getLayoutDirection()> -> _SINK_
<android.os.SystemProperties: java.lang.String get(java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERPrintableString: java.lang.String getString()> -> _SINK_
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getUseDoubleTree()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()> -> _SINK_
<android.os.storage.StorageManager: java.lang.String getVolumeState(java.lang.String)> -> _SINK_
<android.graphics.drawable.ClipDrawable: int getOpacity()> -> _SINK_
<android.graphics.Interpolator: int getKeyFrameCount()> -> _SINK_
<com.android.emailcommon.provider.EmailContent$Body: com.android.emailcommon.provider.EmailContent$Body restoreBodyWithMessageId(android.content.Context,long)> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getRemoteAddress()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestSHAwithoutLast()> -> _SINK_
<android.content.res.TypedArray: int getLayoutDimension(int,int)> -> _SINK_
<com.android.videoeditor.TransitionType: com.android.videoeditor.TransitionType[] getTransitions(android.content.Context)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseReturnType()> -> _SINK_
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()> -> _SINK_
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapSequenceValues(java.lang.String)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getPrefix(java.lang.String)> -> _SINK_
<com.android.deskclock.Alarms: boolean get24HourMode(android.content.Context)> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: android.media.videoeditor.WaveformData getWaveformData()> -> _SINK_
<java.net.NetworkInterface: int getMTU()> -> _SINK_
<android.os.Debug$MemoryInfo: int getTotalPss()> -> _SINK_
<com.android.launcher2.CellLayout: int getDesiredHeight()> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation getAllocation()> -> _SINK_
<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment getGLEnvironment()> -> _SINK_
<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()> -> _SINK_
<android.security.KeyStore: int getLastError()> -> _SINK_
<com.google.common.collect.AbstractMultiset: java.util.Set createElementSet()> -> _SINK_
<com.android.deskclock.RepeatPreference: com.android.deskclock.Alarm$DaysOfWeek getDaysOfWeek()> -> _SINK_
<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: long getExpirationTime()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getColumnNumber(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemObject: java.lang.String getType()> -> _SINK_
<android.content.ContentResolver: android.content.IContentService getContentService()> -> _SINK_
<com.android.server.wm.DragState: int getDragLayerLw()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransactionStack getStack()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getAttributes()> -> _SINK_
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> -> _SINK_
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.app.AlertDialog: android.widget.Button getButton(int)> -> _SINK_
<android.webkit.WebHistoryItemClassic: java.lang.String getTouchIconUrl()> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice getUiDevice()> -> _SINK_
<android.content.Intent: float getFloatExtra(java.lang.String,float)> -> _SINK_
<android.app.ActivityOptions: int getCustomEnterResId()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getVideoBitrate()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUser()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()> -> _SINK_
<org.apache.harmony.security.x509.PolicyInformation: byte[] getEncoded()> -> _SINK_
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String,boolean)> -> _SINK_
<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()> -> _SINK_
<android.server.search.Searchables: java.util.ArrayList getSearchablesList()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeqHeader()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Contact getContactHeader()> -> _SINK_
<org.xml.sax.SAXParseException: java.lang.String getPublicId()> -> _SINK_
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> -> _SINK_
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)> -> _SINK_
<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()> -> _SINK_
<android.widget.GridView: int getColumnWidth()> -> _SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue: org.apache.harmony.security.utils.ObjectIdentifier getType()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferMaxSize()> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: int getId()> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingPrompt()> -> _SINK_
<org.apache.harmony.security.x509.AccessDescription$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumHeight()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getDirectReference()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()> -> _SINK_
<android.widget.TextView: int getTotalPaddingStart()> -> _SINK_
<java.util.ServiceLoader: java.util.Iterator iterator()> -> _SINK_
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)> -> _SINK_
<java.util.jar.JarVerifier: java.util.Vector getSignerCertificates(java.lang.String,java.util.Map)> -> _SINK_
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> -> _SINK_
<android.view.View: int getMeasuredState()> -> _SINK_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultOutAnimation()> -> _SINK_
<com.android.mms.dom.smil.SmilElementImpl: java.lang.String getId()> -> _SINK_
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)> -> _SINK_
<com.android.deskclock.DeskClock$TabsAdapter$TabInfo: int getPosition()> -> _SINK_
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Account getAccount()> -> _SINK_
<android.widget.AdapterView: long getItemIdAtPosition(int)> -> _SINK_
<java.util.Formatter$FormatToken: java.lang.String getStrFlags()> -> _SINK_
<java.util.IllegalFormatWidthException: java.lang.String getMessage()> -> _SINK_
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getDefaultKeyCoordX()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.DisplayInfo getDisplayInfo()> -> _SINK_
<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()> -> _SINK_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getDisplayName()> -> _SINK_
<android.os.Debug: java.lang.String getCallers(int)> -> _SINK_
<android.hardware.display.WifiDisplayStatus$1: android.hardware.display.WifiDisplayStatus createFromParcel(android.os.Parcel)> -> _SINK_
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanEnd(java.lang.Object)> -> _SINK_
<com.android.launcher2.ButtonDropTarget: android.graphics.Rect getIconRect(int,int,int,int)> -> _SINK_
<com.google.common.collect.ForwardingMultiset: java.lang.String standardToString()> -> _SINK_
<android.hardware.usb.IUsbManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.net.Authenticator: int getRequestingPort()> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getDirectionDescriptionsResourceId()> -> _SINK_
<android.content.res.Resources: java.lang.String[] getStringArray(int)> -> _SINK_
<android.animation.Keyframe: java.lang.Object clone()> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ListOfTypes parseOptTypeArguments()> -> _SINK_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> -> _SINK_
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> -> _SINK_
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getMimeType()> -> _SINK_
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstNode getOriginalTarget()> -> _SINK_
<android.widget.ExpandableListConnector: int getViewTypeCount()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()> -> _SINK_
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeHeight()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getContentEncoding()> -> _SINK_
<android.app.ActivityThread: android.app.ContextImpl getSystemContext()> -> _SINK_
<com.google.common.collect.MapMaker: com.google.common.base.Ticker getTicker()> -> _SINK_
<android.widget.RemoteViewsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<gov.nist.javax.sip.address.NetObject: java.lang.String debugDump()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getContentSize()> -> _SINK_
<android.widget.Editor$SelectionModifierCursorController: int getMaxTouchOffset()> -> _SINK_
<android.hardware.SerialPort: java.lang.String getName()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getEndRect()> -> _SINK_
<android.webkit.WebViewClassic: int getBaseLayer()> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer get(double[],int,int)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getLocalName(int)> -> _SINK_
<com.android.mms.MmsConfig: int getMaxSubjectLength()> -> _SINK_
<com.android.providers.media.RingtonePickerActivity: android.database.Cursor access$200(com.android.providers.media.RingtonePickerActivity)> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.ProgramVertexFixedFunction create()> -> _SINK_
<java.nio.CharToByteBufferAdapter: char get()> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: int getPageContentWidth()> -> _SINK_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.mtp.MtpStorageInfo: long getMaxCapacity()> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.WebStorage getWebStorage()> -> _SINK_
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getStartServiceAction()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: double getHeight()> -> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)> -> _SINK_
<java.net.ServerSocket: int getLocalPort()> -> _SINK_
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SINK_
<org.apache.harmony.security.x509.InhibitAnyPolicy: byte[] getEncoded()> -> _SINK_
<com.android.deskclock.AlarmAlert: int getLayoutResId()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: long getDate()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.util.Iterator getParameterNames()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SINK_
<com.android.email.mail.Store: com.android.email.mail.Store getInstance(com.android.emailcommon.provider.Account,android.content.Context)> -> _SINK_
<libcore.net.http.RequestHeaders: libcore.net.http.RawHeaders getHeaders()> -> _SINK_
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> -> _SINK_
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)> -> _SINK_
<android.content.Intent: java.lang.Object getExtra(java.lang.String,java.lang.Object)> -> _SINK_
<android.graphics.drawable.RotateDrawable: int getIntrinsicHeight()> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String getSubserviceIdentifiers()> -> _SINK_
<android.app.SearchableInfo: int getSuggestThreshold()> -> _SINK_
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieOverlay getOverlay()> -> _SINK_
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()> -> _SINK_
<com.android.inputmethod.accessibility.AccessibilityUtils: com.android.inputmethod.accessibility.AccessibilityUtils getInstance()> -> _SINK_
<android.widget.TextView: android.text.style.URLSpan[] getUrls()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()> -> _SINK_
<android.text.format.DateUtils: java.lang.String getMonthString(int,int)> -> _SINK_
<libcore.net.http.HttpConnection: java.net.Socket getSocket()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)> -> _SINK_
<android.widget.ListPopupWindow: int getAnimationStyle()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleHasRedundancy()> -> _SINK_
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: javax.sip.header.Header getLast()> -> _SINK_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()> -> _SINK_
<android.view.animation.Animation: long getStartTime()> -> _SINK_
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()> -> _SINK_
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)> -> _SINK_
<com.android.deskclock.timer.TimerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<android.widget.TableRow: int getNextLocationOffset(android.view.View)> -> _SINK_
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)> -> _SINK_
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)> -> _SINK_
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> -> _SINK_
<android.widget.AbsListView: android.view.View obtainView(int,boolean[])> -> _SINK_
<android.app.Fragment: android.os.Bundle getArguments()> -> _SINK_
<org.apache.http.impl.cookie.CookieSpecBase: java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin)> -> _SINK_
<dalvik.system.SocketTagger: dalvik.system.SocketTagger get()> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getPlaybackType()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.view.View getContent()> -> _SINK_
<android.os.Message: long getWhen()> -> _SINK_
<gov.nist.javax.sip.header.ims.PUserDatabase: java.lang.String getDatabaseName()> -> _SINK_
<android.app.IProcessObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.deskclock.widget.multiwaveview.PointCloud$Point)> -> _SINK_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[])> -> _SINK_
<android.media.videoeditor.MediaItem: java.util.List getAllOverlays()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues()> -> _SINK_
<android.media.AudioSystem: int getNumStreamTypes()> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()> -> _SINK_
<android.os.Message: android.os.Bundle getData()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleY()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleX()> -> _SINK_
<android.view.MotionEvent: float getHistoricalTouchMajor(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object)> -> _SINK_
<com.android.mms.ui.PresenterFactory: com.android.mms.ui.Presenter getPresenter(java.lang.String,android.content.Context,com.android.mms.ui.ViewInterface,com.android.mms.model.Model)> -> _SINK_
<android.os.PowerManager: int getDefaultScreenBrightnessSetting()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ContentHandler getContentHandler()> -> _SINK_
<com.google.common.base.Optional$Present: java.lang.Object get()> -> _SINK_
<com.google.android.picasasync.PhotoCollectorJson: java.util.Map getEntryFieldMap()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: int getValidOptions()> -> _SINK_
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> -> _SINK_
<com.android.systemui.ExpandHelper$ViewScaler: float getHeight()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.lang.String getSigAlgName()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()> -> _SINK_
<android.content.res.Resources: int getDimensionPixelSize(int)> -> _SINK_
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: java.lang.String getTabTagForContentType(com.android.launcher2.AppsCustomizePagedView$ContentType)> -> _SINK_
<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> -> _SINK_
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getCollectionName()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane: int getLayoutId()> -> _SINK_
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()> -> _SINK_
<android.os.Debug: int getThreadAllocCount()> -> _SINK_
<java.lang.Math: int getExponent(float)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.android.mms.dom.smil.TimeImpl: double getOffset()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getY()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getX()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: char getNumericShortcut()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: int getDefaultTargetPort()> -> _SINK_
<android.app.PendingIntent: android.content.IIntentSender getTarget()> -> _SINK_
<org.apache.harmony.security.x509.ORAddress: byte[] getEncoded()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: java.lang.String getDescription(int)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.security.Permission getPermission()> -> _SINK_
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.util.LinkedList getMessageAsEncodedStrings()> -> _SINK_
<android.content.SyncManager: long access$3000()> -> _SINK_
<android.text.style.RelativeSizeSpan: float getSizeChange()> -> _SINK_
<android.widget.ViewAnimator: int getBaseline()> -> _SINK_
<android.view.ViewDebug: long getViewInstanceCount()> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()> -> _SINK_
<org.xml.sax.InputSource: java.lang.String getEncoding()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)> -> _SINK_
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getNeedInitialFocus()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCity()> -> _SINK_
<com.android.emailcommon.utility.EmailAsyncTask$Tracker: int getTaskCountForTest()> -> _SINK_
<android.app.Activity: android.content.ComponentName getCallingActivity()> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.lang.String)> -> _SINK_
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> -> _SINK_
<com.android.camera.Util: int[] getRelativeLocation(android.view.View,android.view.View)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayWidth(int,int,int)> -> _SINK_
<android.filterfw.core.FrameFormat: int getBaseType()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.AudioTrack getAudioTrack(java.lang.String)> -> _SINK_
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()> -> _SINK_
<android.graphics.NinePatch: int getDensity()> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: int getEntity()> -> _SINK_
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.RenderedGui getRenderedGui()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes(int)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Class getMyClass()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)> -> _SINK_
<java.security.Signature: java.lang.Object clone()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int,int[])> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getRemoteTag()> -> _SINK_
<junit.runner.BaseTestRunner: junit.runner.TestSuiteLoader getLoader()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)> -> _SINK_
<android.content.res.XmlBlock$Parser: int getDepth()> -> _SINK_
<com.android.mms.MmsApp: android.provider.SearchRecentSuggestions getRecentSuggestions()> -> _SINK_
<com.android.server.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(int)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)> -> _SINK_
<com.android.launcher2.SmoothPagedView: int getScrollMode()> -> _SINK_
<android.filterpacks.performance.Throughput: int getPeriodTime()> -> _SINK_
<android.widget.ProgressBar: int getProgress()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getFullDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)> -> _SINK_
<com.android.providers.applications.ApplicationsProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getReserved()> -> _SINK_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> -> _SINK_
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.lang.String getMimeType()> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()> -> _SINK_
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()> -> _SINK_
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()> -> _SINK_
<com.android.server.display.HeadlessDisplayAdapter$HeadlessDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> -> _SINK_
<android.preference.PreferenceManager: int getSharedPreferencesMode()> -> _SINK_
<com.google.common.collect.Maps$AbstractFilteredMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.net.DatagramPacket: int getLength()> -> _SINK_
<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputedInternal()> -> _SINK_
<java.security.AlgorithmParameters: byte[] getEncoded()> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildContentView(android.view.View)> -> _SINK_
<android.graphics.YuvImage: int[] getStrides()> -> _SINK_
<java.lang.Package: java.lang.String getImplementationVendor()> -> _SINK_
<android.widget.TextView: int getLineCount()> -> _SINK_
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo getIfNeeded()> -> _SINK_
<android.view.MotionEvent: float getY()> -> _SINK_
<android.view.MotionEvent: float getX()> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getFragmentSize(int)> -> _SINK_
<android.content.ContextWrapper: java.io.File getObbDir()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getNextSibling()> -> _SINK_
<android.media.IAudioRoutesObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.util.AbstractMap: java.util.Collection values()> -> _SINK_
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getWidth()> -> _SINK_
<android.webkit.WebSettingsClassic: int getCacheMode()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getAppTimelineDuration()> -> _SINK_
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificPua(int)> -> _SINK_
<com.coremedia.iso.IsoFile: long getSize()> -> _SINK_
<android.widget.AbsListView: int getCheckedItemCount()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getUploadUrl()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.app.ActivityManager: android.graphics.Bitmap getTaskTopThumbnail(int)> -> _SINK_
<org.apache.http.auth.AuthScope: int getPort()> -> _SINK_
<java.text.DateFormat: java.util.Date parse(java.lang.String)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getDataActivity()> -> _SINK_
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context)> -> _SINK_
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encodeBody()> -> _SINK_
<android.view.animation.Animation: int getBackgroundColor()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress getPeerInetAddress()> -> _SINK_
<java.security.KeyPair: java.security.PublicKey getPublic()> -> _SINK_
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> -> _SINK_
<android.webkit.ZoomManager: float getInvScale()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> -> _SINK_
<com.android.org.bouncycastle.asn1.LimitedInputStream: int getRemaining()> -> _SINK_
<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)> -> _SINK_
<android.text.style.QuoteSpan: int getColor()> -> _SINK_
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedUpperPageBound(int)> -> _SINK_
<android.view.DragEvent: boolean getResult()> -> _SINK_
<android.widget.ResourceCursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> -> _SINK_
<com.android.email.provider.EmailProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.internal.widget.ActionBarView: android.widget.SpinnerAdapter getDropdownAdapter()> -> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<java.net.Socket: int getReceiveBufferSize()> -> _SINK_
<com.android.email.Preferences: com.android.email.Preferences getPreferences(android.content.Context)> -> _SINK_
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getInnerRingSize()> -> _SINK_
<android.graphics.drawable.ScaleDrawable$ScaleState: int getChangingConfigurations()> -> _SINK_
<android.content.IntentFilter: int getPriority()> -> _SINK_
<com.android.providers.downloads.OpenHelper: android.content.Intent buildViewIntent(android.content.Context,long)> -> _SINK_
<java.lang.Long: java.lang.Long getLong(java.lang.String)> -> _SINK_
<android.media.audiofx.Equalizer: short getNumberOfBands()> -> _SINK_
<java.net.SocketImpl: java.net.InetAddress getInetAddress()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()> -> _SINK_
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _SINK_
<java.util.zip.Deflater: int getTotalIn()> -> _SINK_
<java.beans.IndexedPropertyChangeEvent: int getIndex()> -> _SINK_
<com.android.internal.util.State: java.lang.String getName()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)> -> _SINK_
<java.text.CollationKey: int compareTo(java.lang.Object)> -> _SINK_
<android.drm.mobile1.DrmRights: android.drm.mobile1.DrmConstraintInfo getConstraint(int)> -> _SINK_
<gov.nist.core.GenericObjectList: gov.nist.core.GenericObject next()> -> _SINK_
<android.filterfw.core.FilterPort: java.lang.String toString()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()> -> _SINK_
<java.text.StringCharacterIterator: int getEndIndex()> -> _SINK_
<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()> -> _SINK_
<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction getServerTransaction(javax.sip.RequestEvent)> -> _SINK_
<android.view.View: int getWindowAttachCount()> -> _SINK_
<com.android.emailcommon.provider.HostAuth: com.android.emailcommon.provider.HostAuth restoreHostAuthWithId(android.content.Context,long)> -> _SINK_
<com.android.email.Preferences: int getTextZoom()> -> _SINK_
<android.content.res.TypedArray: int getIndexCount()> -> _SINK_
<android.text.style.TextAppearanceSpan: int getSpanTypeId()> -> _SINK_
<android.widget.AutoCompleteTextView: int getThreshold()> -> _SINK_
<android.app.Activity: java.lang.CharSequence getTitle()> -> _SINK_
<android.view.MotionEvent: float getHistoricalPressure(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String getHostAddress()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: int getTop()> -> _SINK_
<com.android.uiautomator.core.UiDevice: int getDisplayWidth()> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)> -> _SINK_
<android.app.Dialog: android.content.Context getContext()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded(java.lang.String)> -> _SINK_
<java.net.ServerSocket: int getSoTimeout()> -> _SINK_
<android.app.PendingIntent: int getCreatorUid()> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastSoftIrqTime()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getDuckedTrackVolume()> -> _SINK_
<android.view.ViewConfiguration: int getHoverTapTimeout()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getLoadFields()> -> _SINK_
<com.android.email.ResourceHelper: int getAccountColor(long)> -> _SINK_
<org.kxml2.io.KXmlParser: int getNamespaceCount(int)> -> _SINK_
<android.widget.TextView: int getInputType()> -> _SINK_
<android.media.videoeditor.MediaItem: java.lang.String getFilename()> -> _SINK_
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: int getInt()> -> _SINK_
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Collection createEntries()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.util.List getInstalledProviders(int)> -> _SINK_
<android.view.KeyEvent: int getMaxKeyCode()> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()> -> _SINK_
<android.os.Bundle: java.lang.String getPairValue()> -> _SINK_
<android.widget.CursorAdapter: android.database.Cursor getCursor()> -> _SINK_
<com.android.email.mail.store.imap.ImapString: int getNumberOrZero()> -> _SINK_
<android.view.InputDevice: java.lang.String getName()> -> _SINK_
<android.graphics.drawable.GradientDrawable: int getOpacity()> -> _SINK_
<android.view.ViewConfiguration: int getJumpTapTimeout()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getAudioBitrate()> -> _SINK_
<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceFragment getFragment()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getContentHeight()> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SINK_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.Context)> -> _SINK_
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> -> _SINK_
<com.android.uiautomator.core.QueryController: java.lang.String getLastTraversedText()> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()> -> _SINK_
<android.os.CommonTimeConfig: java.lang.String getInterfaceBinding()> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(float,float)> -> _SINK_
<com.android.launcher2.PagedView: int getPageForView(android.view.View)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.SpellCheckerProximityInfo: int[] getProximityForScript(int)> -> _SINK_
<android.content.res.XmlBlock$Parser: int getAttributeNameResource(int)> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultIcon()> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getGivenVisibleInsetsLw()> -> _SINK_
<android.text.style.LocaleSpan: java.util.Locale getLocale()> -> _SINK_
<android.content.res.Resources: int getColor(int)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.util.BitSet: java.util.BitSet get(int,int)> -> _SINK_
<android.content.res.TypedArray: android.content.res.Resources getResources()> -> _SINK_
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: long getDuration()> -> _SINK_
<android.widget.AdapterView: java.lang.Object getSelectedItem()> -> _SINK_
<gov.nist.javax.sip.header.RAck: long getCSeqNumberLong()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getAlpha()> -> _SINK_
<com.android.internal.view.IInputMethod$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.common.collect.ForwardingSet: int standardHashCode()> -> _SINK_
<java.util.HashMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getMessageCommandButtons()> -> _SINK_
<com.android.videoeditor.widgets.ImageViewTouchBase: android.graphics.Bitmap getImageBitmap()> -> _SINK_
<android.media.AudioRecord: int getSampleRate()> -> _SINK_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: java.lang.String getIconName(int)> -> _SINK_
<com.android.email.activity.setup.DuplicateAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<org.apache.harmony.security.x509.Certificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> -> _SINK_
<android.widget.TextView: int getHighlightColor()> -> _SINK_
<libcore.util.ZoneInfoDB: java.lang.String[] getAvailableIDs(int)> -> _SINK_
<android.hardware.Camera$Parameters: int getZoom()> -> _SINK_
<libcore.net.http.ResponseHeaders: int getSMaxAgeSeconds()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()> -> _SINK_
<android.app.ContextImpl: int getUserId()> -> _SINK_
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)> -> _SINK_
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)> -> _SINK_
<java.net.DatagramSocketImpl: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getGeneratedClipHeight()> -> _SINK_
<android.view.ViewConfiguration: int getTouchSlop()> -> _SINK_
<com.android.systemui.statusbar.phone.Ticker$Segment: java.lang.CharSequence getText()> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub: android.accounts.IAccountAuthenticator asInterface(android.os.IBinder)> -> _SINK_
<android.app.DownloadManager: int markRowDeleted(long[])> -> _SINK_
<java.security.spec.EncodedKeySpec: byte[] getEncoded()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(android.database.Cursor)> -> _SINK_
<android.os.Parcel: byte[] createByteArray()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.RDN getInstance(java.lang.Object)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: int getOpacity()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.RichInputConnection$Range getWordRangeAtCursor(java.lang.String,int)> -> _SINK_
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()> -> _SINK_
<android.filterfw.geometry.Rectangle: float getWidth()> -> _SINK_
<android.media.MediaRouter$RouteCategory: int getSupportedTypes()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getDomain()> -> _SINK_
<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.ASN1Primitive getPublicKey()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getPluginsPath()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(java.lang.Object)> -> _SINK_
<android.view.ActionMode: boolean getTitleOptionalHint()> -> _SINK_
<android.app.IActivityController$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()> -> _SINK_
<com.android.mms.model.LayoutModel: java.lang.String getBackgroundColor()> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String[] getPredefinedKeyboardLayoutSet()> -> _SINK_
<android.media.AudioManager: int getMasterStreamType()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getSipDomain()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()> -> _SINK_
<com.google.common.collect.EmptyImmutableMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: int getLeft()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getAspectRatio()> -> _SINK_
<android.hardware.Camera$Parameters: int getJpegQuality()> -> _SINK_
<gov.nist.javax.sip.header.SubscriptionState: int getExpires()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object get(java.lang.Object,int)> -> _SINK_
<com.android.mms.dom.events.EventImpl: boolean getBubbles()> -> _SINK_
<android.os.UserManager: java.util.List getUsers(boolean)> -> _SINK_
<java.util.zip.Inflater: long getBytesRead()> -> _SINK_
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)> -> _SINK_
<com.android.internal.app.AlertController: int getIconAttributeResId(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> -> _SINK_
<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()> -> _SINK_
<com.coremedia.iso.boxes.StaticChunkOffsetBox: long[] getChunkOffsets()> -> _SINK_
<com.google.android.picasasync.UploadsManager$UploadTask: com.google.android.picasasync.UploadTaskEntry getNextUpload()> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)> -> _SINK_
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> -> _SINK_
<android.os.Bundle: double getDouble(java.lang.String,double)> -> _SINK_
<android.webkit.WebSettings: boolean getUseWideViewPort()> -> _SINK_
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String)> -> _SINK_
<android.app.Instrumentation: android.os.Bundle getAllocCounts()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallIdHeader()> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getKeyCode()> -> _SINK_
<android.widget.ImageView: int getImageAlpha()> -> _SINK_
<android.app.Activity: int getVolumeControlStream()> -> _SINK_
<android.util.EventLog$Event: long getTimeNanos()> -> _SINK_
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherModel getModel()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<android.view.IInputFilter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.Intent: java.lang.String getPackage()> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()> -> _SINK_
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()> -> _SINK_
<android.filterfw.core.Filter: java.util.Collection getInputPorts()> -> _SINK_
<com.android.camera.ComboPreferences: int getInt(java.lang.String,int)> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKeyOn(int,int)> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: int getAction()> -> _SINK_
<libcore.net.http.ResponseHeaders: java.util.Set getVaryFields()> -> _SINK_
<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()> -> _SINK_
<gov.nist.core.ParserCore: gov.nist.core.NameValue nameValue()> -> _SINK_
<android.widget.ListView: int getMaxScrollAmount()> -> _SINK_
<android.text.Layout$SpannedEllipsizer: int getSpanFlags(java.lang.Object)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedProtocols()> -> _SINK_
<com.android.exchange.utility.SimpleIcsWriter: byte[] getBytes()> -> _SINK_
<android.filterfw.core.FrameFormat: int getSize()> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> -> _SINK_
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getHeight()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()> -> _SINK_
<org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebViewCore: android.content.Context getContext()> -> _SINK_
<com.google.common.collect.MapMaker: com.google.common.base.Equivalence getKeyEquivalence()> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownWidth()> -> _SINK_
<android.graphics.drawable.AnimationDrawable: int getDuration(int)> -> _SINK_
<java.io.EmulatedFields: java.lang.Object get(java.lang.String,java.lang.Object)> -> _SINK_
<java.security.spec.ECFieldF2m: int getM()> -> _SINK_
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap buildOverlayBitmap(android.content.Context,android.graphics.Bitmap,int,java.lang.String,java.lang.String,int,int)> -> _SINK_
<android.view.ViewGroup: int getChildDrawingOrder(int,int)> -> _SINK_
<javax.crypto.spec.IvParameterSpec: byte[] getIV()> -> _SINK_
<java.lang.reflect.Field: float getFloat(java.lang.Object)> -> _SINK_
<java.lang.reflect.Field: byte getByte(java.lang.Object)> -> _SINK_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Sphere: int getTextureId()> -> _SINK_
<java.text.DecimalFormat: java.util.Currency getCurrency()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createBYERequest(boolean)> -> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> -> _SINK_
<com.google.common.collect.ImmutableMap: java.lang.String toString()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()> -> _SINK_
<android.widget.DatePicker: long getMaxDate()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object getOrCompute(java.lang.Object,int,com.google.common.base.Function)> -> _SINK_
<android.app.Activity: android.content.Intent getParentActivityIntent()> -> _SINK_
<org.apache.harmony.security.x509.NameConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.text.Layout: float getSecondaryHorizontal(int)> -> _SINK_
<org.apache.harmony.security.x509.CertificateList$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientHello: int getType()> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: int getNightMode()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)> -> _SINK_
<android.text.SpanSet: int getNextTransition(int,int)> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: long getContentSize()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateInstance()> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: double getHeight()> -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: java.lang.String getActionName()> -> _SINK_
<android.mtp.MtpObjectInfo: int getSequenceNumber()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SINK_
<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getTransformedText(int,int)> -> _SINK_
<android.app.Fragment: android.view.View getView()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMimeType()> -> _SINK_
<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)> -> _SINK_
<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)> -> _SINK_
<com.android.launcher2.CellLayout: int getDesiredWidth()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encode()> -> _SINK_
<android.view.View: android.view.IWindowSession getWindowSession()> -> _SINK_
<com.android.launcher2.Workspace: android.graphics.Bitmap createDragBitmap(android.view.View,android.graphics.Canvas,int)> -> _SINK_
<java.lang.Class: java.lang.String getSimpleName()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.DERBitString getPublicKeyData()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()> -> _SINK_
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()> -> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<com.android.mms.ui.UriImage: int getHeight()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: long getAccountId()> -> _SINK_
<com.google.common.collect.Lists$OnePlusArrayList: java.lang.Object get(int)> -> _SINK_
<javax.crypto.Mac: java.security.Provider getProvider()> -> _SINK_
<android.widget.AdapterView: int getFirstVisiblePosition()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.util.Map getHeaderFields()> -> _SINK_
<com.coremedia.iso.boxes.SampleDescriptionBox: long getContentSize()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()> -> _SINK_
<com.android.mms.model.RegionModel: java.lang.String getRegionId()> -> _SINK_
<java.security.Provider: java.lang.String toString()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: com.android.musicfx.ControlPanelEffect$ControlMode getControlMode(int)> -> _SINK_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SINK_
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> -> _SINK_
<android.content.IntentFilter: java.lang.String getAction(int)> -> _SINK_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object)> -> _SINK_
<org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)> -> _SINK_
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getBaseURI()> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getCount()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeysCache: com.android.inputmethod.keyboard.Key get(com.android.inputmethod.keyboard.Key)> -> _SINK_
<android.graphics.Bitmap: int[] getLayoutBounds()> -> _SINK_
<com.android.camera.ui.OverlayRenderer: int getWidth()> -> _SINK_
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.view.animation.GridLayoutAnimationController: long getDelayForView(android.view.View)> -> _SINK_
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.content.Context,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()> -> _SINK_
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: java.nio.channels.SocketChannel getChannel()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)> -> _SINK_
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()> -> _SINK_
<org.apache.harmony.security.x509.Extension: java.lang.String getExtnID()> -> _SINK_
<android.app.LoadedApk: java.lang.String getLibDir()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getCipherSuite()> -> _SINK_
<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers getInputPointers()> -> _SINK_
<android.widget.ExpandableListView: long getSelectedPosition()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.internal.widget.multiwaveview.PointCloud$Point)> -> _SINK_
<gov.nist.javax.sip.header.Reason: java.lang.String getText()> -> _SINK_
<android.view.Choreographer: long getFrameDelay()> -> _SINK_
<android.animation.AnimatorSet: long getStartDelay()> -> _SINK_
<java.util.AbstractCollection: java.lang.Object[] toArray()> -> _SINK_
<android.view.Choreographer: long getFrameTimeNanos()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getViewTypeCount()> -> _SINK_
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])> -> _SINK_
<android.webkit.FindActionModeCallback: int getActionModeGlobalBottom()> -> _SINK_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SINK_
<com.android.ex.chips.RecipientEntry: int getEntryType()> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: gov.nist.core.HostPort getHostPort()> -> _SINK_
<android.view.ViewConfiguration: int getKeyRepeatTimeout()> -> _SINK_
<gov.nist.javax.sip.header.extensions.MinSE: int getExpires()> -> _SINK_
<gov.nist.javax.sip.header.MimeVersion: int getMajorVersion()> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getSectionForPosition(int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getPath()> -> _SINK_
<java.text.DecimalFormat: java.math.RoundingMode getRoundingMode()> -> _SINK_
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Boolean: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.List getExtendedKeyUsage()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getFirstChild()> -> _SINK_
<com.android.email.Preferences: boolean getEnableStrictMode()> -> _SINK_
<com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)> -> _SINK_
<gov.nist.core.NameValueList: java.lang.String getParameter(java.lang.String)> -> _SINK_
<libcore.net.http.HttpEngine$1: java.io.InputStream getBody()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.Via getOutgoingViaHeader()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.CompositionTimeToSample getCompositionTimeToSample()> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadResolve()> -> _SINK_
<com.android.mms.MmsApp: android.telephony.TelephonyManager getTelephonyManager()> -> _SINK_
<android.view.ViewConfiguration: int getTapTimeout()> -> _SINK_
<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwnam(java.lang.String)> -> _SINK_
<android.media.IMediaScannerListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetResourceId()> -> _SINK_
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()> -> _SINK_
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: int getHeight()> -> _SINK_
<org.apache.http.message.ParserCursor: int getLowerBound()> -> _SINK_
<android.animation.AnimatorSet: long getDuration()> -> _SINK_
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)> -> _SINK_
<com.android.launcher2.CellLayout: int getWidthGap()> -> _SINK_
<com.android.server.ProcessMap: java.util.HashMap getMap()> -> _SINK_
<java.util.logging.LogRecord: int getThreadID()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: int getNonceCount()> -> _SINK_
<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()> -> _SINK_
<java.util.concurrent.FutureTask: java.lang.Object get()> -> _SINK_
<com.android.email.mail.transport.MailTransport: int getPort()> -> _SINK_
<android.graphics.drawable.InsetDrawable: int getOpacity()> -> _SINK_
<android.media.MediaFile: java.lang.String getMimeTypeForFormatCode(int)> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)> -> _SINK_
<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()> -> _SINK_
<com.android.deskclock.AlarmAlertFullScreen: int getLayoutResId()> -> _SINK_
<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()> -> _SINK_
<android.os.Environment: java.io.File getLegacyExternalStorageDirectory()> -> _SINK_
<android.content.Intent: java.util.Set getCategories()> -> _SINK_
<org.apache.http.client.methods.HttpGet: java.lang.String getMethod()> -> _SINK_
<java.io.ObjectStreamField: char getTypeCode()> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)> -> _SINK_
<org.apache.http.auth.AuthSchemeRegistry: java.util.List getSchemeNames()> -> _SINK_
<android.view.MotionEvent: float getSize(int)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()> -> _SINK_
<com.android.email.Preferences: int getAutoAdvanceDirection()> -> _SINK_
<gov.nist.javax.sip.header.StatusLine: int getStatusCode()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getSearchHint()> -> _SINK_
<java.net.URI: java.lang.String getRawFragment()> -> _SINK_
<com.android.server.am.CompatModePackages: int getFrontActivityScreenCompatModeLocked()> -> _SINK_
<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getRemoteParty()> -> _SINK_
<com.android.server.pm.PackageSettingBase: int getInstallStatus()> -> _SINK_
<android.widget.ImageView: int getBaseline()> -> _SINK_
<java.util.UnsafeArrayList: java.lang.Object get(int)> -> _SINK_
<android.text.BoringLayout: int getLineDescent(int)> -> _SINK_
<android.os.Looper: android.os.MessageQueue getQueue()> -> _SINK_
<javax.obex.HeaderSet: java.lang.Object getHeader(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$EvictionQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)> -> _SINK_
<com.android.server.display.DisplayDevice: java.lang.String getNameLocked()> -> _SINK_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()> -> _SINK_
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()> -> _SINK_
<libcore.net.url.FtpURLConnection: java.security.Permission getPermission()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: java.lang.Boolean getParameterBoolean(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> -> _SINK_
<android.webkit.PluginManager: java.lang.Class getPluginClass(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: int getTextZoom()> -> _SINK_
<android.media.AudioTrack: int getStreamType()> -> _SINK_
<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.os.SystemService: android.os.SystemService$State getState(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getSipProviders()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getUserAgent()> -> _SINK_
<java.util.IllegalFormatPrecisionException: java.lang.String getMessage()> -> _SINK_
<com.android.inputmethod.latin.ResizableIntArray: int getLength()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryBeginTime()> -> _SINK_
<java.net.InterfaceAddress: java.net.InetAddress getAddress()> -> _SINK_
<android.widget.TextView: int getCompoundPaddingStart()> -> _SINK_
<android.media.IRingtonePlayer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtrees$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getRadius()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.security.PublicKey getPublicKey()> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.util.zip.Inflater: long getBytesWritten()> -> _SINK_
<gov.nist.javax.sip.message.MultipartMimeContentImpl: javax.sip.header.ContentTypeHeader getContentTypeHeader()> -> _SINK_
<com.android.email.widget.WidgetManager: com.android.email.widget.EmailWidget getOrCreateWidget(android.content.Context,int)> -> _SINK_
<com.android.mms.MmsConfig: int getMaxImageWidth()> -> _SINK_
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager access$000()> -> _SINK_
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastIrqTime()> -> _SINK_
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)> -> _SINK_
<java.net.URL: int getDefaultPort()> -> _SINK_
<gov.nist.javax.sip.address.Authority: gov.nist.core.Host getHost()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl$ProxyConnectEngine: libcore.net.http.RawHeaders getNetworkRequestHeaders()> -> _SINK_
<android.view.TextureView: android.view.HardwareLayer getHardwareLayer()> -> _SINK_
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificSjis(char)> -> _SINK_
<java.util.HashMap: java.util.Iterator newValueIterator()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int,int)> -> _SINK_
<android.view.View: android.os.Handler getHandler()> -> _SINK_
<com.android.videoeditor.util.MediaItemUtils: long getDefaultImageDuration()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCount()> -> _SINK_
<org.apache.http.impl.conn.tsccm.WaitingThread: org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.os.Handler getWorkerHandler()> -> _SINK_
<android.view.ScaleGestureDetector: float getPreviousSpanX()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getUnrecognizedHeaders()> -> _SINK_
<android.view.ScaleGestureDetector: float getPreviousSpanY()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternalParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.webkit.WebViewClassic: float getScale()> -> _SINK_
<android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)> -> _SINK_
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getRealm()> -> _SINK_
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.util.Date getExpiryDate()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: int getViewWidth()> -> _SINK_
<java.io.ObjectStreamField: java.lang.Class getTypeInternal()> -> _SINK_
<android.view.VelocityTracker: android.view.VelocityTracker getNextPoolable()> -> _SINK_
<java.security.KeyStore$Builder$BuilderImpl: java.security.KeyStore getKeyStore()> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: int getMax()> -> _SINK_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getMessageSubject()> -> _SINK_
<java.util.logging.LoggingPermission: java.lang.String getActions()> -> _SINK_
<android.view.ScaleGestureDetector: float getCurrentSpan()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getAudioType()> -> _SINK_
<java.util.AbstractSequentialList: java.lang.Object get(int)> -> _SINK_
<com.android.email.mail.store.ImapStore: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SINK_
<android.text.SpannableStringInternal: int getSpanStart(java.lang.Object)> -> _SINK_
<com.google.common.collect.Multisets$UnmodifiableSortedMultiset: java.util.Set createElementSet()> -> _SINK_
<com.android.email.activity.MessageList: long getAccountFromIntent(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()> -> _SINK_
<android.emoji.EmojiFactory: int getVendorSpecificPuaFromAndroidPua(int)> -> _SINK_
<android.content.ComponentName: java.lang.String getClassName()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getRawIpSourceAddress()> -> _SINK_
<android.view.ViewPropertyAnimator: long getStartDelay()> -> _SINK_
<android.widget.ListPopupWindow: android.view.View getAnchorView()> -> _SINK_
<com.android.inputmethod.latin.DebugSettingsActivity: android.content.Intent getIntent()> -> _SINK_
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstModificationResult$ModificationType getType()> -> _SINK_
<com.android.systemui.recent.TaskDescription: java.lang.CharSequence getLabel()> -> _SINK_
<java.text.AttributedString$AttributedIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)> -> _SINK_
<android.widget.ListView: long[] getCheckItemIds()> -> _SINK_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$DepthFunc getDepthFunc()> -> _SINK_
<java.nio.ReadWriteHeapByteBuffer: byte[] protectedArray()> -> _SINK_
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeWidth()> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.util.WeakHashMap$Entry: java.lang.Object getValue()> -> _SINK_
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.BaseStatusBar$H createHandler()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String[] getSupportedCipherSuiteNames()> -> _SINK_
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.ExtensionValue getDecodedExtensionValue()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCountry()> -> _SINK_
<android.drm.DrmInfoRequest: int getInfoType()> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getClientTransactionTableSize()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.lang.String getSigAlgOID()> -> _SINK_
<android.drm.DrmRights: java.lang.String getMimeType()> -> _SINK_
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> -> _SINK_
<java.security.Signature: java.lang.String toString()> -> _SINK_
<android.os.IMessenger$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.coremedia.iso.boxes.TimeToSampleBox: java.util.List getEntries()> -> _SINK_
<android.content.SyncManager: long access$3700()> -> _SINK_
<android.view.View: long getDrawingTime()> -> _SINK_
<gov.nist.javax.sip.header.RequestLine: java.lang.String getSipVersion()> -> _SINK_
<com.android.camera.ActivityBase: int getResultCode()> -> _SINK_
<android.server.search.Searchables: java.util.ArrayList getGlobalSearchActivities()> -> _SINK_
<com.android.videoeditor.service.MovieTheme: int getPreviewImageResId()> -> _SINK_
<android.content.ContextWrapper: java.io.File getFilesDir()> -> _SINK_
<android.filterfw.core.FrameFormat: java.lang.Object getMetaValue(java.lang.String)> -> _SINK_
<android.animation.IntKeyframeSet: int getIntValue(float)> -> _SINK_
<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEvent()> -> _SINK_
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanStart(java.lang.Object)> -> _SINK_
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$Settings getProperties()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: boolean getPowerButtonInstantlyLocks()> -> _SINK_
<android.drm.mobile1.DrmRawContent: java.lang.String getRightsAddress()> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$AccountShortcutPickerFragment: java.lang.String[] getFromColumns()> -> _SINK_
<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()> -> _SINK_
<com.android.exchange.EasResponse: java.io.InputStream getInputStream()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getMessageSubject()> -> _SINK_
<java.net.URLConnection: boolean getDefaultUseCaches()> -> _SINK_
<com.google.android.picasasync.PicasaApi: int getUploadedPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: java.util.List getAsList()> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)> -> _SINK_
<android.media.effect.FilterEffect: android.filterfw.core.Frame frameFromTexture(int,int,int)> -> _SINK_
<java.util.logging.Logger: boolean getUseParentHandlers()> -> _SINK_
<android.media.ExifInterface: double getAltitude(double)> -> _SINK_
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getStats(int)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: int indexOf(gov.nist.core.GenericObject)> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableNumberFormatLocales()> -> _SINK_
<android.emoji.EmojiFactory: int getMaximumAndroidPua()> -> _SINK_
<android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)> -> _SINK_
<com.android.launcher2.LauncherAppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()> -> _SINK_
<com.android.deskclock.worldclock.WorldClockAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.view.ViewGroup: int getLayoutMode()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getColumnNumber()> -> _SINK_
<javax.obex.ClientSession: long getConnectionID()> -> _SINK_
<com.android.uiautomator.core.QueryController: int getPatternCount(com.android.uiautomator.core.UiSelector)> -> _SINK_
<com.android.server.NativeDaemonEvent: java.lang.String getRawEvent()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.View getStatusBarView()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox: int getDataOffset()> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SINK_
<java.nio.ShortBuffer: java.lang.Object array()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()> -> _SINK_
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.header.Indentation: int getCount()> -> _SINK_
<android.text.style.SubscriptSpan: int getSpanTypeId()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()> -> _SINK_
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)> -> _SINK_
<com.android.server.am.ActivityStack: android.app.ActivityManager$TaskThumbnails getTaskThumbnailsLocked(com.android.server.am.TaskRecord)> -> _SINK_
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()> -> _SINK_
<android.media.videoeditor.MediaProperties: int getSupportedMaxVolume()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableCalendarLocales()> -> _SINK_
<com.android.mms.transaction.TransactionBundle: byte[] getPushData()> -> _SINK_
<android.widget.TextView: android.text.method.KeyListener getKeyListener()> -> _SINK_
<java.lang.Package: java.lang.String getSpecificationVendor()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> -> _SINK_
<android.widget.NumberPicker: float getTopFadingEdgeStrength()> -> _SINK_
<android.widget.Spinner: java.lang.CharSequence getPrompt()> -> _SINK_
<com.android.providers.telephony.MmsSmsDatabaseHelper: com.android.providers.telephony.MmsSmsDatabaseHelper getInstance(android.content.Context)> -> _SINK_
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.lang.String getFilenameWithLocale(java.lang.String,java.lang.String)> -> _SINK_
<libcore.io.ForwardingOs: java.lang.String getenv(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: java.lang.String getProviderMimeType(android.net.Uri,int)> -> _SINK_
<android.filterfw.core.FrameFormat: int[] getDimensions()> -> _SINK_
<com.android.email.provider.ContentCache: android.database.Cursor getCachedCursor(java.lang.String,java.lang.String[])> -> _SINK_
<android.app.Activity: android.content.SharedPreferences getPreferences(int)> -> _SINK_
<java.nio.channels.SelectionKey: java.lang.Object attachment()> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeyDivider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)> -> _SINK_
<java.io.File: java.lang.String getAbsolutePath()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MinExpiresHeader createMinExpiresHeader(int)> -> _SINK_
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()> -> _SINK_
<org.apache.http.impl.io.HttpTransportMetricsImpl: long getBytesTransferred()> -> _SINK_
<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()> -> _SINK_
<java.util.Locale: java.lang.String[] getISOCountries()> -> _SINK_
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: int getCount()> -> _SINK_
<org.apache.harmony.security.x509.Extension: byte[] getExtnValue()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getSecond()> -> _SINK_
<android.media.videoeditor.OverlayFrame: int getOverlayFrameWidth()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getInt(android.content.res.TypedArray,int,int)> -> _SINK_
<java.lang.Class: java.lang.reflect.Method[] getMethods()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: boolean getDrawOutlineOnly()> -> _SINK_
<android.content.ContentProviderProxy: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getSharedQueuedThreads()> -> _SINK_
<java.util.IllegalFormatPrecisionException: int getPrecision()> -> _SINK_
<java.util.Formatter$FormatSpecifierParser: java.lang.String getFormatSpecifierText()> -> _SINK_
<com.android.launcher2.PagedView: java.lang.String getCurrentPageDescription()> -> _SINK_
<android.widget.HeaderViewListAdapter: int getCount()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.lang.Object getContent()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayCountry()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> -> _SINK_
<android.util.AtomicFile: java.io.File getBaseFile()> -> _SINK_
<com.android.email.provider.ContentCache: android.database.Cursor get(java.lang.String)> -> _SINK_
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.DomainList getRoute()> -> _SINK_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()> -> _SINK_
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlBody(java.lang.String)> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] access$600(org.apache.harmony.security.pkcs7.SignerInfo)> -> _SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwuid(int)> -> _SINK_
<android.view.View: int getTextDirection()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: int getMinimumWidth()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()> -> _SINK_
<org.apache.harmony.security.x509.X509PublicKey: byte[] getEncoded()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Enumerated: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.content.res.XmlBlock$Parser: char[] getTextCharacters(int[])> -> _SINK_
<android.webkit.WebViewClassic$Factory: java.lang.String getDefaultUserAgent(android.content.Context)> -> _SINK_
<android.animation.ValueAnimator: long getFrameDelay()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String getMessage()> -> _SINK_
<android.os.Debug: java.lang.String[] getVmFeatureList()> -> _SINK_
<android.content.Intent: android.content.ClipData getClipData()> -> _SINK_
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> -> _SINK_
<android.text.DynamicLayout: int getEllipsisStart(int)> -> _SINK_
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()> -> _SINK_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getProtocol()> -> _SINK_
<libcore.net.http.RawHeaders: java.lang.String getFieldName(int)> -> _SINK_
<android.support.v4.view.ViewPager: android.support.v4.view.PagerAdapter getAdapter()> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$WallpaperDrawable: int getOpacity()> -> _SINK_
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: java.util.List getGlobalSearchActivities()> -> _SINK_
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()> -> _SINK_
<libcore.net.http.HttpConnection: java.io.InputStream getInputStream()> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter getShowAllAdapter()> -> _SINK_
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)> -> _SINK_
<android.webkit.WebView$PrivateAccess: float getHorizontalScrollFactor()> -> _SINK_
<android.webkit.ZoomManager: float getDefaultScale()> -> _SINK_
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()> -> _SINK_
<java.nio.channels.FileLock: long position()> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()> -> _SINK_
<android.view.SurfaceView$4: android.graphics.Rect getSurfaceFrame()> -> _SINK_
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> -> _SINK_
<android.filterfw.core.FrameFormat: int getNumberOfDimensions()> -> _SINK_
<android.text.BoringLayout: int getLineTop(int)> -> _SINK_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> -> _SINK_
<android.filterfw.core.Filter: int getSleepDelay()> -> _SINK_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()> -> _SINK_
<android.view.View: int getWindowSystemUiVisibility()> -> _SINK_
<com.android.camera.CameraActivity: long getAutoFocusTime()> -> _SINK_
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)> -> _SINK_
<android.media.AudioManager: int getMode()> -> _SINK_
<java.security.cert.PKIXCertPathChecker: java.lang.Object clone()> -> _SINK_
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.lang.String getResponseMessage()> -> _SINK_
<com.android.phone.PhoneGlobals: boolean getRestoreMuteOnInCallResume()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.String getId()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.String getName()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()> -> _SINK_
<android.widget.TextView: android.text.Layout getHintLayout()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getTimeChildren()> -> _SINK_
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)> -> _SINK_
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstNode getChangedTarget()> -> _SINK_
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)> -> _SINK_
<android.media.Metadata: int getInt(int)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> -> _SINK_
<com.android.mms.model.TextModel: java.lang.String getText()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getSignature()> -> _SINK_
<android.text.style.TextAppearanceSpan: int getTextSize()> -> _SINK_
<com.android.inputmethod.keyboard.ProximityInfo: long getNativeProximityInfo()> -> _SINK_
<libcore.net.url.UrlUtils: java.lang.String getSchemePrefix(java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getHeight()> -> _SINK_
<android.view.DisplayInfo: int getNaturalHeight()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getFilename()> -> _SINK_
<android.util.LruCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()> -> _SINK_
<gov.nist.core.GenericObject: java.lang.Object clone()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router getRouter()> -> _SINK_
<android.app.AlertDialog$Builder: android.content.Context getContext()> -> _SINK_
<android.media.MediaRouter$RouteCategory: java.util.List getRoutes(java.util.List)> -> _SINK_
<android.widget.Scroller: int getDuration()> -> _SINK_
<com.android.inputmethod.latin.SettingsValues: java.lang.String getPrefAdditionalSubtypes(android.content.SharedPreferences,android.content.res.Resources)> -> _SINK_
<org.apache.james.mime4j.LogFactory: org.apache.james.mime4j.Log getLog(java.lang.Class)> -> _SINK_
<com.android.mms.util.DraftCache: boolean getSavingDraft()> -> _SINK_
<com.coremedia.iso.boxes.DataReferenceBox: long getContentSize()> -> _SINK_
<java.net.URI: java.lang.String getFragment()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Exception: java.lang.Throwable getCause()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject$Download: long getTime()> -> _SINK_
<android.media.videoeditor.Transition: java.lang.String getFilename()> -> _SINK_
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.ProximityInfo createSpellCheckerProximityInfo(int[],int,int,int)> -> _SINK_
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,long,java.lang.String[])> -> _SINK_
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)> -> _SINK_
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlAlternate(com.android.emailcommon.provider.EmailContent$Body,boolean)> -> _SINK_
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName)> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: android.view.animation.Animation createForceHideEnterAnimation(boolean)> -> _SINK_
<android.filterfw.core.FilterContext: android.filterfw.core.Frame fetchFrame(java.lang.String)> -> _SINK_
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.LogRecordFactory getLogRecordFactory()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()> -> _SINK_
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()> -> _SINK_
<android.media.videoeditor.Transition: android.media.videoeditor.MediaArtistNativeHelper$TransitionSettings getTransitionSettings()> -> _SINK_
<com.android.camera.CameraHolder: int getNumberOfCameras()> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: java.util.Iterator getParameterNames()> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.WebIconDatabase getWebIconDatabase()> -> _SINK_
<android.media.videoeditor.AudioTrack: java.lang.String getAudioWaveformFilename()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)> -> _SINK_
<android.content.res.Resources: float getDimension(int)> -> _SINK_
<android.filterpacks.imageproc.ImageSlicer: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.IRotationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getSubjectX500Principal()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getData(int)> -> _SINK_
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.Object clone()> -> _SINK_
<gov.nist.javax.sip.header.Warning: java.lang.String getAgent()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)> -> _SINK_
<com.google.common.collect.ImmutableList: java.lang.Object writeReplace()> -> _SINK_
<org.apache.http.util.VersionInfo: java.lang.String getPackage()> -> _SINK_
<android.text.style.URLSpan: java.lang.String getURL()> -> _SINK_
<android.widget.FastScroller: java.lang.Object[] getSections()> -> _SINK_
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.util.Locale getSubtypeLocale(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<java.io.File: java.io.File getAbsoluteFile()> -> _SINK_
<android.content.SyncStorageEngine: int getIntColumn(android.database.Cursor,java.lang.String)> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: java.lang.String getPublicId()> -> _SINK_
<android.view.GLES20Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> -> _SINK_
<android.graphics.Bitmap: int getWidth()> -> _SINK_
<android.widget.TextView: boolean getFreezesText()> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getDuration()> -> _SINK_
<java.io.File: java.io.File getCanonicalFile()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputingMapAdapter: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.adobe.xmp.impl.ByteBuffer: java.lang.String getEncoding()> -> _SINK_
<android.view.View: int getAccessibilityCursorPosition()> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])> -> _SINK_
<android.app.ActivityManager: java.util.List getProcessesInErrorState()> -> _SINK_
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> -> _SINK_
<com.google.common.collect.AbstractSetMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()> -> _SINK_
<android.media.MediaRouter$RouteInfo: java.lang.Object getTag()> -> _SINK_
<android.mtp.MtpObjectInfo: java.lang.String getName()> -> _SINK_
<com.android.launcher2.Workspace: java.util.ArrayList getAllShortcutAndWidgetContainers()> -> _SINK_
<android.hardware.usb.UsbDevice: int getDeviceId()> -> _SINK_
<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncryptedDigest()> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.header.Via getViaHeader()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1Encodable getValue()> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: int getSocketTimeout()> -> _SINK_
<gov.nist.javax.sip.message.MultipartMimeContentImpl: gov.nist.javax.sip.message.Content getContentByType(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getAllowUniversalAccessFromFileURLs()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.util.Iterator getParameterNames()> -> _SINK_
<android.app.ActivityOptions: int getStartY()> -> _SINK_
<android.app.ActivityOptions: int getStartX()> -> _SINK_
<android.app.ActivityManagerProxy: int getLaunchedFromUid(android.os.IBinder)> -> _SINK_
<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()> -> _SINK_
<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()> -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: java.lang.Object[] doInBackground(java.lang.Long[])> -> _SINK_
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources)> -> _SINK_
<android.widget.RelativeLayout: int getGravity()> -> _SINK_
<javax.sip.DialogState: int getValue()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getPath()> -> _SINK_
<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()> -> _SINK_
<java.text.NumberFormat: int getMinimumIntegerDigits()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentEncodingHeader getContentEncoding()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getSendUdpBufferSize()> -> _SINK_
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionary: com.android.inputmethod.latin.UserHistoryDictionary getInstance(android.content.Context,java.lang.String,android.content.SharedPreferences)> -> _SINK_
<com.android.i18n.phonenumbers.RegexCache$LRUCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<org.apache.http.ProtocolVersion: int getMajor()> -> _SINK_
<android.app.Fragment: java.lang.String getString(int)> -> _SINK_
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()> -> _SINK_
<org.json.JSONArray: java.lang.Object get(int)> -> _SINK_
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()> -> _SINK_
<android.renderscript.Script$FieldBase: android.renderscript.Type getType()> -> _SINK_
<android.app.LocalActivityManager: java.util.HashMap dispatchRetainNonConfigurationInstance()> -> _SINK_
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)> -> _SINK_
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()> -> _SINK_
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()> -> _SINK_
<java.net.DatagramSocket: int getSoTimeout()> -> _SINK_
<gov.nist.javax.sip.header.ContentLanguage: java.util.Locale getContentLanguage()> -> _SINK_
<java.lang.Class: java.lang.ClassLoader getClassLoaderImpl()> -> _SINK_
<com.google.common.collect.ForwardingMap: java.lang.Object delegate()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getFixedFontFamily()> -> _SINK_
<android.graphics.Region: android.graphics.Path getBoundaryPath()> -> _SINK_
<android.app.backup.BackupAgent: android.os.IBinder onBind()> -> _SINK_
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.MediaRange: java.lang.String getType()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKey()> -> _SINK_
<java.security.Provider: java.security.Provider$Service getService(java.lang.String)> -> _SINK_
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()> -> _SINK_
<android.graphics.YuvImage: int getWidth()> -> _SINK_
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)> -> _SINK_
<com.android.mms.util.Recycler: int getMessageMaxLimit()> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.EntityResolver getEntityResolver()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getInterval()> -> _SINK_
<com.coremedia.iso.boxes.mdat.MediaDataBox: com.coremedia.iso.boxes.ContainerBox getParent()> -> _SINK_
<com.android.mms.MmsApp: java.lang.String getCurrentCountryIso()> -> _SINK_
<android.app.ContextImpl: java.io.File getDir(java.lang.String,int)> -> _SINK_
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)> -> _SINK_
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)> -> _SINK_
<com.google.common.collect.Ordering: com.google.common.collect.Ordering nullsFirst()> -> _SINK_
<com.android.mms.dom.AttrImpl: short getNodeType()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFromHeader()> -> _SINK_
<com.android.mms.transaction.TransactionBundle: java.lang.String getUri()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte getDescriptionCode()> -> _SINK_
<gov.nist.javax.sip.stack.HopImpl: java.lang.String getTransport()> -> _SINK_
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: boolean getParameterAsBoolean(java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] access$200(org.apache.harmony.security.x509.SubjectPublicKeyInfo)> -> _SINK_
<java.nio.MappedByteBufferAdapter: char getChar()> -> _SINK_
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()> -> _SINK_
<com.android.emailcommon.provider.EmailContent$Message: com.android.emailcommon.provider.EmailContent$Message restoreMessageWithId(android.content.Context,long)> -> _SINK_
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SINK_
<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)> -> _SINK_
<gov.nist.javax.sip.header.AcceptEncoding: java.lang.String getEncoding()> -> _SINK_
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ResolveInfo)> -> _SINK_
<android.mtp.MtpObjectInfo: int getImagePixHeight()> -> _SINK_
<android.widget.RemoteViews$ReflectionActionWithoutParams: java.lang.String getActionName()> -> _SINK_
<com.android.server.wm.InputMonitor: int getPointerLayer()> -> _SINK_
<android.webkit.WebView: float getScale()> -> _SINK_
<android.media.videoeditor.WaveformData: short[] getFrameGains()> -> _SINK_
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)> -> _SINK_
<com.android.providers.downloads.StorageManager: com.android.providers.downloads.StorageManager getInstance(android.content.Context)> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: java.lang.String toString()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongValueReference: java.lang.Object get()> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: int getOffset()> -> _SINK_
<android.widget.CursorAdapter: long getItemId(int)> -> _SINK_
<android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)> -> _SINK_
<android.app.backup.BackupAgentHelper: android.app.backup.BackupHelperDispatcher getDispatcher()> -> _SINK_
<android.webkit.WebViewClassic: android.view.View getZoomControls()> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.net.DatagramSocket: boolean getBroadcast()> -> _SINK_
<android.mtp.MtpObjectInfo: long getDateModified()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getContentDisposition()> -> _SINK_
<android.filterfw.core.Filter: java.lang.String getName()> -> _SINK_
<java.lang.reflect.Array: long getLong(java.lang.Object,int)> -> _SINK_
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getUsernamePassword(java.lang.String)> -> _SINK_
<com.android.email.view.CertificateSelector: java.lang.String getCertificate()> -> _SINK_
<android.text.method.TextKeyListener: int getInputType()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: int getState()> -> _SINK_
<android.content.res.Resources: android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int)> -> _SINK_
<com.android.phone.InCallScreen: com.android.phone.InCallTouchUi getInCallTouchUi()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)> -> _SINK_
<android.content.ContentProvider$Transport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)> -> _SINK_
<org.apache.harmony.security.x509.AccessDescription: byte[] getEncoded()> -> _SINK_
<android.content.pm.Signature: byte[] toByteArray()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)> -> _SINK_
<com.android.server.NativeDaemonConnector: java.lang.String[] doListCommand(java.lang.String,int)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)> -> _SINK_
<com.android.mms.ui.MessageItem: com.android.mms.model.SlideshowModel getSlideshow()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: int getWidth()> -> _SINK_
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getSelectedTab()> -> _SINK_
<java.nio.LongArrayBuffer: long get()> -> _SINK_
<android.widget.AbsSpinner: int getCount()> -> _SINK_
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.Bitmap,android.content.Context)> -> _SINK_
<java.nio.Buffer: java.nio.Buffer flip()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(int)> -> _SINK_
<com.android.email.widget.EmailWidget: int getCount()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByVersion(byte[])> -> _SINK_
<com.android.inputmethod.latin.ResourceUtils: java.lang.String getDeviceOverrideValue(android.content.res.Resources,int,java.lang.String)> -> _SINK_
<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()> -> _SINK_
<com.android.mms.dom.ElementImpl: java.lang.String getNodeName()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransport()> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: int[] getLeftEdge()> -> _SINK_
<java.security.spec.ECFieldFp: java.math.BigInteger getP()> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Collection entries()> -> _SINK_
<android.content.SyncManager: android.accounts.AccountAndUser[] access$2800()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox: com.coremedia.iso.boxes.fragment.SampleFlags getFirstSampleFlags()> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(java.lang.String)> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: int getIconResId()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.widget.TableRow: int getLocationOffset(android.view.View)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: int getOpacity()> -> _SINK_
<android.speech.tts.TtsEngines: java.util.List getEngines()> -> _SINK_
<java.util.Date: int getSeconds()> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow: int getTextOffset()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.activity.MessagesAdapter: java.util.Set getSelectedSet()> -> _SINK_
<org.apache.harmony.security.x509.X509PublicKey: java.lang.String getAlgorithm()> -> _SINK_
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicWidth()> -> _SINK_
<android.webkit.WebView: android.view.View getZoomControls()> -> _SINK_
<com.google.common.collect.EmptyImmutableList: java.lang.Object get(int)> -> _SINK_
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsManager getInstance(android.content.Context)> -> _SINK_
<com.android.internal.util.StateMachine: com.android.internal.util.StateMachine$LogRec getLogRec(int)> -> _SINK_
<android.webkit.WebViewClassic$FocusTransitionDrawable: float getProgress()> -> _SINK_
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)> -> _SINK_
<android.webkit.WebView$PrivateAccess: int getHorizontalScrollbarHeight()> -> _SINK_
<android.drm.mobile1.DrmRawContent: int getRawType()> -> _SINK_
<android.widget.ExpandableListView: long getSelectedId()> -> _SINK_
<android.view.View: int getVerticalScrollbarWidth()> -> _SINK_
<android.view.KeyCharacterMap: int getModifierBehavior()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getNamespaceURI()> -> _SINK_
<android.renderscript.Sampler: float getAnisotropy()> -> _SINK_
<com.google.android.gms.panorama.internal.PanoramaClientImpl: android.os.IInterface createServiceInterface(android.os.IBinder)> -> _SINK_
<android.widget.FrameLayout: boolean getMeasureAllChildren()> -> _SINK_
<gov.nist.javax.sip.header.AddressParametersHeader: javax.sip.address.Address getAddress()> -> _SINK_
<org.kxml2.io.KXmlParser: int getColumnNumber()> -> _SINK_
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderField(int)> -> _SINK_
<com.google.common.collect.AbstractMultiset: java.util.Set entrySet()> -> _SINK_
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getParameter(java.lang.String)> -> _SINK_
<android.webkit.CertTool: java.lang.String getSignedPublicKey(android.content.Context,int,java.lang.String)> -> _SINK_
<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int,int)> -> _SINK_
<gov.nist.core.StringTokenizer: java.lang.String getLine()> -> _SINK_
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.reflect.Type[] getBounds()> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> -> _SINK_
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)> -> _SINK_
<android.app.Instrumentation: android.content.Context getTargetContext()> -> _SINK_
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()> -> _SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> -> _SINK_
<android.preference.GenericInflater: java.lang.Object onCreateItem(java.lang.String,android.util.AttributeSet)> -> _SINK_
<java.lang.Enum: java.lang.String name()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgOID()> -> _SINK_
<android.widget.TextView: int getCurrentTextColor()> -> _SINK_
<java.text.BreakIterator: java.lang.Object clone()> -> _SINK_
<com.android.email.MessagingExceptionStrings: java.lang.String getErrorString(android.content.Context,com.android.emailcommon.mail.MessagingException)> -> _SINK_
<org.apache.harmony.security.x509.CRLNumber: byte[] getEncoded()> -> _SINK_
<gov.nist.javax.sip.clientauthutils.CredentialsCache: java.util.Collection getCachedAuthorizationHeaders(java.lang.String)> -> _SINK_
<com.adobe.xmp.impl.ByteBuffer: java.io.InputStream getByteStream()> -> _SINK_
<android.view.View: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)> -> _SINK_
<com.android.email.mail.store.imap.ImapString: java.util.Date getDateOrNull()> -> _SINK_
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<java.util.LinkedHashMap: java.util.Iterator newEntryIterator()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: float getAnimationScale(int)> -> _SINK_
<android.view.View$MeasureSpec: int getSize(int)> -> _SINK_
<org.apache.harmony.security.x509.EDIPartyName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])> -> _SINK_
<javax.xml.parsers.FactoryConfigurationError: java.lang.Exception getException()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)> -> _SINK_
<android.widget.CursorTreeAdapter$MyCursorHelper: int getCount()> -> _SINK_
<java.util.zip.ZipEntry: int getMethod()> -> _SINK_
<android.app.ActivityManagerProxy: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> -> _SINK_
<android.content.SyncStorageEngine: int getPendingOperationCount()> -> _SINK_
<com.google.android.picasasync.PrefetchHelper: java.io.File getAlbumCover(long,java.lang.String)> -> _SINK_
<com.android.launcher2.Folder: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> -> _SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger getServerLogger()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getQueryType()> -> _SINK_
<android.filterfw.core.NativeProgram: java.lang.Object getHostValue(java.lang.String)> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()> -> _SINK_
<android.renderscript.ProgramVertex: android.renderscript.Element getInput(int)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.io.EmulatedFieldsForLoading: char get(java.lang.String,char)> -> _SINK_
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.webkit.WebViewClassic: int getPageBackgroundColor()> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<org.kxml2.io.KXmlParser: int getAttributeCount()> -> _SINK_
<com.android.email.mail.store.ImapFolder: java.lang.String[] getSearchUids(java.util.List)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<android.speech.tts.SynthesisRequest: int getPitch()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()> -> _SINK_
<android.view.MotionEvent: int getHistorySize()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginLine()> -> _SINK_
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)> -> _SINK_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SINK_
<android.view.ViewConfiguration: int getScaledDoubleTapTouchSlop()> -> _SINK_
<java.io.ObjectStreamField: int getOffset()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getMessageContent()> -> _SINK_
<android.content.Intent: java.lang.String getType()> -> _SINK_
<com.android.launcher2.LauncherApplication: float getScreenDensity()> -> _SINK_
<com.android.phone.OutgoingCallBroadcaster: android.app.Dialog onCreateDialog(int)> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getReceived()> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteReplace()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownX()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownY()> -> _SINK_
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.MediaHeaderBox getMediaHeaderBox()> -> _SINK_
<android.widget.TextView: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)> -> _SINK_
<android.app.Activity: android.app.LoaderManager getLoaderManager()> -> _SINK_
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()> -> _SINK_
<com.google.common.collect.Multimaps$FilteredMultimap: java.util.Map asMap()> -> _SINK_
<android.content.SyncStorageEngine: android.util.Pair getBackoff(android.accounts.Account,int,java.lang.String)> -> _SINK_
<android.media.MediaSyncEvent: int getAudioSessionId()> -> _SINK_
<android.widget.TextView: int getHorizontalOffsetForDrawables()> -> _SINK_
<java.security.cert.PKIXParameters: java.util.List getCertStores()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: int getViaPort()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndProximity poll(long,java.util.concurrent.TimeUnit)> -> _SINK_
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()> -> _SINK_
<android.webkit.WebSettings: boolean getBlockNetworkLoads()> -> _SINK_
<android.hardware.SensorManager: float getAltitude(float,float)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: int getCount()> -> _SINK_
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SINK_
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName,int)> -> _SINK_
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()> -> _SINK_
<com.android.server.am.ActivityRecord$Token: long getKeyDispatchingTimeout()> -> _SINK_
<com.android.internal.widget.DrawableHolder: android.graphics.drawable.BitmapDrawable getDrawable()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: long getAppStartTime()> -> _SINK_
<com.android.systemui.statusbar.NotificationData: com.android.systemui.statusbar.NotificationData$Entry get(int)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.io.InputStream getInputStream()> -> _SINK_
<android.mtp.MtpStorageInfo: int getStorageId()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getFlag(android.content.res.TypedArray,int)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: int getRightPaneId()> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: long getContentSize()> -> _SINK_
<com.android.videoeditor.VideoEditorActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<android.text.format.DateUtils: java.lang.String getAMPMString(int)> -> _SINK_
<org.apache.harmony.security.x509.Extension: byte[] getEncoded()> -> _SINK_
<java.util.Properties: java.lang.String getProperty(java.lang.String)> -> _SINK_
<android.drm.mobile1.DrmRawContent: java.io.InputStream getContentInputStream(android.drm.mobile1.DrmRights)> -> _SINK_
<android.content.pm.PackageManager: java.lang.String getDataDirForUser(int,java.lang.String)> -> _SINK_
<android.view.ViewConfiguration: int getScrollBarFadeDuration()> -> _SINK_
<android.os.StatFs: int getBlockSize()> -> _SINK_
<com.android.providers.media.MediaProvider$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()> -> _SINK_
<javax.obex.ClientOperation: java.lang.String getEncoding()> -> _SINK_
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()> -> _SINK_
<java.util.Date: int getYear()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void getContentInsetHintLw(android.view.WindowManager$LayoutParams,android.graphics.Rect)> -> _SINK_
<com.android.inputmethod.latin.DictionaryFactory: com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(android.content.Context,java.util.Locale)> -> _SINK_
<com.android.email.activity.UiUtilities: android.view.View getView(android.app.Activity,int)> -> _SINK_
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SINK_
<android.view.KeyEvent: char getMatch(char[],int)> -> _SINK_
<com.google.common.collect.Multimaps$MapMultimap$AsMapEntries$1$1: java.lang.Object getKey()> -> _SINK_
<com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)> -> _SINK_
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(com.android.mms.data.ContactList)> -> _SINK_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SINK_
<gov.nist.javax.sip.parser.Lexer: java.lang.String getHeaderName(java.lang.String)> -> _SINK_
<com.android.launcher2.CellLayout: float getBackgroundAlpha()> -> _SINK_
<android.support.v4.view.MotionEventCompat: int getActionIndex(android.view.MotionEvent)> -> _SINK_
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()> -> _SINK_
<android.widget.ExpandableListView: android.widget.Adapter getAdapter()> -> _SINK_
<android.filterfw.core.FrameFormat: int getLength()> -> _SINK_
<android.content.SyncStorageEngine: long getLongColumn(android.database.Cursor,java.lang.String)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.security.Permission getPermission()> -> _SINK_
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.io.FileDescriptor,int)> -> _SINK_
<com.android.internal.util.TypedProperties: long getLong(java.lang.String,long)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> -> _SINK_
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.view.InputDevice: int getSources()> -> _SINK_
<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getChangingConfigurations()> -> _SINK_
<android.media.videoeditor.MediaItem: boolean getRegenerateClip()> -> _SINK_
<com.android.internal.backup.LocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getName()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getLastModified()> -> _SINK_
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getTimeText(long)> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getDecodingTimeEntries()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> -> _SINK_
<android.view.HardwareLayer: android.view.DisplayList getDisplayList()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable$NinePatchState: int getChangingConfigurations()> -> _SINK_
<android.view.View: int getBaseline()> -> _SINK_
<com.android.internal.os.ProcessStats: long getCpuTimeForPid(int)> -> _SINK_
<com.android.launcher2.Launcher: int getCurrentWorkspaceScreen()> -> _SINK_
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper$CacheStats getCacheStatistics(int)> -> _SINK_
<java.lang.System: java.lang.String getenv(java.lang.String)> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle()> -> _SINK_
<android.view.animation.AnimationSet: java.util.List getAnimations()> -> _SINK_
<android.view.View: int getScrollBarDefaultDelayBeforeFade()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionY()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionX()> -> _SINK_
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> -> _SINK_
<android.content.res.Resources: android.content.res.Resources getSystem()> -> _SINK_
<java.util.IllegalFormatFlagsException: java.lang.String getMessage()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPhoneContext()> -> _SINK_
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> -> _SINK_
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)> -> _SINK_
<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.Thread getThread()> -> _SINK_
<com.android.mms.util.RateController: com.android.mms.util.RateController getInstance()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> -> _SINK_
<com.google.common.collect.BstPath: com.google.common.collect.BstNode getTip()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()> -> _SINK_
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()> -> _SINK_
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.nio.HeapByteBuffer: double getDouble(int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: int getContentLength()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleIsDependentOn()> -> _SINK_
<org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToCenterOfScreen()> -> _SINK_
<android.app.SearchableInfo: int getVoiceMaxResults()> -> _SINK_
<com.google.common.collect.Maps$1: java.lang.Object getValue()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicWidth()> -> _SINK_
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)> -> _SINK_
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> -> _SINK_
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getCollectionName()> -> _SINK_
<com.android.email.Clock: long getTime()> -> _SINK_
<com.android.phone.CallFeaturesSetting: android.app.Dialog onCreateDialog(int)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributePrefix(int)> -> _SINK_
<android.support.v4.view.ViewPager: int getChildDrawingOrder(int,int)> -> _SINK_
<gov.nist.core.GenericObjectList: java.lang.Object clone()> -> _SINK_
<android.view.VelocityTracker: float getYVelocity(int)> -> _SINK_
<android.preference.GenericInflater: android.content.Context getContext()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator: java.util.Iterator getDelegateIterator()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()> -> _SINK_
<java.net.DatagramSocket: int getLocalPort()> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getQName(int)> -> _SINK_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()> -> _SINK_
<com.android.mms.util.ThumbnailManager: java.lang.String getTag()> -> _SINK_
<com.google.common.collect.AbstractLinkedIterator: java.lang.Object next()> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])> -> _SINK_
<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)> -> _SINK_
<com.android.email.mail.store.ExchangeStore: com.android.emailcommon.service.IEmailService getService()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: int getHoldCount()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: android.widget.Filter getFilter()> -> _SINK_
<gov.nist.javax.sip.header.ContentType: java.lang.String getCharset()> -> _SINK_
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> -> _SINK_
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: android.view.View addStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int)> -> _SINK_
<com.android.internal.util.MemInfoReader: long getTotalSize()> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: android.view.View getContent()> -> _SINK_
<java.lang.Package: java.lang.Package getPackage(java.lang.String)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointersDown()> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildContentView(android.view.View)> -> _SINK_
<android.filterfw.core.Frame: long getBindingId()> -> _SINK_
<gov.nist.core.DuplicateNameValueList: java.util.Iterator getNames()> -> _SINK_
<org.apache.harmony.security.x509.EDIPartyName: byte[] getEncoded()> -> _SINK_
<com.android.launcher2.LauncherModel: java.util.Comparator getAppNameComparator()> -> _SINK_
<android.media.MediaScanner: android.media.MediaScanner$FileEntry makeEntryFor(java.lang.String)> -> _SINK_
<com.android.camera.CameraActivity: com.android.camera.ShutterButton getShutterButton()> -> _SINK_
<android.hardware.display.DisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SINK_
<android.widget.AdapterViewAnimator: int getBaseline()> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.lang.String getHandler()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)> -> _SINK_
<android.app.Activity: android.os.IBinder getActivityToken()> -> _SINK_
<android.media.videoeditor.MediaImageItem: long getTimelineDuration()> -> _SINK_
<gov.nist.javax.sip.header.SubscriptionState: java.lang.String getReasonCode()> -> _SINK_
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<android.preference.Preference: boolean getPersistedBoolean(boolean)> -> _SINK_
<gov.nist.javax.sip.header.RSeq: int getSequenceNumber()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.TimeStampHeader createTimeStampHeader(float)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> -> _SINK_
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getPatternSelector()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getOmitVersionAttribute()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()> -> _SINK_
<android.filterpacks.imageproc.DrawOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()> -> _SINK_
<com.android.mms.ui.MessageListAdapter: int getItemViewType(int)> -> _SINK_
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.util.List getAudioTracks()> -> _SINK_
<android.webkit.HTML5VideoView: int getDuration()> -> _SINK_
<android.app.IWallpaperManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.activity.MessageFileView: com.android.email.activity.MessageFileViewFragment getFragment()> -> _SINK_
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()> -> _SINK_
<com.android.email.provider.EmailProvider: android.database.Cursor mostRecentMessageQuery(android.net.Uri)> -> _SINK_
<android.app.Activity: int getRequestedOrientation()> -> _SINK_
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getLineInstance(java.util.Locale)> -> _SINK_
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.math.BigInteger getSerialNumber()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: int getDefaultPort()> -> _SINK_
<java.sql.Date: int getMinutes()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.DragController getDragController()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()> -> _SINK_
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getVerticalFadingEdgeLengthCallback()> -> _SINK_
<com.android.mms.model.TextModel: int getCharset()> -> _SINK_
<com.android.launcher2.PagedView: int getChildWidth(int)> -> _SINK_
<android.content.IClipboard$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.Spinner$DropDownAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.os.Environment: java.io.File getMediaStorageDirectory()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.WaveformData getWaveformData()> -> _SINK_
<android.gesture.GestureStroke: android.graphics.Path getPath()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> -> _SINK_
<javax.crypto.Cipher: byte[] getIV()> -> _SINK_
<android.webkit.WebSettingsClassic: int getDoubleTapToastCount()> -> _SINK_
<android.widget.Editor$SelectionStartHandleView: android.widget.Editor$ActionPopupWindow getActionPopupWindow()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object)> -> _SINK_
<java.lang.Math: int getExponent(double)> -> _SINK_
<android.media.AudioTrack: int getPlayState()> -> _SINK_
<com.android.systemui.statusbar.BaseStatusBar: android.view.View updateNotificationVetoButton(android.view.View,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<android.widget.LinearLayout: int getDividerPadding()> -> _SINK_
<java.lang.StackTraceElement: java.lang.String getClassName()> -> _SINK_
<android.widget.ListView: boolean getItemsCanFocus()> -> _SINK_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowState: android.view.IApplicationToken getAppToken()> -> _SINK_
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> -> _SINK_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> -> _SINK_
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)> -> _SINK_
<android.view.PointerIcon: android.graphics.Bitmap getBitmap()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate: javax.net.ssl.SSLSocket getSSLSocket()> -> _SINK_
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()> -> _SINK_
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getIconFromCursor(android.database.Cursor,int,android.content.Context)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()> -> _SINK_
<android.graphics.drawable.GradientDrawable: int getIntrinsicWidth()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getClientKeyType(byte)> -> _SINK_
<java.util.AbstractSequentialList: java.lang.Object remove(int)> -> _SINK_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -> _SINK_
<java.security.KeyFactory: java.security.Provider getProvider()> -> _SINK_
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$1: java.lang.Object get()> -> _SINK_
<android.app.ActivityThread: android.app.Application getApplication()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.server.sip.SipSessionGroup$RegisterCommand: int getDuration()> -> _SINK_
<java.net.DatagramSocket: boolean getReuseAddress()> -> _SINK_
<android.app.LoaderManagerImpl: android.content.Loader getLoader(int)> -> _SINK_
<android.webkit.WebViewClassic: int getTitleHeight()> -> _SINK_
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SINK_
<com.android.providers.media.MediaProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()> -> _SINK_
<gov.nist.javax.sip.header.SIPIfMatch: java.lang.String getETag()> -> _SINK_
<android.app.ActivityManagerProxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SINK_
<android.renderscript.RenderScriptGL: int getHeight()> -> _SINK_
<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)> -> _SINK_
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()> -> _SINK_
<com.android.email.AttachmentInfo: android.content.Intent getAttachmentIntent(android.content.Context,long)> -> _SINK_
<android.view.animation.Transformation: int getTransformationType()> -> _SINK_
<android.media.videoeditor.Transition: long getMaximumDuration()> -> _SINK_
<android.view.View: int getDrawingCacheQuality()> -> _SINK_
<java.nio.DirectByteBuffer: double getDouble()> -> _SINK_
<gov.nist.core.GenericObjectList: java.lang.String toString()> -> _SINK_
<com.android.internal.util.FastXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)> -> _SINK_
<com.android.launcher2.LauncherModel: java.util.ArrayList getItemsInLocalCoordinates(android.content.Context)> -> _SINK_
<android.widget.Spinner$DropDownAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.WallpaperInfo: java.lang.String getPackageName()> -> _SINK_
<android.media.videoeditor.OverlayFrame: int getOverlayFrameHeight()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.net.URL getURL()> -> _SINK_
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()> -> _SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer get(short[],int,int)> -> _SINK_
<com.google.common.collect.AbstractMultiset: java.util.Set elementSet()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits(int)> -> _SINK_
<com.android.mms.ui.IconListAdapter$IconListItem: int getResource()> -> _SINK_
<android.animation.ObjectAnimator: java.lang.String getPropertyName()> -> _SINK_
<android.content.pm.VerificationParams: int getOriginatingUid()> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getElementOrNone(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()> -> _SINK_
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -> _SINK_
<android.text.Layout: float getSpacingAdd()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getInputMethodList()> -> _SINK_
<android.view.animation.AnimationSet: long getStartTime()> -> _SINK_
<android.media.IRemoteVolumeObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.Switch: int getCompoundPaddingLeft()> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: java.lang.String getName()> -> _SINK_
<com.android.videoeditor.util.FileUtils: java.lang.String getSimpleName(java.lang.String)> -> _SINK_
<com.android.server.PreferredComponent: java.lang.String getParseError()> -> _SINK_
<android.widget.Editor$EasyEditPopupWindow: int getTextOffset()> -> _SINK_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<com.google.common.collect.Multimaps$CustomSetMultimap: java.util.Collection createCollection()> -> _SINK_
<java.net.URLStreamHandler: int getDefaultPort()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MaxForwardsHeader createMaxForwardsHeader(int)> -> _SINK_
<javax.obex.ClientOperation: int getHeaderLength()> -> _SINK_
<android.text.Layout: float getLineRight(int)> -> _SINK_
<com.android.server.display.DisplayDevice: com.android.server.display.DisplayAdapter getAdapterLocked()> -> _SINK_
<java.net.Socket: boolean getReuseAddress()> -> _SINK_
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset descendingMultiset()> -> _SINK_
<android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()> -> _SINK_
<android.preference.PreferenceGroupAdapter: int getCount()> -> _SINK_
<android.webkit.WebViewClassic: int getScaledNavSlop()> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.MenuItem getItem()> -> _SINK_
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevPath()> -> _SINK_
<com.google.common.collect.AbstractListMultimap: java.util.Collection createCollection()> -> _SINK_
<android.graphics.drawable.GradientDrawable: int getIntrinsicHeight()> -> _SINK_
<android.view.Display: int getWidth()> -> _SINK_
<libcore.io.ErrnoException: java.lang.String getMessage()> -> _SINK_
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)> -> _SINK_
<android.content.ContentValues: java.util.ArrayList getStringArrayList(java.lang.String)> -> _SINK_
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)> -> _SINK_
<android.app.LoadedApk: android.content.res.AssetManager getAssets(android.app.ActivityThread)> -> _SINK_
<android.filterfw.core.FieldPort: java.lang.Object getTarget()> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(java.lang.String,int)> -> _SINK_
<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()> -> _SINK_
<java.text.DecimalFormatSymbols: char getPatternSeparator()> -> _SINK_
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: int getIndex(java.lang.String)> -> _SINK_
<javax.crypto.KeyAgreement: java.security.Provider getProvider()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createAck()> -> _SINK_
<com.android.mms.data.Conversation: long getThreadId()> -> _SINK_
<android.graphics.drawable.RotateDrawable$RotateState: int getChangingConfigurations()> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: int getLocalPort()> -> _SINK_
<android.widget.ImageView: int getMaxWidth()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERVisibleString: java.lang.String getString()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: java.lang.String getYear()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)> -> _SINK_
<java.security.spec.ECFieldFp: int getFieldSize()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getUaProfTagName()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getId()> -> _SINK_
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context)> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray(java.lang.Object[])> -> _SINK_
<android.os.Environment: java.lang.String getExternalStorageState()> -> _SINK_
<junit.framework.TestCase: java.lang.String toString()> -> _SINK_
<android.os.HandlerThread: android.os.Looper getLooper()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: short getFill()> -> _SINK_
<com.android.videoeditor.OverlayType: com.android.videoeditor.OverlayType[] getOverlays(android.content.Context)> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getAddress()> -> _SINK_
<com.android.deskclock.DeskClock$TabsAdapter: int getCount()> -> _SINK_
<android.view.ViewRootImpl$ViewRootHandler: java.lang.String getMessageName(android.os.Message)> -> _SINK_
<java.util.AbstractMap: java.lang.String toString()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getAlgorithm()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RSeqHeader createRSeqHeader(long)> -> _SINK_
<android.widget.GridLayout$Axis: int getCount()> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()> -> _SINK_
<android.view.View: int getMeasuredHeightAndState()> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SINK_
<android.widget.FrameLayout: int getForegroundGravity()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getShortDisplayName(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)> -> _SINK_
<android.media.MediaPlayer: android.os.Parcel getParcelParameter(int)> -> _SINK_
<android.widget.TextView: int getLineHeight()> -> _SINK_
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ViaHeader getTopmostViaHeader()> -> _SINK_
<android.view.ViewConfiguration: int getScaledOverflingDistance()> -> _SINK_
<android.os.IPowerManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()> -> _SINK_
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()> -> _SINK_
<android.media.MediaFile: java.lang.String getFileTitle(java.lang.String)> -> _SINK_
<android.view.MotionEvent: float getSize()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.Principal getIssuerDN()> -> _SINK_
<com.android.email.mail.Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.ActivityOptions: int getStartWidth()> -> _SINK_
<android.renderscript.RenderScript: android.content.Context getApplicationContext()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getAttributeCount()> -> _SINK_
<com.android.email.Controller: java.util.Collection getResultCallbacksForTest()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getVolume()> -> _SINK_
<com.android.inputmethod.latin.ImfUtils: java.lang.String getInputMethodIdOfThisIme(android.content.Context)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec getAccessibilityTransformation()> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)> -> _SINK_
<android.view.ViewTreeObserver$CopyOnWriteArray$Access: java.lang.Object get(int)> -> _SINK_
<android.widget.LinearLayout: float getWeightSum()> -> _SINK_
<com.android.internal.util.FastXmlSerializer: java.lang.String getNamespace()> -> _SINK_
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<org.apache.harmony.luni.util.DeleteOnExit: org.apache.harmony.luni.util.DeleteOnExit getInstance()> -> _SINK_
<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieEffect getEffect(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.usb.UsbManager: java.lang.String getDefaultFunction()> -> _SINK_
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getWordInstance(java.util.Locale)> -> _SINK_
<android.renderscript.Element: java.lang.String getSubElementName(int)> -> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)> -> _SINK_
<com.google.common.collect.AbstractMultimap$3: java.util.Iterator iterator()> -> _SINK_
<java.util.logging.LogRecord: long getMillis()> -> _SINK_
<com.google.common.collect.AbstractMultimap$4: java.util.Iterator iterator()> -> _SINK_
<com.google.common.collect.ImmutableCollection: java.lang.Object writeReplace()> -> _SINK_
<com.android.mms.ui.IconListAdapter$IconListItem: java.lang.String getTitle()> -> _SINK_
<junit.framework.TestCase: java.lang.String getName()> -> _SINK_
<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.String toString()> -> _SINK_
<android.os.IPermissionController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)> -> _SINK_
<java.lang.Enum: java.lang.String toString()> -> _SINK_
<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()> -> _SINK_
<android.widget.ListView$ArrowScrollFocusResult: int getAmountToScroll()> -> _SINK_
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getPeerProtocol()> -> _SINK_
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.util.ArrayList getDictionaryFiles(java.util.Locale,android.content.Context)> -> _SINK_
<java.nio.FloatBuffer: java.lang.Object array()> -> _SINK_
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.Object delegate()> -> _SINK_
<android.speech.tts.PlaybackSynthesisCallback: int getMaxBufferSize()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()> -> _SINK_
<java.text.MessageFormat: java.util.Locale getLocale()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()> -> _SINK_
<com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils: com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils getInstance()> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: java.util.TreeSet getPossibleLengths()> -> _SINK_
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getParentCellLayoutForView(android.view.View)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHmacName()> -> _SINK_
<com.android.email.mail.store.imap.ImapResponseParser: java.lang.String readUntilEol()> -> _SINK_
<gov.nist.core.GenericObjectList: gov.nist.core.GenericObject first()> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void getExtractedText(android.view.inputmethod.ExtractedTextRequest,int,int,com.android.internal.view.IInputContextCallback)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView: float getExpandedHeight()> -> _SINK_
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> -> _SINK_
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)> -> _SINK_
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)> -> _SINK_
<android.widget.ImageView: boolean getCropToPadding()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String debugDump()> -> _SINK_
<com.android.providers.telephony.MmsProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getSystemAudioCategory()> -> _SINK_
<android.os.Debug: java.lang.String getCaller()> -> _SINK_
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()> -> _SINK_
<com.google.common.io.Files$2: java.io.FileOutputStream getOutput()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> -> _SINK_
<android.os.PowerManager: int getMaximumScreenBrightnessSetting()> -> _SINK_
<android.app.backup.IRestoreSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.text.method.DialerKeyListener: char[] getAcceptedChars()> -> _SINK_
<android.view.ViewConfiguration: int getScrollBarSize()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()> -> _SINK_
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()> -> _SINK_
<javax.sip.SipFactory: javax.sip.SipFactory getInstance()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: short getFillDefault()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)> -> _SINK_
<android.widget.ListPopupWindow: int getHeight()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String)> -> _SINK_
<android.content.IIntentReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.webkit.WebView: int getVisibleTitleHeight()> -> _SINK_
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.InputStream getInputStream()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getPrefix()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getZone()> -> _SINK_
<android.media.videoeditor.OverlayFrame: java.lang.String getFilename()> -> _SINK_
<android.view.animation.LayoutAnimationController: int getOrder()> -> _SINK_
<com.android.email.mail.transport.MailTransport: java.io.InputStream getInputStream()> -> _SINK_
<android.inputmethodservice.InputMethodService: int getMaxWidth()> -> _SINK_
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: java.lang.String toString()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageObbDirectory()> -> _SINK_
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.ASN1Enumerated getInstance(java.lang.Object)> -> _SINK_
<com.android.camera.CameraPreference: android.content.SharedPreferences getSharedPreferences()> -> _SINK_
<android.app.IBackupAgent$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.UnmodifiableIterator valueIterator()> -> _SINK_
<android.graphics.ColorMatrix: float[] getArray()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getFirstMediaItem()> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<junit.framework.ComparisonFailure: java.lang.String getActual()> -> _SINK_
<android.app.Activity: android.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)> -> _SINK_
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> -> _SINK_
<com.android.providers.downloads.Helpers: java.lang.String getFullPath(java.lang.String,java.lang.String,int,java.io.File)> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: java.lang.String getParameter(java.lang.String)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.util.Map getHeaderFields()> -> _SINK_
<com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> -> _SINK_
<android.view.View: int getRight()> -> _SINK_
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()> -> _SINK_
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.Thread getFirstQueuedThread()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getRadius()> -> _SINK_
<com.android.deskclock.TimePicker: int getHours()> -> _SINK_
<android.drm.ProcessedData: java.lang.String getAccountId()> -> _SINK_
<com.android.internal.view.WindowManagerPolicyThread: android.os.Looper getLooper()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: java.util.Enumeration getIds()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: byte[] getRawContent()> -> _SINK_
<java.util.MissingResourceException: java.lang.String getClassName()> -> _SINK_
<com.google.common.collect.Multisets$ImmutableEntry: int getCount()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getExternalContent()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$900(com.android.ex.chips.BaseRecipientAdapter)> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: long[] getMatrix()> -> _SINK_
<gov.nist.javax.sip.header.MaxForwards: int getMaxForwards()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(int)> -> _SINK_
<gov.nist.javax.sip.header.CallIdentifier: java.lang.String getHost()> -> _SINK_
<android.filterfw.core.InputPort: java.lang.Object getTarget()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()> -> _SINK_
<com.android.email.activity.setup.SetupData: com.android.email.activity.setup.SetupData getInstance()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getTransport()> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)> -> _SINK_
<android.app.IStopUserCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.content.pm.IPackageDeleteObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String)> -> _SINK_
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate getCertificate()> -> _SINK_
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()> -> _SINK_
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()> -> _SINK_
<android.view.View: int getPaddingStart()> -> _SINK_
<android.renderscript.Program: android.renderscript.Type getConstant(int)> -> _SINK_
<java.nio.SocketChannelImpl: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int)> -> _SINK_
<java.util.AbstractMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.phone.PhoneUtils: java.lang.String getPresentationString(android.content.Context,int)> -> _SINK_
<android.view.View: int getTopPaddingOffset()> -> _SINK_
<android.app.AppGlobals: android.app.Application getInitialApplication()> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<com.android.email.mail.store.ImapStore: java.lang.String getImapId(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.app.Activity: android.content.Intent getIntent()> -> _SINK_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)> -> _SINK_
<java.security.KeyStoreSpi: char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter)> -> _SINK_
<java.security.MessageDigest: java.lang.String getAlgorithm()> -> _SINK_
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> -> _SINK_
<android.app.ActivityThread: android.os.Looper getLooper()> -> _SINK_
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> -> _SINK_
<java.net.MulticastSocket: byte getTTL()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: float getDur()> -> _SINK_
<java.util.TreeMap$Node: java.lang.Object getValue()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)> -> _SINK_
<android.renderscript.FieldPacker: byte[] getData()> -> _SINK_
<android.webkit.WebIconDatabaseClassic: android.webkit.WebIconDatabaseClassic getInstance()> -> _SINK_
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()> -> _SINK_
<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)> -> _SINK_
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Set keySet()> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: java.lang.Object writeReplace()> -> _SINK_
<com.android.inputmethod.keyboard.Key: int[] getCurrentDrawableState()> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.ContentHandler getContentHandler()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)> -> _SINK_
<android.os.Bundle: java.lang.Object get(java.lang.String)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()> -> _SINK_
<com.android.mms.dom.smil.parser.SmilContentHandler: org.w3c.dom.smil.SMILDocument getSmilDocument()> -> _SINK_
<java.text.FieldPosition: int getField()> -> _SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer get(char[],int,int)> -> _SINK_
<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.HardwareLayer: int getWidth()> -> _SINK_
<java.security.cert.CertPath: java.lang.String getType()> -> _SINK_
<android.widget.GridLayout$4: int getAlignmentValue(android.view.View,int,int)> -> _SINK_
<com.android.mms.transaction.TransactionBundle: java.lang.String getProxyAddress()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getEnd()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCRLs()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getEmergency()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()> -> _SINK_
<org.apache.james.mime4j.field.address.NamedMailbox: java.lang.String getAddressString(boolean)> -> _SINK_
<java.nio.MappedByteBufferAdapter: short getShort()> -> _SINK_
<java.nio.Buffer: java.lang.String toString()> -> _SINK_
<android.filterfw.core.Frame: long getTimestamp()> -> _SINK_
<com.android.server.pm.PackageSettingBase: int getCurrentEnabledStateLPr(java.lang.String,int)> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message getMessage(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.smil.SMILRootLayoutElement getRootLayout()> -> _SINK_
<java.util.LinkedHashMap: java.util.Iterator newValueIterator()> -> _SINK_
<android.webkit.WebView: java.lang.String getOriginalUrl()> -> _SINK_
<android.content.IntentSender: java.lang.String getCreatorPackage()> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: int getOpacity()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadLockCount()> -> _SINK_
<android.content.IntentFilter: java.lang.String getDataScheme(int)> -> _SINK_
<com.android.inputmethod.latin.TargetApplicationGetter: android.content.pm.ApplicationInfo getCachedApplicationInfo(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyX(android.content.res.TypedArray)> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: long getTime()> -> _SINK_
<android.app.Dialog: android.app.ActionBar getActionBar()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getHeight()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getEnd()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<java.security.Signature$SignatureImpl: byte[] engineSign()> -> _SINK_
<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1EncodableVector: com.android.org.bouncycastle.asn1.ASN1Encodable get(int)> -> _SINK_
<java.text.ParseException: int getErrorOffset()> -> _SINK_
<java.util.logging.LogRecord: java.lang.String getSourceClassName()> -> _SINK_
<java.util.TimeZone: java.lang.String getID()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getWrongPasswordStringId()> -> _SINK_
<com.google.common.collect.Multimaps$1: java.lang.Object getKey()> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: int getAttribute(int)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> -> _SINK_
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)> -> _SINK_
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)> -> _SINK_
<android.preference.RingtonePreference: boolean getShowDefault()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerUid()> -> _SINK_
<android.view.View: int getRightPaddingOffset()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.util.Iterator getMultiParameterNames()> -> _SINK_
<java.lang.Package: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: java.lang.String getSystemId()> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastUserTime()> -> _SINK_
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getText()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.ViewManager getViewManager()> -> _SINK_
<java.lang.reflect.Field: java.lang.Class getType()> -> _SINK_
<android.app.admin.DevicePolicyManager: android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader get(int)> -> _SINK_
<android.webkit.Plugin: java.lang.String getDescription()> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: int getPrefix(int)> -> _SINK_
<android.app.ISearchManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.text.method.CharacterPickerDialog$OptionsAdapter: int getCount()> -> _SINK_
<android.widget.Switch: int getSwitchMinWidth()> -> _SINK_
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()> -> _SINK_
<android.content.CursorLoader: java.lang.String getSelection()> -> _SINK_
<android.filterpacks.performance.Throughput: float getNanosPerPixel()> -> _SINK_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()> -> _SINK_
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getState()> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()> -> _SINK_
<android.widget.TextView: int getMaxLines()> -> _SINK_
<android.view.InputDevice$MotionRange: float getRange()> -> _SINK_
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()> -> _SINK_
<java.net.PasswordAuthentication: java.lang.String getUserName()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.PinListEntry: boolean getEnforcing()> -> _SINK_
<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> -> _SINK_
<android.widget.TabWidget: int getTabCount()> -> _SINK_
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()> -> _SINK_
<android.view.View: int getImportantForAccessibility()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHashName()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: long getTrackId()> -> _SINK_
<java.util.EnumMap$EnumMapValueCollection$1: java.lang.Object get(java.util.MapEntry)> -> _SINK_
<android.webkit.WebViewClassic: int getViewHeight()> -> _SINK_
<com.android.phone.PhoneGlobals: android.app.KeyguardManager getKeyguardManager()> -> _SINK_
<java.util.zip.ZipEntry: byte[] getExtra()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> -> _SINK_
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()> -> _SINK_
<com.google.android.apps.lightcycle.LightCycleApp: java.lang.String getAppVersion()> -> _SINK_
<android.os.Environment: java.io.File getDataDirectory()> -> _SINK_
<android.hardware.Camera$Parameters: float getExposureCompensationStep()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()> -> _SINK_
<com.android.mms.dom.DocumentImpl: boolean getStrictErrorChecking()> -> _SINK_
<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()> -> _SINK_
<android.view.animation.LayoutAnimationController: float getDelay()> -> _SINK_
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> -> _SINK_
<com.android.server.am.ActivityStack: com.android.server.am.TaskAccessInfo getTaskAccessInfoLocked(int,boolean)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getExpandedArray()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getMode()> -> _SINK_
<java.nio.charset.MalformedInputException: int getInputLength()> -> _SINK_
<com.android.videoeditor.ProjectsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<android.graphics.Bitmap: int getScaledHeight(int)> -> _SINK_
<android.view.Surface: int getHeight()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getPeerProtocol()> -> _SINK_
<android.widget.TextView: int getTotalPaddingRight()> -> _SINK_
<android.view.animation.Animation: boolean getDetachWallpaper()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: int getMode(android.content.Context,int,boolean)> -> _SINK_
<android.content.res.Resources: int getInteger(int)> -> _SINK_
<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getHour()> -> _SINK_
<java.security.cert.CRL: java.lang.String getType()> -> _SINK_
<com.coremedia.iso.boxes.ChunkOffsetBox: java.lang.String toString()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetwork: com.android.commands.monkey.MonkeyEvent getNextEvent()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getPageForView(android.view.View)> -> _SINK_
<android.webkit.WebViewClassic: android.net.http.SslCertificate getCertificate()> -> _SINK_
<android.webkit.WebView: java.lang.String getTitle()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: java.util.Date getNextUpdate()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame getWidgetPageAt(int)> -> _SINK_
<android.support.v13.app.FragmentPagerAdapter: android.os.Parcelable saveState()> -> _SINK_
<com.android.mms.model.RegionModel: int getWidth()> -> _SINK_
<org.apache.http.entity.StringEntity: long getContentLength()> -> _SINK_
<java.util.Date: int getMinutes()> -> _SINK_
<java.lang.Class: java.lang.Class[] getClasses()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: float getDur()> -> _SINK_
<android.app.Activity: android.view.MenuInflater getMenuInflater()> -> _SINK_
<android.animation.ValueAnimator: int getRepeatCount()> -> _SINK_
<android.filterfw.core.FrameFormat: int getBytesPerSample()> -> _SINK_
<java.util.logging.LogManager: java.util.logging.LoggingMXBean getLoggingMXBean()> -> _SINK_
<android.view.ViewConfiguration: int getMinimumFlingVelocity()> -> _SINK_
<android.widget.ProgressBar: int getMax()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getDirection()> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingHost()> -> _SINK_
<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleDependencyTypeBox getSampleDependencyTypeBox()> -> _SINK_
<android.content.ContentProviderProxy: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicWidth()> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getMessageCount()> -> _SINK_
<android.preference.Preference: java.lang.String getDependency()> -> _SINK_
<android.app.ContextImpl: java.io.File getExternalCacheDir()> -> _SINK_
<com.android.email.Email: java.lang.String getMessageDecodeErrorString()> -> _SINK_
<org.apache.harmony.luni.internal.util.TimezoneGetter: org.apache.harmony.luni.internal.util.TimezoneGetter getInstance()> -> _SINK_
<android.widget.Scroller: int getCurrX()> -> _SINK_
<android.widget.Scroller: int getCurrY()> -> _SINK_
<android.filterpacks.performance.Throughput: int getPeriodFrameCount()> -> _SINK_
<android.webkit.HTML5VideoInline: android.graphics.SurfaceTexture getSurfaceTexture(int)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getInstalledAccessibilityServiceList(int)> -> _SINK_
<gov.nist.javax.sip.header.MediaRange: java.lang.String getSubtype()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getKeyY()> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> -> _SINK_
<android.os.ICancellationSignal$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.commands.monkey.MonkeyKeyEvent: int getKeyCode()> -> _SINK_
<com.android.internal.util.BitwiseOutputStream: byte[] toByteArray()> -> _SINK_
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getKey()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getViaHost()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.util.Iterator getHeaderNames()> -> _SINK_
<libcore.internal.StringPool: java.lang.String get(char[],int,int)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarGravity()> -> _SINK_
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> -> _SINK_
<android.text.SpannableStringInternal: int getSpanFlags(java.lang.Object)> -> _SINK_
<android.media.AudioManager$FocusEventHandlerDelegate: android.os.Handler getHandler()> -> _SINK_
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()> -> _SINK_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultInAnimation()> -> _SINK_
<org.apache.http.impl.cookie.NetscapeDraftSpec: int getVersion()> -> _SINK_
<android.app.WallpaperManager: java.lang.String access$200()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: javax.security.auth.x500.X500Principal getIssuer()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)> -> _SINK_
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()> -> _SINK_
<com.google.common.collect.MapMaker: long getExpireAfterWriteNanos()> -> _SINK_
<java.nio.CharBuffer: java.lang.String toString()> -> _SINK_
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _SINK_
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> -> _SINK_
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Authorization getAuthorization()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.util.List getDownloads()> -> _SINK_
<com.android.internal.view.ActionBarPolicy: com.android.internal.view.ActionBarPolicy get(android.content.Context)> -> _SINK_
<android.widget.TextView: boolean getIncludeFontPadding()> -> _SINK_
<java.nio.HeapByteBuffer: short getShort()> -> _SINK_
<java.io.File: java.lang.String getCanonicalPath()> -> _SINK_
<com.android.internal.widget.AbsActionBarView: int getAnimatedVisibility()> -> _SINK_
<android.ddm.DdmHandleAppName: java.lang.String getAppName()> -> _SINK_
<android.graphics.Paint: java.util.Locale getTextLocale()> -> _SINK_
<android.widget.AccessibilityIterators$LineTextSegmentIterator: int getLineEdgeIndex(int,int)> -> _SINK_
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getStartRect()> -> _SINK_
<com.android.mms.dom.DocumentImpl: java.lang.String getDocumentURI()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.EntityResolver getEntityResolver()> -> _SINK_
<java.util.MapEntry: java.lang.Object getKey()> -> _SINK_
<com.android.inputmethod.latin.DicTraverseSession: long getSession()> -> _SINK_
<org.apache.http.HttpHost: int getPort()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.view.View: int getAccessibilityViewId()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeName(int)> -> _SINK_
<com.android.emailcommon.utility.Utility: java.lang.Object getFirstRowColumn(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Object,com.android.emailcommon.utility.Utility$CursorGetter)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore getCookieStore()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPermissionGroups(int)> -> _SINK_
<android.webkit.WebViewInputDispatcher$TouchStream: android.view.MotionEvent getLastEvent()> -> _SINK_
<android.content.IntentFilter: java.lang.String getCategory(int)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long getContentSize()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: javax.net.ssl.SSLSession getSession(byte[])> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getAuthenticationInfo()> -> _SINK_
<com.android.videoeditor.service.MovieEffect: int getType()> -> _SINK_
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()> -> _SINK_
<android.view.MotionEvent: int getPointerCount()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: int getAspectRatio()> -> _SINK_
<android.widget.ActivityChooserView: android.widget.ActivityChooserModel getDataModel()> -> _SINK_
<org.apache.http.cookie.CookieOrigin: int getPort()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: int getType()> -> _SINK_
<com.google.common.collect.BstCountBasedBalancePolicies$3: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> -> _SINK_
<android.view.MotionEvent: int getMetaState()> -> _SINK_
<com.google.common.collect.BstCountBasedBalancePolicies$1: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> -> _SINK_
<com.google.common.collect.BstCountBasedBalancePolicies$2: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()> -> _SINK_
<java.lang.ProcessManager: java.lang.ProcessManager getInstance()> -> _SINK_
<com.android.mms.MmsConfig: int getMaxMessageCountPerThread()> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultThumbnail()> -> _SINK_
<com.android.inputmethod.latin.ResourceUtils: float getDimensionOrFraction(android.content.res.TypedArray,int,int,float)> -> _SINK_
<libcore.io.IoBridge: java.lang.Object getSocketOption(java.io.FileDescriptor,int)> -> _SINK_
<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()> -> _SINK_
<gov.nist.core.GenericObject: gov.nist.core.Match getMatcher()> -> _SINK_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)> -> _SINK_
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getRequestMethod()> -> _SINK_
<android.widget.ProgressBar: int getSecondaryProgress()> -> _SINK_
<com.android.email.activity.MailboxListFragment: boolean getEnableHighlight()> -> _SINK_
<javax.crypto.Mac: byte[] doFinal(byte[])> -> _SINK_
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getMacSpec()> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentType()> -> _SINK_
<libcore.net.http.HttpConnection: libcore.net.http.HttpConnection$Address getAddress()> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getLoadingView()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(int)> -> _SINK_
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getFallbackIcon()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> -> _SINK_
<android.preference.Preference: boolean getShouldDisableView()> -> _SINK_
<android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()> -> _SINK_
<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getEncoded()> -> _SINK_
<android.view.View: int getVerticalScrollbarPosition()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] encrypt(byte,byte[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: int getUidForPackage(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)> -> _SINK_
<java.nio.FloatArrayBuffer: java.nio.FloatBuffer get(float[],int,int)> -> _SINK_
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy getAggregatePolicy()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.WindowInfo getWindowInfo(android.os.IBinder)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: int getFrequency()> -> _SINK_
<com.android.camera.CameraManager: com.android.camera.CameraManager$CameraProxy cameraOpen(int)> -> _SINK_
<com.android.exchange.adapter.MoveItemsParser: java.lang.String getNewServerId()> -> _SINK_
<java.net.URLConnection: boolean getUseCaches()> -> _SINK_
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])> -> _SINK_
<android.media.effect.FilterEffect: android.filterfw.core.FilterContext getFilterContext()> -> _SINK_
<libcore.net.http.HttpsHandler: int getDefaultPort()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection getDialogs(javax.sip.DialogState)> -> _SINK_
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: org.apache.http.HttpEntity getEntity()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ContactList getContactHeaders()> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Flag[] getPermanentFlags()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getUseCompactFormat()> -> _SINK_
<dalvik.system.profiler.HprofData: long getStartMillis()> -> _SINK_
<gov.nist.javax.sip.header.RAck: int getCSeqNumber()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getShortcutInputMethodsAndSubtypes()> -> _SINK_
<android.widget.Toast: int getXOffset()> -> _SINK_
<android.media.videoeditor.Overlay: android.media.videoeditor.MediaItem getMediaItem()> -> _SINK_
<com.android.internal.util.TypedProperties: long getLong(java.lang.String)> -> _SINK_
<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)> -> _SINK_
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.net.URI: java.lang.String getRawAuthority()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.content.res.Resources: int getDimensionPixelOffset(int)> -> _SINK_
<javax.sip.TimeoutEvent: javax.sip.Timeout getTimeout()> -> _SINK_
<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()> -> _SINK_
<com.google.common.collect.Lists$ReverseList: java.lang.Object get(int)> -> _SINK_
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> -> _SINK_
<java.net.ProxySelector: java.net.ProxySelector getDefault()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getParameter(java.lang.String)> -> _SINK_
<android.view.HardwareRenderer$Gl20Renderer: int[] getConfig(boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> -> _SINK_
<android.view.View: float getRightFadingEdgeStrength()> -> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> -> _SINK_
<android.media.videoeditor.Effect: long getStartTime()> -> _SINK_
<com.android.launcher2.Workspace: java.util.ArrayList getWorkspaceAndHotseatCellLayouts()> -> _SINK_
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieOverlay getOverlay()> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.util.Map asMap()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int getRotation()> -> _SINK_
<java.nio.HeapByteBuffer: byte get(int)> -> _SINK_
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualVideoUploadTaskProvider()> -> _SINK_
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()> -> _SINK_
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()> -> _SINK_
<android.view.MotionEvent: int getDeviceId()> -> _SINK_
<android.widget.AdapterViewAnimator: int getWindowSize()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)> -> _SINK_
<com.android.camera.MosaicFrameProcessor: byte[] getFinalMosaicNV21()> -> _SINK_
<java.text.DateFormat: java.text.NumberFormat getNumberFormat()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: int getHeight()> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.GestureRecorder getGestureRecorder()> -> _SINK_
<java.io.EmulatedFields: int get(java.lang.String,int)> -> _SINK_
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()> -> _SINK_
<org.apache.harmony.security.x509.GeneralNames: byte[] getEncoded()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getGravity()> -> _SINK_
<android.view.View: float getHorizontalScrollFactor()> -> _SINK_
<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()> -> _SINK_
<android.app.ITransientNotification$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.data.Conversation: java.lang.String verifySingleRecipient(android.content.Context,long,java.lang.String)> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()> -> _SINK_
<com.android.email.Preferences: int getOneTimeInitializationProgress()> -> _SINK_
<java.io.EmulatedFieldsForLoading: float get(java.lang.String,float)> -> _SINK_
<java.util.Date: int getMonth()> -> _SINK_
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])> -> _SINK_
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element getOldestElement()> -> _SINK_
<android.widget.Spinner$DropdownPopup: java.lang.CharSequence getHintText()> -> _SINK_
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getSubTypeForTest()> -> _SINK_
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: com.android.inputmethod.accessibility.KeyCodeDescriptionMapper getInstance()> -> _SINK_
<org.apache.http.client.methods.HttpOptions: java.lang.String getMethod()> -> _SINK_
<gov.nist.core.LexerCore: int getPtr()> -> _SINK_
<android.text.style.StrikethroughSpan: int getSpanTypeId()> -> _SINK_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> -> _SINK_
<com.google.common.collect.BstOperations: com.google.common.collect.BstNode insertMax(com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNodeFactory,com.google.common.collect.BstBalancePolicy)> -> _SINK_
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> -> _SINK_
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: long getItemId(int)> -> _SINK_
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> -> _SINK_
<android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()> -> _SINK_
<android.content.ContextWrapper: java.lang.String getPackageCodePath()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getSystemDecorRectLw(android.graphics.Rect)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributePrefix(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)> -> _SINK_
<android.widget.GridLayout: int getAlignmentMode()> -> _SINK_
<java.net.URI: java.lang.String getUserInfo()> -> _SINK_
<android.webkit.WebSettings: boolean getUseDoubleTree()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)> -> _SINK_
<com.android.uiautomator.core.UiSelector: java.lang.String getString(int)> -> _SINK_
<java.net.URL: java.lang.String getUserInfo()> -> _SINK_
<org.apache.harmony.security.x509.Extensions$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.view.ViewStub: int getInflatedId()> -> _SINK_
<android.server.search.Searchables: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SINK_
<android.animation.ValueAnimator: int getCurrentAnimationsCount()> -> _SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: int getLineNumber()> -> _SINK_
<android.media.MediaRecorder: int getAudioSourceMax()> -> _SINK_
<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()> -> _SINK_
<com.android.commands.svc.Svc$Command: java.lang.String name()> -> _SINK_
<gov.nist.javax.sip.header.StatusLine: java.lang.String getVersionMajor()> -> _SINK_
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getEntryCount()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()> -> _SINK_
<com.android.deskclock.DeskClock$TabsAdapter: android.app.Fragment getItem(int)> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> -> _SINK_
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String get(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getHost()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()> -> _SINK_
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<org.json.JSONObject: double getDouble(java.lang.String)> -> _SINK_
<org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String getString(java.nio.ByteBuffer,int)> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getVolume()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()> -> _SINK_
<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes(java.lang.Class)> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getLastChild()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.DERApplicationSpecific getInstance(java.lang.Object)> -> _SINK_
<java.nio.ShortArrayBuffer: short get(int)> -> _SINK_
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress getPeerInetAddress()> -> _SINK_
<android.webkit.HTML5VideoView: boolean getStartWhenPrepared()> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object getValue()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: byte[] getBody()> -> _SINK_
<java.nio.DirectByteBuffer: byte get()> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()> -> _SINK_
<java.net.URL: java.lang.String getPath()> -> _SINK_
<android.hardware.Sensor: int getHandle()> -> _SINK_
<java.net.URI: java.lang.String getPath()> -> _SINK_
<android.security.KeyStore: android.security.KeyStore getInstance()> -> _SINK_
<gov.nist.javax.sip.header.TimeStamp: float getDelay()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()> -> _SINK_
<gov.nist.javax.sip.header.StatusLine: java.lang.String getVersionMinor()> -> _SINK_
<com.android.launcher2.Workspace: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> -> _SINK_
<org.apache.harmony.security.x509.CertificatePolicies$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: gov.nist.core.NameValueList getParameters()> -> _SINK_
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskResId()> -> _SINK_
<java.net.URLConnection: java.util.Map getHeaderFields()> -> _SINK_
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerPid()> -> _SINK_
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()> -> _SINK_
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)> -> _SINK_
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> -> _SINK_
<android.content.ContentProvider$Transport: android.content.ContentProvider getContentProvider()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.Object getApplicationData()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: int getVersion()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String getMessage()> -> _SINK_
<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])> -> _SINK_
<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])> -> _SINK_
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.res.Resources)> -> _SINK_
<com.android.launcher2.BubbleTextView: int getPressedOrFocusedBackgroundPadding()> -> _SINK_
<gov.nist.javax.sip.header.ims.PServedUser: java.lang.String getSessionCase()> -> _SINK_
<java.lang.reflect.Field: char getChar(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPacketSourcePort()> -> _SINK_
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()> -> _SINK_
<com.google.common.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.harmony.security.x509.Certificate: byte[] getEncoded()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String encodeBody()> -> _SINK_
<android.drm.DrmEvent: java.lang.String getMessage()> -> _SINK_
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SINK_
<com.android.systemui.statusbar.BaseStatusBar: android.view.View$OnLongClickListener getNotificationLongClicker()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardTextsSet: java.lang.String getText(java.lang.String)> -> _SINK_
<android.media.audiofx.BassBoost: boolean getStrengthSupported()> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)> -> _SINK_
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getTitle()> -> _SINK_
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> -> _SINK_
<android.webkit.CertTool: java.lang.String getCertType(java.lang.String)> -> _SINK_
<android.filterfw.core.VertexFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getSentenceInstance(java.util.Locale)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForArray: java.lang.reflect.Type getGenericComponentType()> -> _SINK_
<android.widget.ListPopupWindow: int getWidth()> -> _SINK_
<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.email.activity.setup.EditQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SINK_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<libcore.net.http.HttpEngine: java.net.HttpURLConnection getHttpConnectionToCache()> -> _SINK_
<android.media.videoeditor.Overlay: java.lang.String getId()> -> _SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: java.lang.String getVisitedNetworkID()> -> _SINK_
<android.widget.AbsListView: int getListPaddingBottom()> -> _SINK_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SINK_
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)> -> _SINK_
<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] engineGenerateSeed(int)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: int getSelectedViewPos()> -> _SINK_
<com.android.launcher2.PagedView: android.view.View getScrollingIndicator()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getBulkEncryptionAlgorithm()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: int getViaPort()> -> _SINK_
<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicy()> -> _SINK_
<com.android.server.power.DisplayPowerState: float getElectronBeamLevel()> -> _SINK_
<java.beans.PropertyChangeEvent: java.lang.Object getPropagationId()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)> -> _SINK_
<java.security.AccessController: java.security.AccessControlContext getContext()> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getPeerAddress()> -> _SINK_
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: com.google.android.apps.lightcycle.storage.LocalSessionStorage getLocalSessionStorage()> -> _SINK_
<android.webkit.CacheManager$CacheResult: long getExpires()> -> _SINK_
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> -> _SINK_
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<javax.sip.IOExceptionEvent: int getPort()> -> _SINK_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SINK_
<android.text.StaticLayout: int getParagraphDirection(int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> -> _SINK_
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)> -> _SINK_
<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()> -> _SINK_
<android.content.ISyncContext$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getCameraFieldOfViewDegrees(float)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: long getBytesUploaded()> -> _SINK_
<android.widget.RelativeLayout$LayoutParams: int[] getRules()> -> _SINK_
<com.android.videoeditor.TransitionType: int getType()> -> _SINK_
<junit.runner.StandardTestSuiteLoader: java.lang.Class load(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object clone()> -> _SINK_
<com.android.internal.statusbar.StatusBarNotification: int getUserId()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)> -> _SINK_
<java.net.URL: java.lang.String getProtocol()> -> _SINK_
<com.google.common.collect.Multimaps$CustomSortedSetMultimap: java.util.Collection createCollection()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getFromTag()> -> _SINK_
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy computeAggregatePolicy()> -> _SINK_
<com.google.common.collect.BstOperations: com.google.common.collect.BstNode insertMin(com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNodeFactory,com.google.common.collect.BstBalancePolicy)> -> _SINK_
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> -> _SINK_
<android.gesture.GestureStore: int getSequenceType()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()> -> _SINK_
<com.google.common.collect.ImmutableCollection: java.util.Iterator iterator()> -> _SINK_
<gov.nist.javax.sip.header.Via: int getRPort()> -> _SINK_
<com.android.mms.util.PduLoaderManager: java.lang.String getTag()> -> _SINK_
<com.android.server.IntentResolverOld: java.util.Set filterSet()> -> _SINK_
<android.view.ViewConfiguration: int getScaledTouchSlop()> -> _SINK_
<android.security.KeyStore: byte[] sign(java.lang.String,byte[])> -> _SINK_
<com.android.camera.ActivityBase$MyAppBridge: com.android.gallery3d.ui.ScreenNail getCameraScreenNail()> -> _SINK_
<com.android.systemui.statusbar.phone.PanelHolder: int getChildDrawingOrder(int,int)> -> _SINK_
<android.hardware.SystemSensorManager$ListenerDelegate: java.util.List getSensors()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ContentLengthHeader createContentLengthHeader(int)> -> _SINK_
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: gov.nist.javax.sip.header.SIPHeader getSIPHeader()> -> _SINK_
<android.graphics.YuvImage: byte[] getYuvData()> -> _SINK_
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$Settings getProperties()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ErrorHandler getErrorHandler()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()> -> _SINK_
<com.android.providers.media.MediaThumbRequest: java.util.Comparator getComparator()> -> _SINK_
<java.nio.charset.Charset: java.lang.String displayName()> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$MyAdapter: int getCount()> -> _SINK_
<javax.security.auth.x500.X500Principal: byte[] getEncoded()> -> _SINK_
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrY()> -> _SINK_
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrX()> -> _SINK_
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getHorizontalFadingEdgeLengthCallback()> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<java.util.Collections$SynchronizedList: java.lang.Object get(int)> -> _SINK_
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String)> -> _SINK_
<android.provider.Settings$Bookmarks: java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)> -> _SINK_
<android.text.style.BulletSpan: int getSpanTypeId()> -> _SINK_
<android.util.EventLog: java.lang.String getTagName(int)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()> -> _SINK_
<android.app.Instrumentation: android.content.ComponentName getComponentName()> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.google.common.collect.ForwardingMultiset: java.util.Set entrySet()> -> _SINK_
<java.text.NumberFormat: int getMinimumFractionDigits()> -> _SINK_
<android.os.Bundle: java.lang.String getString(java.lang.String)> -> _SINK_
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()> -> _SINK_
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -> _SINK_
<android.widget.RemoteViews$BitmapCache: android.graphics.Bitmap getBitmapForId(int)> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getWordBeforeCursorIfAtEndOfWord(com.android.inputmethod.latin.SettingsValues)> -> _SINK_
<java.net.ServerSocket: int getReceiveBufferSize()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getContentType()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createSIPRequest(gov.nist.javax.sip.header.RequestLine,boolean)> -> _SINK_
<com.android.exchange.adapter.Parser: int getValueInt()> -> _SINK_
<android.widget.TextView: int getMaxHeight()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getHeaders(java.lang.String)> -> _SINK_
<java.text.Collator: int getStrength()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> -> _SINK_
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: java.lang.String getLanguage()> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: java.lang.String getRel()> -> _SINK_
<java.text.ParsePosition: int getErrorIndex()> -> _SINK_
<com.android.mms.MmsApp: com.android.mms.MmsApp getApplication()> -> _SINK_
<java.text.Collator: int compare(java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Integer: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getCount()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()> -> _SINK_
<dalvik.system.VMRuntime: long getMinimumHeapSize()> -> _SINK_
<android.widget.CursorAdapter: android.widget.Filter getFilter()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int getSessionTimeout()> -> _SINK_
<android.text.SpannedString: int getSpanFlags(java.lang.Object)> -> _SINK_
<com.android.videoeditor.util.StringUtils: java.lang.String getDurationAsString(android.content.Context,long)> -> _SINK_
<android.widget.TextView: int getPaintFlags()> -> _SINK_
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> -> _SINK_
<com.android.camera.ui.PieItem: int getIntrinsicWidth()> -> _SINK_
<com.android.org.bouncycastle.asn1.BEROctetStringParser: java.io.InputStream getOctetStream()> -> _SINK_
<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<com.android.launcher2.LauncherProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<gov.nist.core.LexerCore: java.lang.String getNextId()> -> _SINK_
<org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])> -> _SINK_
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()> -> _SINK_
<com.android.mms.layout.HVGALayoutParameters: int getWidth()> -> _SINK_
<java.nio.FloatToByteBufferAdapter: float get()> -> _SINK_
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.util.List getMediaItems()> -> _SINK_
<android.view.MotionEvent: float getHistoricalPressure(int,int)> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer: int getCurrentPosition()> -> _SINK_
<android.content.Intent$FilterComparison: android.content.Intent getIntent()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: int getAzimuthInDeg()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getWriteHoldCount()> -> _SINK_
<android.os.Debug: int getGlobalAllocCount()> -> _SINK_
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()> -> _SINK_
<android.widget.NumberPicker: int getMaxValue()> -> _SINK_
<android.media.MediaFile: android.media.MediaFile$MediaFileType getFileType(java.lang.String)> -> _SINK_
<libcore.io.ForwardingOs: java.lang.String getnameinfo(java.net.InetAddress,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPreferredPackages(int)> -> _SINK_
<java.util.UnknownFormatConversionException: java.lang.String getConversion()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)> -> _SINK_
<java.io.EmulatedFields: float get(java.lang.String,float)> -> _SINK_
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()> -> _SINK_
<com.google.common.collect.BstCountBasedBalancePolicies$2: com.google.common.collect.BstNode combine(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.google.common.collect.BstCountBasedBalancePolicies$1: com.google.common.collect.BstNode combine(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> -> _SINK_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SINK_
<com.android.internal.os.AtomicFile: byte[] readFully()> -> _SINK_
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)> -> _SINK_
<com.android.camera.ComboPreferences: com.android.camera.ComboPreferences get(android.content.Context)> -> _SINK_
<com.google.common.collect.ForwardingConcurrentMap: java.lang.Object delegate()> -> _SINK_
<android.view.Display: int getRotation()> -> _SINK_
<android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getAudioSamplingFrequency()> -> _SINK_
<java.util.TimeZone: java.lang.String getDisplayName()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getCode(java.lang.String,com.android.inputmethod.keyboard.internal.KeyboardCodesSet)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: int getApplicationTag()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle()> -> _SINK_
<com.android.exchange.adapter.Parser: java.lang.String getValue()> -> _SINK_
<android.webkit.WebView: int getContentWidth()> -> _SINK_
<com.android.mms.model.MediaModel: byte[] getData()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.io.InputStream getErrorStream()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.RecordRouteList getRecordRouteHeaders()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: org.apache.harmony.security.asn1.ASN1GeneralizedTime getInstance()> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.String getSignatureAttribute()> -> _SINK_
<android.webkit.WebStorageClassic: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)> -> _SINK_
<android.os.storage.IObbActionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.io.Console: java.io.Console getConsole()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getToTag()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()> -> _SINK_
<java.lang.reflect.Field: double getDouble(java.lang.Object)> -> _SINK_
<java.util.ResourceBundle: java.util.Locale getLocale()> -> _SINK_
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)> -> _SINK_
<gov.nist.javax.sip.header.MinExpires: int getExpires()> -> _SINK_
<android.webkit.WebView: java.lang.String getUrl()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: javax.security.auth.x500.X500Principal getIssuer()> -> _SINK_
<com.google.common.collect.MapMaker$NullComputingConcurrentMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.MaxForwardsHeader getMaxForwards()> -> _SINK_
<com.google.common.collect.AbstractSortedMultiset: java.util.Set createElementSet()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getUtteranceId()> -> _SINK_
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getMiddleDisplayName(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()> -> _SINK_
<android.content.Loader: android.content.Context getContext()> -> _SINK_
<android.filterfw.core.NativeFrame: java.lang.Object getObjectValue()> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageDirectory()> -> _SINK_
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()> -> _SINK_
<android.filterfw.core.Frame: android.filterfw.core.FrameManager getFrameManager()> -> _SINK_
<java.net.DatagramSocket: int getTrafficClass()> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub: android.os.IBinder asBinder()> -> _SINK_
<libcore.io.ForwardingOs: int getpid()> -> _SINK_
<android.view.View: int getLayerType()> -> _SINK_
<android.widget.TimePicker: int getBaseline()> -> _SINK_
<android.app.Fragment: boolean getRetainInstance()> -> _SINK_
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()> -> _SINK_
<org.apache.harmony.security.x509.DNParser: java.util.List parse()> -> _SINK_
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: int getNumOfEntries()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Shader: int getUniform(int,java.lang.String)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedSortedSet: java.util.SortedSet getSortedSetDelegate()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -> _SINK_
<android.text.StaticLayout: int getBottomPadding()> -> _SINK_
<java.util.Currency: java.lang.String getCurrencyCode()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.GLTexture: int getIndex()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.PhotoCollection: int getNumFrames()> -> _SINK_
<com.android.videoeditor.widgets.MediaItemView: android.view.View$DragShadowBuilder getShadowBuilder()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getDisplayName()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getGlobal()> -> _SINK_
<android.webkit.PluginManager: java.lang.String getPluginsAPKName(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: float getScale()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter$CombinedMailboxLoader: android.database.Cursor loadInBackground()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.io.InputStream getInputStream()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: boolean getDefaultUseCaches()> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SINK_
<android.os.CountDownTimer: android.os.CountDownTimer start()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.CallIdHeader getCallId()> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String)> -> _SINK_
<android.widget.CursorAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: double getWidth()> -> _SINK_
<java.security.SecureRandom: byte[] generateSeed(int)> -> _SINK_
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()> -> _SINK_
<com.android.internal.util.MemInfoReader: long getCachedSize()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getIfNoneMatch()> -> _SINK_
<android.preference.PreferenceGroupAdapter: android.preference.Preference getItem(int)> -> _SINK_
<android.app.ContextImpl: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)> -> _SINK_
<android.media.AudioManager: int getDevicesForStream(int)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: int getProgress()> -> _SINK_
<java.util.TimerTask: long getWhen()> -> _SINK_
<java.net.HttpURLConnection: boolean getFollowRedirects()> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap)> -> _SINK_
<java.util.concurrent.Semaphore$Sync: int getPermits()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getLrParam()> -> _SINK_
<com.android.mms.data.WorkingMessage: com.android.mms.data.Conversation getConversation()> -> _SINK_
<com.android.exchange.Eas: java.lang.Double getProtocolVersionDouble(java.lang.String)> -> _SINK_
<android.app.LoadedApk: java.io.File getDataDirFile()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)> -> _SINK_
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstance()> -> _SINK_
<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)> -> _SINK_
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> -> _SINK_
<libcore.util.ZoneInfoDB: java.lang.String[] getAvailableIDs()> -> _SINK_
<android.webkit.HTML5Audio$IsPrivateBrowsingEnabledGetter: boolean get()> -> _SINK_
<android.content.CursorLoader: java.lang.String[] getProjection()> -> _SINK_
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getParentNode()> -> _SINK_
<com.android.mms.MmsConfig: int getDefaultSMSMessagesPerThread()> -> _SINK_
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)> -> _SINK_
<java.lang.ThreadGroup: java.lang.String getName()> -> _SINK_
<com.android.systemui.statusbar.policy.CurrentUserTracker: int getCurrentUserId()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)> -> _SINK_
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm()> -> _SINK_
<com.android.mms.ui.MessageItem: int getMmsDownloadStatus()> -> _SINK_
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$PluginState getPluginState()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.OverlayView: int getState()> -> _SINK_
<android.app.WallpaperInfo: java.lang.String getServiceName()> -> _SINK_
<android.util.XmlPullAttributes: float getAttributeFloatValue(java.lang.String,java.lang.String,float)> -> _SINK_
<java.lang.ref.Reference: java.lang.Object get()> -> _SINK_
<android.util.SparseLongArray: long get(int)> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getEncoding()> -> _SINK_
<android.media.MediaPlayer$TrackInfo: int getTrackType()> -> _SINK_
<org.apache.harmony.security.x509.KeyUsage: boolean[] getKeyUsage()> -> _SINK_
<gov.nist.javax.sip.header.Reason: java.lang.String getName()> -> _SINK_
<java.text.DateFormat: java.lang.Object clone()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$AccountsLoader: android.database.Cursor loadInBackground()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte,byte)> -> _SINK_
<com.google.common.collect.MapMaker: long getExpireAfterAccessNanos()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()> -> _SINK_
<java.util.jar.Manifest: int getMainAttributesEnd()> -> _SINK_
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> -> _SINK_
<android.view.DragEvent: android.content.ClipData getClipData()> -> _SINK_
<android.preference.Preference: int getLayoutResource()> -> _SINK_
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)> -> _SINK_
<android.widget.Spinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> -> _SINK_
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getReadFd()> -> _SINK_
<android.widget.RemoteViews$Action: java.lang.String getUniqueKey()> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)> -> _SINK_
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket()> -> _SINK_
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)> -> _SINK_
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getUtranCellID3GPP()> -> _SINK_
<android.content.ClipData: android.content.ClipDescription getDescription()> -> _SINK_
<org.apache.harmony.security.x509.Extensions: byte[] getEncoded()> -> _SINK_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getFailedUnlockAttempts()> -> _SINK_
<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()> -> _SINK_
<android.os.Environment: java.io.File getSecureDataDirectory()> -> _SINK_
<android.app.ActionBar: android.content.Context getThemedContext()> -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment: java.lang.String getTitleFromArgs(android.os.Bundle)> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getServices(int,int)> -> _SINK_
<com.google.common.collect.AbstractSortedMultiset: java.util.Iterator descendingIterator()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()> -> _SINK_
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object[] getSections()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: java.util.List getAuthenticatedAttributes()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: int getUid()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: int getViaPort()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryInstrumentation(java.lang.String,int)> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> -> _SINK_
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.email.activity.MessageListFragment: long getAccountId()> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)> -> _SINK_
<android.view.View: float getRotationY()> -> _SINK_
<android.view.View: float getRotationX()> -> _SINK_
<java.lang.SecurityManager: int classLoaderDepth()> -> _SINK_
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.MediaLinearLayout getMediaLayout()> -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: int getType()> -> _SINK_
<com.android.inputmethod.keyboard.Key: int getDrawWidth()> -> _SINK_
<com.android.launcher2.LauncherProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<org.apache.http.ProtocolVersion: int getMinor()> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getTimescale()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getBuiltInZoomControls()> -> _SINK_
<com.android.mms.util.DraftCache: com.android.mms.util.DraftCache getInstance()> -> _SINK_
<org.apache.harmony.security.x509.CertificateList: byte[] getEncoded()> -> _SINK_
<android.filterfw.core.Scheduler: android.filterfw.core.FilterGraph getGraph()> -> _SINK_
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: long getExpirationTime()> -> _SINK_
<android.content.res.TypedArray: float getFraction(int,int,int,float)> -> _SINK_
<android.app.Fragment: java.lang.CharSequence getText(int)> -> _SINK_
<android.widget.TableRow: int getVirtualChildCount()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getUrl()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.SipProvider createSipProvider(javax.sip.ListeningPoint)> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithm()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$EvictionQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<android.text.Layout$SpannedEllipsizer: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String toString()> -> _SINK_
<libcore.net.http.RequestHeaders: int getMinFreshSeconds()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int)> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getModifiers()> -> _SINK_
<android.view.KeyCharacterMap: int get(int,int)> -> _SINK_
<android.view.View: android.view.HardwareRenderer getHardwareRenderer()> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: android.view.Surface getSurface()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Collection getIssuerAlternativeNames()> -> _SINK_
<com.android.mms.util.Recycler$SmsRecycler: long getThreadId(android.database.Cursor)> -> _SINK_
<android.content.res.XmlBlock$Parser: int getAttributeUnsignedIntValue(int,int)> -> _SINK_
<com.android.camera.Util: int getCameraOrientation(int)> -> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: void getContent(java.nio.ByteBuffer)> -> _SINK_
<com.android.ex.chips.RecipientAlternatesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.io.File: java.lang.String getParent()> -> _SINK_
<android.content.IIntentSender$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.graphics.Bitmap: int getScaledWidth(int)> -> _SINK_
<android.graphics.drawable.Drawable: int getLevel()> -> _SINK_
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()> -> _SINK_
<android.filterpacks.imageproc.NegativeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.mms.model.MediaModel: int getBegin()> -> _SINK_
<com.android.internal.util.StateMachine: int getLogRecCount()> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetResourceId()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToPoint(float)> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message getMessage(java.lang.String)> -> _SINK_
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()> -> _SINK_
<android.app.Instrumentation$ActivityResult: int getResultCode()> -> _SINK_
<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()> -> _SINK_
<com.android.launcher2.PagedView: int getPageCount()> -> _SINK_
<com.android.camera.ListPreference: java.lang.String getValue()> -> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownAnimationStyle()> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebView$HitTestResult getHitTestResult()> -> _SINK_
<android.app.IThumbnailReceiver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: int[] getParameterIntArray(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> -> _SINK_
<android.widget.GridView: int getStretchMode()> -> _SINK_
<android.widget.TextView: int getBottomPaddingOffset()> -> _SINK_
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SINK_
<java.nio.HeapByteBuffer: byte get()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(boolean)> -> _SINK_
<com.android.email.provider.ContentCache$CounterMap: int getCount(java.lang.Object)> -> _SINK_
<android.emoji.EmojiFactory: java.lang.String getVendorSpecificPuaFromAndroidPua(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: int getBeginConstraints()> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> -> _SINK_
<javax.obex.ClientSession: javax.obex.Operation get(javax.obex.HeaderSet)> -> _SINK_
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getContentType()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndColumn()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getSansSerifFontFamily()> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: long getWhat()> -> _SINK_
<android.widget.CheckedTextView: android.graphics.drawable.Drawable getCheckMarkDrawable()> -> _SINK_
<android.widget.TextView: int getImeActionId()> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getVolumeHandling()> -> _SINK_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getAppRenderingMode()> -> _SINK_
<javax.crypto.spec.DHParameterSpec: int getL()> -> _SINK_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: long getLastModified()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> -> _SINK_
<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)> -> _SINK_
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()> -> _SINK_
<com.android.emailcommon.TrafficFlags: int getSmtpFlags(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Collection createCollection(java.lang.Object)> -> _SINK_
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor getCursor()> -> _SINK_
<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getNavigationItemCount()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String getMessage()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: long getEventTime()> -> _SINK_
<java.lang.ThreadLocal$Values: java.lang.Object getAfterMiss(java.lang.ThreadLocal)> -> _SINK_
<com.google.common.collect.Sets$CartesianSet$Axis: java.lang.Object getForIndex(int)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: int getPercentageUploaded()> -> _SINK_
<android.widget.AdapterViewAnimator: android.widget.FrameLayout getFrameForChild()> -> _SINK_
<android.widget.AbsListView: long[] getCheckedItemIds()> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: com.google.android.picasastore.PicasaStoreFacade get(android.content.Context)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: boolean[] getIssuerUniqueID()> -> _SINK_
<android.webkit.JsResult: boolean getResult()> -> _SINK_
<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.hardware.Camera$Parameters: boolean getVideoStabilization()> -> _SINK_
<com.android.phone.PhoneGlobals: com.android.internal.telephony.Phone getPhone()> -> _SINK_
<java.text.NumberFormat: java.lang.Object clone()> -> _SINK_
<android.animation.FloatKeyframeSet: java.lang.Object getValue(float)> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> -> _SINK_
<org.apache.harmony.security.x509.DNParser: char getUTF8()> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.Object[] standardToArray()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(long)> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getHost()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: android.hardware.Camera$PreviewCallback getPreviewCallback()> -> _SINK_
<libcore.net.http.ResponseHeaders: int getContentLength()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.security.Principal getLocalPrincipal()> -> _SINK_
<android.webkit.WebSettings: boolean getSaveFormData()> -> _SINK_
<com.android.server.IntentResolver: java.util.Set filterSet()> -> _SINK_
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> -> _SINK_
<com.android.email.mail.Store: java.lang.Class getSettingActivityClass()> -> _SINK_
<com.android.mms.transaction.MessagingNotification: long getThreadId(android.content.Context,android.net.Uri)> -> _SINK_
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()> -> _SINK_
<android.view.Display: int getDisplayId()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getRealAlbumId(java.lang.String,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)> -> _SINK_
<java.security.spec.EllipticCurve: byte[] getSeed()> -> _SINK_
<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkViews$QueryViewCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)> -> _SINK_
<java.io.EmulatedFields: short get(java.lang.String,short)> -> _SINK_
<java.text.CollationElementIterator: int getMaxExpansion(int)> -> _SINK_
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawHorizontalTrack()> -> _SINK_
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance()> -> _SINK_
<com.android.launcher2.LauncherModel: java.util.ArrayList getWorkspaceShortcutItemInfosWithIntent(android.content.Intent)> -> _SINK_
<com.android.internal.database.SortCursor: double getDouble(int)> -> _SINK_
<android.view.View: int getVisibility()> -> _SINK_
<com.android.phone.PhoneGlobals: android.content.Intent createInCallIntent(boolean)> -> _SINK_
<java.lang.reflect.Field: java.lang.String getName()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getText()> -> _SINK_
<android.preference.Preference: android.content.Context getContext()> -> _SINK_
<android.media.videoeditor.TransitionAlpha: int getRGBFileWidth()> -> _SINK_
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object getKey()> -> _SINK_
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.OutputStream getOutputStream()> -> _SINK_
<android.view.View: android.graphics.Matrix getMatrix()> -> _SINK_
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()> -> _SINK_
<com.google.common.collect.ImmutableMap: java.lang.Object writeReplace()> -> _SINK_
<android.view.ViewConfiguration: int getDoubleTapTimeout()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: java.lang.String getDisplayName(android.database.Cursor)> -> _SINK_
<android.widget.AbsSpinner: android.view.View getSelectedView()> -> _SINK_
<com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)> -> _SINK_
<com.coremedia.iso.boxes.mdat.MediaDataBox: long getSize()> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> -> _SINK_
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandom: java.lang.String getKeyName(int)> -> _SINK_
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> -> _SINK_
<com.android.mms.transaction.HttpUtils: java.lang.String getCurrentAcceptLanguage(java.util.Locale)> -> _SINK_
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()> -> _SINK_
<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getName()> -> _SINK_
<android.graphics.drawable.Drawable: int getChangingConfigurations()> -> _SINK_
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()> -> _SINK_
<android.util.NtpTrustedTime: long getCachedNtpTimeReference()> -> _SINK_
<com.android.email.FolderProperties: com.android.email.FolderProperties getInstance(android.content.Context)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> -> _SINK_
<com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.InputPointers: int[] getTimes()> -> _SINK_
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> -> _SINK_
<com.android.mms.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> -> _SINK_
<gov.nist.javax.sip.DialogTimeoutEvent: gov.nist.javax.sip.DialogTimeoutEvent$Reason getReason()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: long getExpiration()> -> _SINK_
<java.text.NumberFormat: java.lang.String format(double)> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableCollatorLocales()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumTitle()> -> _SINK_
<android.media.videoeditor.MediaImageItem: java.lang.String getDecodedImageFileName()> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<android.drm.DrmSupportInfo: java.lang.String getDescription()> -> _SINK_
<com.android.camera.CameraActivity: com.android.camera.CameraScreenNail getCameraScreenNail()> -> _SINK_
<android.view.DisplayInfo: int getNaturalWidth()> -> _SINK_
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)> -> _SINK_
<android.hardware.display.IDisplayManagerCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: int getDuration()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getRealm()> -> _SINK_
<com.google.common.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries$1$1: java.lang.Object getValue()> -> _SINK_
<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> -> _SINK_
<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)> -> _SINK_
<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()> -> _SINK_
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()> -> _SINK_
<android.media.MediaRouter$RouteGroup: java.lang.CharSequence getName(android.content.res.Resources)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()> -> _SINK_
<com.android.internal.widget.EditableInputConnection: android.text.Editable getEditable()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferInitialSize()> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SINK_
<android.security.KeyStore: byte[] getPubkey(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: int getRowBytes()> -> _SINK_
<dalvik.system.DexFile: java.lang.String getName()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMinFieldOfViewDegrees()> -> _SINK_
<android.animation.Keyframe$IntKeyframe: java.lang.Object getValue()> -> _SINK_
<gov.nist.core.ThreadAuditor$ThreadHandle: long getPingIntervalInMillisecs()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> -> _SINK_
<android.graphics.drawable.InsetDrawable: int getChangingConfigurations()> -> _SINK_
<android.view.Surface: int getGenerationId()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey getPublicKey()> -> _SINK_
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getTypedWordAndPreviousSuggestions(java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfoCache: android.view.accessibility.AccessibilityNodeInfo get(long)> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithm()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> -> _SINK_
<android.app.IUserSwitchObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.net.Socks4Message: java.lang.String getUserId()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getLineNumber()> -> _SINK_
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object,int)> -> _SINK_
<android.view.KeyCharacterMap: char getNumber(int)> -> _SINK_
<android.app.ContextImpl$15: java.lang.Object createStaticService()> -> _SINK_
<com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconMode()> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])> -> _SINK_
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()> -> _SINK_
<android.renderscript.Matrix2f: float get(int,int)> -> _SINK_
<android.widget.AbsListView: int getCheckedItemPosition()> -> _SINK_
<android.widget.AbsListView: int getListPaddingLeft()> -> _SINK_
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: int getExecCount()> -> _SINK_
<java.util.Collections$CopiesList: java.lang.Object get(int)> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getVisibleFrameLw()> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedLowerPageBound(int)> -> _SINK_
<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getOutboundProxy()> -> _SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.server.display.DisplayAdapter: java.lang.String getName()> -> _SINK_
<android.mtp.MtpDevice: long getStorageId(int)> -> _SINK_
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: java.lang.String access$300()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.security.Principal getIssuerDN()> -> _SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetPosition(int)> -> _SINK_
<libcore.io.IoBridge: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor)> -> _SINK_
<android.widget.RemoteViews: int getLayoutId()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()> -> _SINK_
<android.view.View: android.view.TouchDelegate getTouchDelegate()> -> _SINK_
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> -> _SINK_
<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<com.android.launcher2.Folder: android.view.View getEditTextRegion()> -> _SINK_
<android.webkit.JsPromptResult: java.lang.String getStringResult()> -> _SINK_
<com.android.email.activity.setup.SetupData: java.lang.String getPassword()> -> _SINK_
<android.webkit.WebViewClassic: int getViewHeightWithTitle()> -> _SINK_
<android.renderscript.Matrix3f: float get(int,int)> -> _SINK_
<java.net.DatagramPacket: java.net.InetAddress getAddress()> -> _SINK_
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SINK_
<android.text.style.LocaleSpan: int getSpanTypeId()> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)> -> _SINK_
<android.preference.PreferenceManager: android.content.SharedPreferences$Editor getEditor()> -> _SINK_
<android.preference.Preference: float getPersistedFloat(float)> -> _SINK_
<android.os.Debug: int getGlobalClassInitTime()> -> _SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.nio.channels.ServerSocketChannel getChannel()> -> _SINK_
<com.android.server.pm.PackageSettingBase: java.util.HashSet getDisabledComponents(int)> -> _SINK_
<com.google.common.collect.MapMaker$NullConcurrentMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getMinimumHeight()> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getSentBy()> -> _SINK_
<java.math.BigInt: byte[] bigEndianMagnitude()> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getInstance()> -> _SINK_
<org.apache.harmony.security.pkcs7.ContentInfo$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.content.res.AssetFileDescriptor: long getLength()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<android.content.Intent: java.lang.Object getExtra(java.lang.String)> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceScreen getPreferenceScreen()> -> _SINK_
<android.os.Looper: android.os.Looper getMainLooper()> -> _SINK_
<android.webkit.WebSettings: int getCacheMode()> -> _SINK_
<gov.nist.core.net.DefaultNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<android.filterfw.core.Filter: int getNumberOfInputs()> -> _SINK_
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()> -> _SINK_
<java.util.zip.ZipFile: java.lang.String getName()> -> _SINK_
<android.renderscript.Matrix4f: float get(int,int)> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: long getExpirationTime()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getResponse()> -> _SINK_
<com.android.server.display.DisplayAdapter: android.content.Context getContext()> -> _SINK_
<com.android.common.widget.CompositeCursorAdapter: int getPartitionCount()> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: long getExpirationTime()> -> _SINK_
<android.content.pm.ParceledListSlice: android.os.Parcelable populateList(java.util.List,android.os.Parcelable$Creator)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getBaseDataOffset()> -> _SINK_
<com.android.camera.ui.PieItem: android.graphics.Path getPath()> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> -> _SINK_
<android.filterfw.core.NativeFrame: java.nio.ByteBuffer getData()> -> _SINK_
<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()> -> _SINK_
<android.app.BackStackRecord: int getBreadCrumbShortTitleRes()> -> _SINK_
<android.text.Annotation: int getSpanTypeId()> -> _SINK_
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointers()> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Runnable getTask()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)> -> _SINK_
<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(int,java.lang.String,int,int[])> -> _SINK_
<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPersistentApplications(int)> -> _SINK_
<android.app.PendingIntent: android.content.IntentSender getIntentSender()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane: long getUIAccountId()> -> _SINK_
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)> -> _SINK_
<com.android.exchange.EasResponse: int getLength()> -> _SINK_
<android.widget.LinearLayout: int getLocationOffset(android.view.View)> -> _SINK_
<libcore.net.http.RawHeaders: java.lang.String getResponseMessage()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getSecondArgument(int)> -> _SINK_
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object getValue()> -> _SINK_
<android.view.VelocityTracker: float getYVelocity()> -> _SINK_
<android.app.Fragment: android.app.Fragment getTargetFragment()> -> _SINK_
<android.support.v4.view.ViewPager: int getCurrentItem()> -> _SINK_
<gov.nist.javax.sip.stack.HopImpl: java.lang.String getHost()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: int getType()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> -> _SINK_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object)> -> _SINK_
<android.view.View: java.util.ArrayList getFocusables(int)> -> _SINK_
<org.apache.harmony.security.pkcs7.SignerInfo$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getBegin()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()> -> _SINK_
<android.view.Display: int getPixelFormat()> -> _SINK_
<android.view.Window: android.content.res.TypedArray getWindowStyle()> -> _SINK_
<com.android.i18n.phonenumbers.AsYouTypeFormatter: int getRememberedPosition()> -> _SINK_
<android.drm.DrmEvent: int getType()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getPositiveValue()> -> _SINK_
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()> -> _SINK_
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$102(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> -> _SINK_
<android.text.style.SpellCheckSpan: int getSpanTypeId()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()> -> _SINK_
<com.android.camera.PreferenceGroup: com.android.camera.CameraPreference get(int)> -> _SINK_
<android.widget.ProgressBar$RefreshData: android.widget.ProgressBar$RefreshData getNextPoolable()> -> _SINK_
<com.google.common.collect.Multimaps$MapMultimap$AsMapEntries$1$1: java.lang.Object getValue()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getFilename()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: int getPortClient()> -> _SINK_
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)> -> _SINK_
<com.android.videoeditor.util.MediaItemUtils: long getMinimumMediaItemDuration(com.android.videoeditor.service.MovieMediaItem)> -> _SINK_
<android.os.Debug: int getGlobalClassInitCount()> -> _SINK_
<com.android.mms.MmsConfig: int getHttpSocketTimeout()> -> _SINK_
<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String[] getParam()> -> _SINK_
<libcore.io.ForwardingOs: int getuid()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SINK_
<android.text.Layout: float getLineWidth(int)> -> _SINK_
<android.widget.OverScroller: float getCurrVelocity()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.Iterator iterator()> -> _SINK_
<org.apache.harmony.security.x509.GeneralNames: java.util.List getNames()> -> _SINK_
<com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getValueStrength()> -> _SINK_
<android.widget.TextView: int getAutoLinkMask()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getTransferEncoding()> -> _SINK_
<android.mtp.MtpObjectInfo: long getDateCreated()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas()> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: double getRate()> -> _SINK_
<android.widget.DatePicker: boolean getSpinnersShown()> -> _SINK_
<android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getSlideSettingsDirection(int)> -> _SINK_
<com.android.emailcommon.TrafficFlags: int getAttachmentFlags(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCompanyName()> -> _SINK_
<android.media.AudioRecord: int getChannelConfiguration()> -> _SINK_
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$300()> -> _SINK_
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView$ScrollInterpolator: float getInterpolation(float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getMinFragmentSize()> -> _SINK_
<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()> -> _SINK_
<com.android.email.MessagingController: com.android.email.MessagingController getInstance(android.content.Context,com.android.email.Controller)> -> _SINK_
<gov.nist.javax.sip.header.SubscriptionState: java.lang.String getState()> -> _SINK_
<android.mtp.MtpObjectInfo: int getProtectionStatus()> -> _SINK_
<android.drm.DrmRights: java.lang.String getAccountId()> -> _SINK_
<android.view.VelocityTracker$Estimator: float getYCoeff(int)> -> _SINK_
<java.net.URISyntaxException: java.lang.String getMessage()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)> -> _SINK_
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: int getChunkLength()> -> _SINK_
<android.content.ContextWrapper: java.io.File getExternalCacheDir()> -> _SINK_
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)> -> _SINK_
<android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()> -> _SINK_
<android.text.style.ImageSpan: java.lang.String getSource()> -> _SINK_
<android.widget.Spinner: int getDropDownVerticalOffset()> -> _SINK_
<android.view.WindowOrientationListener$SensorEventListenerImpl: int getProposedRotation()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getDisplayNameId()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getContentSize(int)> -> _SINK_
<android.renderscript.Mesh: android.renderscript.Allocation getVertexAllocation(int)> -> _SINK_
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.lang.String getString()> -> _SINK_
<org.apache.http.util.ByteArrayBuffer: byte[] buffer()> -> _SINK_
<com.android.server.wm.DisplayContent: int getDisplayId()> -> _SINK_
<com.android.launcher2.CellLayout: com.android.launcher2.ShortcutAndWidgetContainer getShortcutsAndWidgets()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getMinute()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: int getAlpha()> -> _SINK_
<com.android.providers.settings.SettingsHelper: byte[] getLocaleData()> -> _SINK_
<com.android.internal.util.StateMachine: java.lang.String getName()> -> _SINK_
<android.content.pm.PackageParser: int getParseError()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getNextPage()> -> _SINK_
<android.os.storage.IMountServiceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance()> -> _SINK_
<com.android.mms.util.SendingProgressTokenManager: long get(java.lang.Object)> -> _SINK_
<org.apache.harmony.security.x509.PolicyConstraints: byte[] getEncoded()> -> _SINK_
<android.widget.TextView: float getRightFadingEdgeStrength()> -> _SINK_
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()> -> _SINK_
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)> -> _SINK_
<android.text.format.DateFormat: java.text.DateFormat getDateFormatForSetting(android.content.Context,java.lang.String)> -> _SINK_
<com.android.common.widget.CompositeCursorAdapter: android.database.Cursor getCursor(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1UTCTime: org.apache.harmony.security.asn1.ASN1UTCTime getInstance()> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestPackage()> -> _SINK_
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUrlOptions(java.lang.String)> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllMediaItems()> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()> -> _SINK_
<android.widget.GridLayout$5: int getGravityOffset(android.view.View,int)> -> _SINK_
<gov.nist.javax.sip.header.ContentEncoding: java.lang.String getEncoding()> -> _SINK_
<android.widget.RemoteViews$ViewPaddingAction: java.lang.String getActionName()> -> _SINK_
<android.widget.NumberPicker: int getSolidColor()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getTransport()> -> _SINK_
<android.graphics.Bitmap: int getGenerationId()> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] getEncoded()> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.DTDHandler getDTDHandler()> -> _SINK_
<android.widget.GridLayout$3: int getGravityOffset(android.view.View,int)> -> _SINK_
<android.widget.GridLayout$4: int getGravityOffset(android.view.View,int)> -> _SINK_
<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<android.media.AudioTrack: int getNativeFrameCount()> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.widget.TextView: android.text.Layout getLayout()> -> _SINK_
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrameToTarget(android.filterfw.core.Frame,int)> -> _SINK_
<android.graphics.drawable.StateListDrawable: int getStateCount()> -> _SINK_
<com.android.launcher2.Hotseat: int getCellYFromOrder(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getCurrentPage()> -> _SINK_
<android.view.animation.CycleInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: int getOpacity()> -> _SINK_
<android.text.method.MetaKeyKeyListener: int getMetaState(long)> -> _SINK_
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getAppVolume()> -> _SINK_
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<android.app.ActivityManagerProxy: long inputDispatchingTimedOut(int,boolean)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getDatabasePath()> -> _SINK_
<android.inputmethodservice.Keyboard: int getKeyWidth()> -> _SINK_
<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)> -> _SINK_
<com.android.server.am.UriPermissionOwner: android.os.Binder getExternalTokenLocked()> -> _SINK_
<com.android.mms.transaction.TransactionSettings: java.lang.String getProxyAddress()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject(int)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getItemLayout()> -> _SINK_
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> -> _SINK_
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.util.Collection removeAll(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getContentDisposition()> -> _SINK_
<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)> -> _SINK_
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)> -> _SINK_
<java.lang.System: java.util.Properties getProperties()> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: java.security.PublicKey getPublicKey()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getBackgroundColor()> -> _SINK_
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)> -> _SINK_
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$200()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: int getLength()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getGeneratedClipWidth()> -> _SINK_
<android.filterfw.core.SerializedFrame: int[] getInts()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.ArrayList getParamNames()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getPrimaryActivePointerId()> -> _SINK_
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> -> _SINK_
<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] getFooters()> -> _SINK_
<com.android.internal.util.StateMachine: java.lang.String getWhatToString(int)> -> _SINK_
<android.media.effect.FilterEffect: java.lang.String getName()> -> _SINK_
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long getTrackId()> -> _SINK_
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String getSelection()> -> _SINK_
<android.graphics.drawable.RotateDrawable: int getOpacity()> -> _SINK_
<com.android.emailcommon.mail.PackedString$Builder: java.lang.String get(java.lang.String)> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getWidth()> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getBeginTransition()> -> _SINK_
<android.graphics.drawable.StateListDrawable: int getStateDrawableIndex(int[])> -> _SINK_
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.lang.String)> -> _SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent: java.lang.String getActionName()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SINK_
<android.security.KeyStore: long getmtime(java.lang.String)> -> _SINK_
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)> -> _SINK_
<libcore.net.http.RawHeaders: java.lang.String getStatusLine()> -> _SINK_
<java.lang.Package: java.lang.Package[] getPackages()> -> _SINK_
<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()> -> _SINK_
<java.nio.HeapByteBuffer: char getChar()> -> _SINK_
<com.android.email.FolderProperties: java.lang.String getDisplayName(int,long,java.lang.String)> -> _SINK_
<android.view.MotionEvent: float getHistoricalTouchMinor(int)> -> _SINK_
<android.widget.ArrayAdapter: int getCount()> -> _SINK_
<com.android.org.bouncycastle.asn1.BERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getBigram(java.lang.String)> -> _SINK_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc()> -> _SINK_
<android.text.DynamicLayout: int[] getBlockEndLines()> -> _SINK_
<android.app.backup.IBackupManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.musicfx.seekbar.AbsSeekBar: int getThumbOffset()> -> _SINK_
<android.os.storage.StorageVolume: int getDescriptionId()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: android.content.pm.UserInfo getUserInfo()> -> _SINK_
<com.android.mms.data.Conversation: java.lang.String getRecipients(android.net.Uri)> -> _SINK_
<android.app.UiModeManager: int getCurrentModeType()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.PointerTracker getPointerTracker(int,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera$Parameters getParameters()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float getMaxScrollProgress()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getNamespace()> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: int getHeightHint()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)> -> _SINK_
<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()> -> _SINK_
<java.text.DateFormat: java.util.Locale[] getAvailableLocales()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: byte[] getSessionData(java.lang.String,int)> -> _SINK_
<android.opengl.GLSurfaceView$GLThread: int getRenderMode()> -> _SINK_
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()> -> _SINK_
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getStatusResponseTextOrEmpty()> -> _SINK_
<android.media.audiofx.AudioEffect: byte[] concatArrays(byte[][])> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getRequestMethod()> -> _SINK_
<com.android.internal.database.SortCursor: float getFloat(int)> -> _SINK_
<org.apache.http.message.BasicHttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()> -> _SINK_
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)> -> _SINK_
<android.content.Intent: byte getByteExtra(java.lang.String,byte)> -> _SINK_
<android.widget.AbsListView$RecycleBin: android.view.View getTransientStateView(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.filterfw.core.Filter: int getNumberOfOutputs()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputedReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<android.view.ViewPropertyAnimator: long getDuration()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getPort()> -> _SINK_
<android.speech.tts.TtsEngines: java.lang.String getHighestRankedEngineName()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getViewTypeCount()> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String,boolean)> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> -> _SINK_
<gov.nist.javax.sip.header.MimeVersion: int getMinorVersion()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getNonce()> -> _SINK_
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()> -> _SINK_
<android.app.ActivityManagerProxy: android.content.ComponentName getCallingActivity(android.os.IBinder)> -> _SINK_
<java.security.PrivilegedActionException: java.lang.Exception getException()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.widget.LockPatternUtils getLockPatternUtils()> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.io.InputStream getInputStream()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: android.graphics.Bitmap getThumbnail(int,int,long)> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getId(int)> -> _SINK_
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable,android.content.Context)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarEntry getJarEntry()> -> _SINK_
<android.app.TaskStackBuilder: int getIntentCount()> -> _SINK_
<android.widget.ListView: int getHeaderViewsCount()> -> _SINK_
<android.os.DropBoxManager$Entry: java.lang.String getText(int)> -> _SINK_
<android.animation.Animator: java.util.ArrayList getListeners()> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)> -> _SINK_
<android.animation.FloatKeyframeSet: float getFloatValue(float)> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)> -> _SINK_
<android.view.View: android.os.IBinder getApplicationWindowToken()> -> _SINK_
<com.android.inputmethod.latin.ResizableIntArray: int[] getPrimitiveArray()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getEncryptionKey()> -> _SINK_
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: android.graphics.Rect getBounds()> -> _SINK_
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()> -> _SINK_
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key getKey(int)> -> _SINK_
<com.android.camera.ui.PieItem: int getInnerRadius()> -> _SINK_
<android.webkit.CookieManager: java.lang.Object clone()> -> _SINK_
<java.net.URL: java.lang.String getQuery()> -> _SINK_
<android.media.AudioManager: int getMasterMaxVolume()> -> _SINK_
<java.net.URI: java.lang.String getQuery()> -> _SINK_
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> -> _SINK_
<org.apache.http.auth.AuthScope: java.lang.String getRealm()> -> _SINK_
<org.json.JSONObject: int getInt(java.lang.String)> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int,int)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getSocketTimeout()> -> _SINK_
<com.android.camera.ComboPreferences: java.util.Map getAll()> -> _SINK_
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> -> _SINK_
<android.preference.PreferenceManager: android.content.Context getContext()> -> _SINK_
<java.net.DatagramSocket: int getSendBufferSize()> -> _SINK_
<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)> -> _SINK_
<com.android.ex.chips.RecipientAlternatesAdapter: long getItemId(int)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetDescriptionsResourceId()> -> _SINK_
<android.widget.AbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _SINK_
<com.android.camera.Util: int getDisplayOrientation(int,int)> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Integer getPropertyInteger(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()> -> _SINK_
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm()> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getRecentTasks(int,int,int)> -> _SINK_
<android.media.videoeditor.MediaImageItem: java.lang.String getScaledImageFileName()> -> _SINK_
<android.media.audiofx.AudioEffect: int getId()> -> _SINK_
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)> -> _SINK_
<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> -> _SINK_
<android.webkit.JniUtil: android.content.Context getContext()> -> _SINK_
<java.util.TimeZone: java.lang.String[] getAvailableIDs()> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: float getWindowDuration()> -> _SINK_
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointerCount()> -> _SINK_
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()> -> _SINK_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()> -> _SINK_
<java.util.logging.Logger: java.lang.String getName()> -> _SINK_
<com.google.common.collect.SortedMultisets$DescendingMultiset: java.util.Set createEntrySet()> -> _SINK_
<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)> -> _SINK_
<android.view.ViewGroup: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)> -> _SINK_
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.Privacy: java.lang.String getPrivacy()> -> _SINK_
<com.android.deskclock.TimePicker: int getMinutes()> -> _SINK_
<gov.nist.javax.sip.header.RSeq: long getSeqNumber()> -> _SINK_
<android.view.View: int getTop()> -> _SINK_
<com.android.internal.util.TypedProperties: int getStringInfo(java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.BEROctetString: java.util.Enumeration getObjects()> -> _SINK_
<android.content.res.AssetManager: java.lang.CharSequence getPooledString(int,int)> -> _SINK_
<android.view.MotionEvent: float getToolMajor(int)> -> _SINK_
<com.android.email.Preferences: boolean getEnableExchangeFileLogging()> -> _SINK_
<com.android.emailcommon.utility.Utility: java.lang.Integer getFirstRowInt(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Integer)> -> _SINK_
<android.text.Layout: int getLineEnd(int)> -> _SINK_
<com.android.camera.ui.PieRenderer$LinearAnimation: float getValue()> -> _SINK_
<android.text.Layout: java.lang.CharSequence getText()> -> _SINK_
<android.animation.Keyframe: java.lang.Class getType()> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: int getColumnNumber()> -> _SINK_
<android.view.View: java.lang.Object getTag()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SINK_
<com.android.mms.model.MediaModel: int getSeekTo()> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String getOriginalUrl()> -> _SINK_
<android.content.ContextWrapper: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: int getPrefix(int)> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)> -> _SINK_
<junit.runner.BaseTestRunner: java.util.Properties getPreferences()> -> _SINK_
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.String getSignatureAttribute()> -> _SINK_
<android.widget.FastScroller: int getWidth()> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarHeight()> -> _SINK_
<android.view.View: float getVerticalScrollFactor()> -> _SINK_
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.DEREnumerated getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.internal.widget.DrawableHolder: int getHeight()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getLocalName(int)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: com.android.gallery3d.common.Fingerprint getFingerprint()> -> _SINK_
<gov.nist.javax.sip.ResponseEventExt: gov.nist.javax.sip.ClientTransactionExt getOriginalTransaction()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getUserAccount(long)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: double get(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: int getPeerPort()> -> _SINK_
<android.support.v4.os.ParcelableCompat$CompatCreator: java.lang.Object createFromParcel(android.os.Parcel)> -> _SINK_
<com.google.common.collect.Lists$CharSequenceAsList: java.lang.Character get(int)> -> _SINK_
<com.android.server.pm.Settings: java.lang.String getInstallerPackageNameLPr(java.lang.String)> -> _SINK_
<libcore.io.ForwardingOs: int getgid()> -> _SINK_
<org.apache.harmony.security.x509.BasicConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.videoeditor.service.MovieEffect: long getStartTime()> -> _SINK_
<android.widget.AbsListView: int getDistance(android.graphics.Rect,android.graphics.Rect,int)> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getAudioType()> -> _SINK_
<android.preference.PreferenceManager: int getNextRequestCode()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getEarlyDialogId()> -> _SINK_
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SINK_
<com.android.mms.model.RegionMediaModel: com.android.mms.model.RegionModel getRegion()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getAcceptEncoding()> -> _SINK_
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getLocalParty()> -> _SINK_
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()> -> _SINK_
<android.app.ActivityManagerProxy: boolean getPackageAskScreenCompat(java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getVideoLevel()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<android.mtp.MtpObjectInfo: int getFormat()> -> _SINK_
<java.lang.StackTraceElement: java.lang.String getMethodName()> -> _SINK_
<java.security.cert.CertStore: java.util.Collection getCRLs(java.security.cert.CRLSelector)> -> _SINK_
<com.android.mms.dom.smil.TimeImpl: boolean getResolved()> -> _SINK_
<android.view.Gravity: int getAbsoluteGravity(int,int)> -> _SINK_
<com.google.common.collect.MapMaker: int getConcurrencyLevel()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: javax.net.ssl.SSLSession getSession(byte[])> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List getHeaderList()> -> _SINK_
<android.content.CursorLoader: java.lang.String getSortOrder()> -> _SINK_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()> -> _SINK_
<com.android.launcher2.PagedView: int getAssociatedLowerPageBound(int)> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getAudioStreamType()> -> _SINK_
<android.view.MotionEvent: float getToolMinor(int)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getProxyHost()> -> _SINK_
<com.android.launcher2.Workspace$ZoomInInterpolator: float getInterpolation(float)> -> _SINK_
<android.widget.CursorTreeAdapter: int getChildrenCount(int)> -> _SINK_
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAndroidDataDir()> -> _SINK_
<com.android.email.ResourceHelper: int getAccountColorId(long)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()> -> _SINK_
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()> -> _SINK_
<android.widget.CompoundButton: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: int getType()> -> _SINK_
<android.hardware.Sensor: int getType()> -> _SINK_
<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)> -> _SINK_
<com.google.common.collect.Multimaps$MapMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords: java.lang.String getWord(int)> -> _SINK_
<android.os.PowerManager: int getMinimumScreenBrightnessSetting()> -> _SINK_
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()> -> _SINK_
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(java.lang.Object)> -> _SINK_
<com.android.uiautomator.core.UiDevice: java.lang.String getLastTraversedText()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getVolume()> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getCurrentUser()> -> _SINK_
<com.android.email.provider.ContentCache$CachedCursor: android.database.CursorWindow getWindow()> -> _SINK_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternal: int getEncoding()> -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.content.Context,int)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.io.InputStream getInputStream()> -> _SINK_
<android.widget.DatePicker: boolean getCalendarViewShown()> -> _SINK_
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)> -> _SINK_
<android.content.pm.ContainerEncryptionParams: long getDataEnd()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getEmailGateway()> -> _SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer get(long[],int,int)> -> _SINK_
<android.view.GLES20Canvas: int getDisplayList(int)> -> _SINK_
<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SINK_
<android.provider.Settings$Bookmarks: java.lang.CharSequence getLabelForFolder(android.content.res.Resources,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: int[] getRunningUserIds()> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.lang.String getDisposition()> -> _SINK_
<android.view.IInputFilter$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.view.View: int getBottomPaddingOffset()> -> _SINK_
<java.util.Formatter$FormatToken: int getPrecision()> -> _SINK_
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Set getNonCriticalExtensionOIDs()> -> _SINK_
<com.android.videoeditor.TransitionType: java.lang.String getName()> -> _SINK_
<gov.nist.javax.sip.header.To: java.lang.String getDisplayName()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()> -> _SINK_
<android.app.DialogFragment: android.app.Dialog getDialog()> -> _SINK_
<com.android.videoeditor.ProjectPickerAdapter: long getItemId(int)> -> _SINK_
<java.math.BigInteger: java.math.BigInteger copy()> -> _SINK_
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)> -> _SINK_
<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getTime()> -> _SINK_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)> -> _SINK_
<android.app.ContextImpl: android.app.ContextImpl getImpl(android.content.Context)> -> _SINK_
<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<com.android.mms.ui.RecipientsEditor: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SINK_
<android.gesture.GestureLibrary: android.gesture.Learner getLearner()> -> _SINK_
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SINK_
<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.header.Reason: java.lang.String getProtocol()> -> _SINK_
<android.media.audiofx.AudioEffect: boolean getEnabled()> -> _SINK_
<com.android.launcher2.PagedViewGridLayout: int getPageChildCount()> -> _SINK_
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase(android.content.Context)> -> _SINK_
<junit.framework.TestCase: junit.framework.TestResult run()> -> _SINK_
<android.text.Annotation: java.lang.String getKey()> -> _SINK_
<android.content.res.StringBlock: java.lang.CharSequence get(int)> -> _SINK_
<android.view.animation.Animation: android.view.animation.Animation clone()> -> _SINK_
<android.view.Surface$CompatibleCanvas: int getWidth()> -> _SINK_
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)> -> _SINK_
<java.security.SignatureSpi: java.lang.Object clone()> -> _SINK_
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)> -> _SINK_
<org.apache.http.message.BasicRequestLine: java.lang.String getMethod()> -> _SINK_
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> -> _SINK_
<android.view.MotionEvent: long getDownTime()> -> _SINK_
<android.view.Window: android.view.WindowManager getWindowManager()> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()> -> _SINK_
<android.widget.ActivityChooserModel: int getActivityCount()> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentEncoding()> -> _SINK_
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()> -> _SINK_
<org.apache.harmony.security.x509.BasicConstraints: int getPathLenConstraint()> -> _SINK_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getMaxActivityCount()> -> _SINK_
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])> -> _SINK_
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.io.InputStream getAsStream()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributeType(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()> -> _SINK_
<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] getStackFrames()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SINK_
<com.android.camera.FocusOverlayManager: java.util.List getFocusAreas()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()> -> _SINK_
<android.media.AudioService$SetModeDeathHandler: int getPid()> -> _SINK_
<android.media.AudioTrack: int getSampleRate()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()> -> _SINK_
<com.android.mms.ui.Presenter: com.android.mms.ui.ViewInterface getView()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getBandwidthTypes()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<com.adobe.xmp.impl.CountOutputStream: int getBytesWritten()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> -> _SINK_
<com.android.internal.util.FastXmlSerializer: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEventForClick()> -> _SINK_
<com.android.phone.PhoneGlobals: android.content.Intent createPhoneEndIntentUsingCallOrigin()> -> _SINK_
<android.widget.TextView: int getSelectionEnd()> -> _SINK_
<android.view.animation.BounceInterpolator: float getInterpolation(float)> -> _SINK_
<android.widget.ArrayAdapter: android.content.Context getContext()> -> _SINK_
<java.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int)> -> _SINK_
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)> -> _SINK_
<android.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.activity.MessageOrderManager: long getCurrentMessageId()> -> _SINK_
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.view.WindowOrientationListener: int getProposedRotation()> -> _SINK_
<android.view.View: int getPaddingLeft()> -> _SINK_
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,java.lang.String)> -> _SINK_
<android.media.DecoderCapabilities: java.util.List getVideoDecoders()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> -> _SINK_
<com.android.email.provider.EmailProvider: android.database.Cursor notificationQuery(android.net.Uri)> -> _SINK_
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)> -> _SINK_
<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.media.AudioRecord: int getAudioFormat()> -> _SINK_
<org.apache.http.entity.ByteArrayEntity: long getContentLength()> -> _SINK_
<android.media.DecoderCapabilities: java.util.List getAudioDecoders()> -> _SINK_
<com.android.launcher2.DragView: android.graphics.Rect getDragRegion()> -> _SINK_
<android.view.View: int getRawLayoutDirection()> -> _SINK_
<com.android.launcher2.BubbleTextView: android.graphics.Bitmap getPressedOrFocusedBackground()> -> _SINK_
<java.nio.HeapByteBuffer: int getInt(int)> -> _SINK_
<android.renderscript.Mesh$Builder: int getCurrentVertexTypeIndex()> -> _SINK_
<android.webkit.CacheManager: java.io.File access$000()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCode(int)> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SINK_
<android.preference.Preference: long getId()> -> _SINK_
<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()> -> _SINK_
<android.view.ScaleGestureDetector: float getCurrentSpanY()> -> _SINK_
<android.view.ScaleGestureDetector: float getCurrentSpanX()> -> _SINK_
<java.text.NumberFormat: int getMaximumFractionDigits()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: long getLastInjectedDownEventTime()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getNavigationMode()> -> _SINK_
<com.google.common.collect.SortedMultisets$DescendingMultiset: java.util.Set entrySet()> -> _SINK_
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getBeforeMediaItem()> -> _SINK_
<gov.nist.javax.sip.header.Organization: java.lang.String getOrganization()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: java.util.Enumeration getObjects()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getTheme()> -> _SINK_
<android.widget.TextView: int getMinWidth()> -> _SINK_
<com.android.inputmethod.latin.Dictionary: int getFrequency(java.lang.CharSequence)> -> _SINK_
<com.android.org.bouncycastle.asn1.BEROctetString: byte[] getOctets()> -> _SINK_
<com.google.common.collect.Lists$ReverseList: java.util.List getForwardList()> -> _SINK_
<android.view.IWindowSession$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.security.KeyFactory: java.lang.String getAlgorithm()> -> _SINK_
<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getNextHop(javax.sip.message.Request)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ContentType getContentTypeHeader()> -> _SINK_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)> -> _SINK_
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentActivityName()> -> _SINK_
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getValue()> -> _SINK_
<java.util.ResourceBundle: java.util.Set handleKeySet()> -> _SINK_
<com.android.videoeditor.service.MovieTransition: int getSlidingDirection()> -> _SINK_
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> -> _SINK_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -> _SINK_
<android.app.ContextImpl: android.os.IBinder getActivityToken()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> -> _SINK_
<android.os.Debug: int getGlobalExternalAllocCount()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)> -> _SINK_
<android.widget.TextView: int getSelectionStart()> -> _SINK_
<android.accounts.IAccountManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.SharedPreferencesImpl: java.util.Map getAll()> -> _SINK_
<java.net.URLConnection: long getLastModified()> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: int getGroup()> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: int getLastY()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: int getLastX()> -> _SINK_
<android.renderscript.Program: int getConstantCount()> -> _SINK_
<android.content.ClipData$Item: java.lang.CharSequence getText()> -> _SINK_
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()> -> _SINK_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()> -> _SINK_
<org.apache.harmony.security.utils.ObjectIdentifier: java.lang.Object getGroup()> -> _SINK_
<gov.nist.javax.sip.address.GenericURI: java.lang.String getScheme()> -> _SINK_
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<android.media.audiofx.Equalizer: short[] getBandLevelRange()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)> -> _SINK_
<android.widget.GridView: int getVerticalSpacing()> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType rootElementType()> -> _SINK_
<android.app.LocalActivityManager: java.lang.String getCurrentId()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: long getBytesTotal()> -> _SINK_
<com.android.launcher2.DragController: long getLastGestureUpTime()> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getInfo(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.Via getViaHeader()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: int getMaximumMessageSize()> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentType()> -> _SINK_
<com.android.mms.transaction.TransactionBundle: int getTransactionType()> -> _SINK_
<android.preference.PreferenceManager: android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()> -> _SINK_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getAvailableDisplays()> -> _SINK_
<android.text.DynamicLayout: int getParagraphDirection(int)> -> _SINK_
<android.util.AtomicFile: byte[] readFully()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: java.lang.String getTransport()> -> _SINK_
<com.android.mms.model.LayoutModel: int getLayoutHeight()> -> _SINK_
<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> -> _SINK_
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherProvider getLauncherProvider()> -> _SINK_
<com.android.mms.model.RegionModel: int getHeight()> -> _SINK_
<android.media.audiofx.Virtualizer: short getRoundedStrength()> -> _SINK_
<com.android.camera.IconListPreference: int[] getLargeIconIds()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()> -> _SINK_
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getICID()> -> _SINK_
<android.view.HardwareLayer: int getHeight()> -> _SINK_
<com.android.camera.ui.PieItem: java.util.List getItems()> -> _SINK_
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getTabAt(int)> -> _SINK_
<javax.obex.ServerOperation: java.lang.String getEncoding()> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.util.Collection entries()> -> _SINK_
<android.webkit.HTML5VideoFullScreen: int getBufferPercentage()> -> _SINK_
<java.security.Provider: java.util.Set keySet()> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object get(int)> -> _SINK_
<com.android.exchange.adapter.ItemOperationsParser: int getStatusCode()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleDependsOn()> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetResourceId()> -> _SINK_
<android.support.v4.app.TaskStackBuilderHoneycomb: android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<android.view.View: android.view.View getRootView()> -> _SINK_
<android.app.Instrumentation$ActivityMonitor: int getHits()> -> _SINK_
<android.preference.GenericInflater: android.preference.GenericInflater$Factory getFactory()> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getBouncerAnimationDuration()> -> _SINK_
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUser(java.lang.String,int)> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()> -> _SINK_
<com.android.email.FixedLengthInputStream: int getLength()> -> _SINK_
<org.apache.http.entity.StringEntity: java.io.InputStream getContent()> -> _SINK_
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)> -> _SINK_
<android.preference.PreferenceFragment: android.preference.PreferenceManager getPreferenceManager()> -> _SINK_
<com.android.email.FolderProperties: java.lang.String getDisplayName(android.database.Cursor)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getParameter(java.lang.String)> -> _SINK_
<android.webkit.Plugin: java.lang.String getPath()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16BE()> -> _SINK_
<android.filterfw.core.VertexFrame: int[] getInts()> -> _SINK_
<android.text.method.WordIterator: int getEnd(int)> -> _SINK_
<java.lang.Class: java.lang.ClassLoader getClassLoader()> -> _SINK_
<java.net.Socks4Message: int getIP()> -> _SINK_
<org.apache.harmony.security.utils.JarUtils: java.security.cert.Certificate[] verifySignature(java.io.InputStream,java.io.InputStream)> -> _SINK_
<android.widget.RemoteViews$SetEmptyView: java.lang.String getActionName()> -> _SINK_
<com.android.phone.CallNotifier: boolean getVoicePrivacyState()> -> _SINK_
<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()> -> _SINK_
<libcore.io.GaiException: java.lang.String getMessage()> -> _SINK_
<com.android.internal.util.TypedProperties: int getInt(java.lang.String,int)> -> _SINK_
<android.app.ActivityManagerProxy: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> -> _SINK_
<android.content.ContentProviderNative: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getUaProfUrl()> -> _SINK_
<android.text.method.PasswordTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> -> _SINK_
<javax.crypto.Cipher: byte[] doFinal()> -> _SINK_
<com.android.camera.IconListPreference: int getSingleIcon()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<com.android.server.wm.WindowState: int getDisplayId()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.Object getContent()> -> _SINK_
<android.mtp.MtpObjectInfo: int getAssociationType()> -> _SINK_
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> -> _SINK_
<android.speech.tts.TextToSpeech: java.lang.String getCurrentEngine()> -> _SINK_
<gov.nist.core.Token: int getTokenType()> -> _SINK_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1ParsingException: java.lang.Throwable getCause()> -> _SINK_
<android.webkit.WebViewDatabaseClassic: android.webkit.WebViewDatabaseClassic getInstance(android.content.Context)> -> _SINK_
<android.media.AudioTrack: int getState()> -> _SINK_
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: javax.sip.ClientTransaction handleChallenge(javax.sip.message.Response,javax.sip.ClientTransaction,javax.sip.SipProvider,int)> -> _SINK_
<com.android.mms.data.WorkingMessage: java.lang.String getWorkingRecipients()> -> _SINK_
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getInputStream()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Date getNotBefore()> -> _SINK_
<com.android.phone.PhoneGlobals: android.bluetooth.IBluetoothHeadsetPhone getBluetoothPhoneService()> -> _SINK_
<java.net.URLConnection$DefaultContentHandler: java.lang.Object getContent(java.net.URLConnection)> -> _SINK_
<java.security.AlgorithmParameters: java.security.Provider getProvider()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getPublicId()> -> _SINK_
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClassic getBackForwardList()> -> _SINK_
<android.media.MediaScanner$WplHandler: org.xml.sax.ContentHandler getContentHandler()> -> _SINK_
<com.android.providers.downloads.DownloadHandler: long getCurrentSpeed(long)> -> _SINK_
<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getMonths()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)> -> _SINK_
<android.media.TimedText: java.lang.String getText()> -> _SINK_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: int getTitleMode()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)> -> _SINK_
<java.text.Collator: java.lang.Object clone()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.DragLayer getDragLayer()> -> _SINK_
<com.google.common.collect.AbstractListMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<java.util.Hashtable$HashIterator: java.util.Hashtable$HashtableEntry nextEntry()> -> _SINK_
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()> -> _SINK_
<org.apache.harmony.security.utils.ObjectIdentifier: java.lang.String getName()> -> _SINK_
<java.net.Authenticator: java.net.URL getRequestingURL()> -> _SINK_
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()> -> _SINK_
<android.media.videoeditor.OverlayFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()> -> _SINK_
<com.android.email.provider.ContentCache$CachedCursor: int getPosition()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: java.lang.String getEncryptionAlgorithm()> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardView: float getLabelWidth(java.lang.String,android.graphics.Paint)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: java.lang.Object getKey()> -> _SINK_
<android.os.ISchedulingPolicyService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.widget.TextView: int getCompoundPaddingEnd()> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.email.mail.store.ImapFolder: int getMessageCount()> -> _SINK_
<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.header.SIPHeader parseSIPHeader(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> -> _SINK_
<android.view.GLES20Canvas: int getSaveCount()> -> _SINK_
<com.coremedia.iso.boxes.SampleSizeBox: long getSampleSize()> -> _SINK_
<android.view.InputDevice: android.os.Vibrator getVibrator()> -> _SINK_
<com.google.common.collect.AbstractSortedSetMultimap: java.util.Collection createCollection()> -> _SINK_
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Policy getPolicy()> -> _SINK_
<com.android.email.ResourceHelper: android.graphics.Paint getAccountColorPaint(long)> -> _SINK_
<org.apache.http.params.AbstractHttpParams: double getDoubleParameter(java.lang.String,double)> -> _SINK_
<android.view.MotionEvent: float getPressure()> -> _SINK_
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip[] getSortedRecipients()> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.lang.String getType()> -> _SINK_
<com.google.common.collect.Multimaps$1: java.lang.Object getValue()> -> _SINK_
<com.android.inputmethod.latin.SettingsActivity: android.content.Intent getIntent()> -> _SINK_
<com.android.launcher2.LauncherApplication: java.lang.String getSharedPreferencesKey()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RetryAfterHeader createRetryAfterHeader(int)> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.ImageModel getImage()> -> _SINK_
<android.view.KeyEvent: int getUnicodeChar(int)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.ListIterator listIterator(int)> -> _SINK_
<android.os.storage.IMountService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)> -> _SINK_
<android.hardware.display.WifiDisplayStatus: int getActiveDisplayState()> -> _SINK_
<android.app.ContextImpl: android.os.Looper getMainLooper()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: int getSampleCompositionTimeOffset()> -> _SINK_
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: java.lang.Object getItem(int)> -> _SINK_
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getLocalPart()> -> _SINK_
<android.app.ActivityOptions: int getStartHeight()> -> _SINK_
<java.text.Format: java.lang.Object clone()> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Iterator createEntryIterator()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<org.apache.harmony.security.x509.SubjectKeyIdentifier: byte[] getEncoded()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getLocalPath()> -> _SINK_
<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)> -> _SINK_
<libcore.net.http.ResponseHeaders: java.util.Date getServedDate()> -> _SINK_
<android.filterpacks.imageproc.ColorTemperatureFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getWindowId()> -> _SINK_
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.Utils: java.lang.String getSignature()> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: java.math.BigInteger getAuthorityCertSerialNumber()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner getEventScanner()> -> _SINK_
<android.view.KeyCharacterMap: int getKeyboardType()> -> _SINK_
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> -> _SINK_
<java.net.Socks4Message: int getLength()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)> -> _SINK_
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.security.x501.Name: byte[] getEncoded()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] getRandom()> -> _SINK_
<java.text.RuleBasedCollator: java.text.CollationKey getCollationKey(java.lang.String)> -> _SINK_
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String,double)> -> _SINK_
<android.content.res.TypedArray: int getIndex(int)> -> _SINK_
<libcore.net.http.HttpEngine: java.io.InputStream getResponseBody()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()> -> _SINK_
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()> -> _SINK_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()> -> _SINK_
<libcore.net.http.HttpConnection$Address: java.net.Proxy getProxy()> -> _SINK_
<android.widget.ListView$ArrowScrollFocusResult: int getSelectedPosition()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16LE()> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.Utils: java.lang.String getDebugInfo(com.android.inputmethod.latin.SuggestedWords,int)> -> _SINK_
<android.view.Window: int getForcedWindowFlags()> -> _SINK_
<android.filterpacks.imageproc.AutoFixFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.support.v4.view.MotionEventCompat: int getPointerCount(android.view.MotionEvent)> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<android.content.res.AssetFileDescriptor: long getStartOffset()> -> _SINK_
<android.gesture.GestureStore: int getOrientationStyle()> -> _SINK_
<com.google.android.picasasync.SyncTask: java.lang.String toString()> -> _SINK_
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _SINK_
<com.android.videoeditor.OverlaysAdapter: int getCount()> -> _SINK_
<android.webkit.WebSettings: boolean getAllowContentAccess()> -> _SINK_
<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: int getOrder()> -> _SINK_
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])> -> _SINK_
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPostDial()> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemWriter: int getOutputSize(com.android.org.bouncycastle.util.io.pem.PemObject)> -> _SINK_
<android.content.Intent: java.lang.String getAction()> -> _SINK_
<android.os.Message: java.lang.Runnable getCallback()> -> _SINK_
<com.google.android.picasasync.PicasaSyncHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: int[] getRightEdge()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.util.Date getCreationDate(java.lang.String)> -> _SINK_
<java.lang.ProcessBuilder: java.util.List command()> -> _SINK_
<android.opengl.GLSurfaceView: int getRenderMode()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(byte[])> -> _SINK_
<android.widget.CompoundButton: int getHorizontalOffsetForDrawables()> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getMinimumWidth()> -> _SINK_
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()> -> _SINK_
<com.android.mms.ui.RecipientsEditor: java.util.List getNumbers()> -> _SINK_
<java.text.DecimalFormatSymbols: java.util.Locale[] getAvailableLocales()> -> _SINK_
<org.apache.harmony.security.utils.Array: java.lang.String getBytesAsString(byte[])> -> _SINK_
<java.lang.Enum$1: java.lang.Object create(java.lang.Object)> -> _SINK_
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,long,java.util.Map)> -> _SINK_
<java.net.ServerSocket: boolean getReuseAddress()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getReceivedPointerDownCount()> -> _SINK_
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)> -> _SINK_
<com.android.camera.CameraActivity: long getShutterLag()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$400(com.android.ex.chips.BaseRecipientAdapter,boolean,java.util.LinkedHashMap,java.util.List,java.util.Set)> -> _SINK_
<android.os.IRemoteCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.media.MediaPlayer: java.lang.String getStringParameter(int)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getPrefix(java.lang.String)> -> _SINK_
<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getMediaItem(java.lang.String)> -> _SINK_
<android.widget.ExpandableListConnector: int getItemViewType(int)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.FragmentManagerImpl: java.util.ArrayList retainNonConfig()> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)> -> _SINK_
<android.widget.Switch: java.lang.CharSequence getTextOn()> -> _SINK_
<com.google.common.collect.ForwardingMap: java.util.Collection values()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getWidthBeforeFirstLayout()> -> _SINK_
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()> -> _SINK_
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> -> _SINK_
<android.view.MotionEvent: float getRawY()> -> _SINK_
<android.view.MotionEvent: float getRawX()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getX(int)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getY(int)> -> _SINK_
<com.google.common.collect.ImmutableList$ReverseImmutableList: java.lang.Object get(int)> -> _SINK_
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])> -> _SINK_
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getTBSCertificate()> -> _SINK_
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()> -> _SINK_
<com.android.phone.SipCallOptionHandler: android.app.Dialog onCreateDialog(int)> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> -> _SINK_
<com.android.systemui.screenshot.GlobalScreenshot$10: float getInterpolation(float)> -> _SINK_
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> -> _SINK_
<gov.nist.javax.sip.parser.Parser: java.lang.String method()> -> _SINK_
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.app.Dialog: android.view.Window getWindow()> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getVolumeMax()> -> _SINK_
<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoCodecType(int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMediaUri()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERIA5String: byte[] getOctets()> -> _SINK_
<android.filterpacks.base.FrameBranch: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.IOnKeyguardExitResult$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()> -> _SINK_
<android.filterfw.core.VertexFrame: java.nio.ByteBuffer getData()> -> _SINK_
<android.widget.FastScroller: int getState()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SINK_
<java.security.cert.TrustAnchor: java.lang.String getCAName()> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getIsdnSubaddress()> -> _SINK_
<com.android.exchange.adapter.Parser: byte[] getValueBytes()> -> _SINK_
<com.android.launcher2.FolderIcon: com.android.launcher2.FolderInfo getFolderInfo()> -> _SINK_
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()> -> _SINK_
<java.security.AccessControlException: java.security.Permission getPermission()> -> _SINK_
<android.text.style.EasyEditSpan: int getSpanTypeId()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getPasswordTextViewId()> -> _SINK_
<android.webkit.WebSettings: boolean getBuiltInZoomControls()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getSort()> -> _SINK_
<java.security.Provider: int getProviderNumber()> -> _SINK_
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentFilename(android.content.Context,long,long)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: java.util.Enumeration getPrefixes()> -> _SINK_
<gov.nist.core.HostPort: gov.nist.core.Host getHost()> -> _SINK_
<android.text.format.Time: int getActualMaximum(int)> -> _SINK_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getListOrEmpty(int)> -> _SINK_
<gov.nist.javax.sip.header.ContentLength: int getContentLength()> -> _SINK_
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> -> _SINK_
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getCapture()> -> _SINK_
<android.app.ActivityManagerNative: android.os.IBinder asBinder()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getPublicId()> -> _SINK_
<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getFileType()> -> _SINK_
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)> -> _SINK_
<com.android.providers.downloads.DrmConvertSession: byte[] convert(byte[],int)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)> -> _SINK_
<android.widget.Spinner: int getDropDownHorizontalOffset()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String[] getSecureContainerList()> -> _SINK_
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> -> _SINK_
<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int)> -> _SINK_
<java.util.Formatter$FormatToken: int getWidth()> -> _SINK_
<java.lang.System: java.util.Map getenv()> -> _SINK_
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardView: com.android.inputmethod.keyboard.Keyboard getKeyboard()> -> _SINK_
<java.io.Reader: long skip(long)> -> _SINK_
<com.android.email.activity.UIControllerBase: long getMessageId()> -> _SINK_
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificPua(int)> -> _SINK_
<com.android.uiautomator.core.UiDevice: java.lang.String getProductName()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.io.OutputStream getOutputStream()> -> _SINK_
<java.io.OutputStreamWriter: java.lang.String getEncoding()> -> _SINK_
<android.os.Parcel: java.lang.CharSequence readCharSequence()> -> _SINK_
<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int)> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: long getContentSize()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()> -> _SINK_
<com.android.videoeditor.BaseAdapterWithImages: java.util.List access$100(com.android.videoeditor.BaseAdapterWithImages)> -> _SINK_
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSamplesPerChunk()> -> _SINK_
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Choice: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.org.bouncycastle.asn1.BERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.media.videoeditor.EffectColor: int getType()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: int getPort()> -> _SINK_
<com.android.email.Preferences: boolean getForceOneMinuteRefresh()> -> _SINK_
<org.apache.harmony.security.fortress.Services: java.util.List getProvidersList()> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: java.util.Iterator getParameterNames()> -> _SINK_
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL,boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.lang.String getString()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> -> _SINK_
<android.webkit.L10nUtils: java.lang.String getLocalisedString(int)> -> _SINK_
<android.view.ViewDebug: long getViewRootImplCount()> -> _SINK_
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()> -> _SINK_
<android.webkit.Plugin: java.lang.String getFileName()> -> _SINK_
<javax.sip.IOExceptionEvent: java.lang.String getHost()> -> _SINK_
<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)> -> _SINK_
<android.widget.GridLayout$Spec: int getFlexibility()> -> _SINK_
<java.util.concurrent.CountDownLatch$Sync: int getCount()> -> _SINK_
<android.widget.HorizontalScrollView: float getLeftFadingEdgeStrength()> -> _SINK_
<com.android.mms.dom.AttrImpl: java.lang.String getNodeName()> -> _SINK_
<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)> -> _SINK_
<android.hardware.input.InputManager: int[] getInputDeviceIds()> -> _SINK_
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])> -> _SINK_
<android.mtp.MtpDevice: int[] getStorageIds()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarHeight()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int getPreferredOptionsPanelGravity()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray,float)> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: int getId()> -> _SINK_
<com.android.launcher2.Utilities: android.graphics.Bitmap resampleIconBitmap(android.graphics.Bitmap,android.content.Context)> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Flag[] getPermanentFlags()> -> _SINK_
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.app.LoadedApk)> -> _SINK_
<android.hardware.Sensor: java.lang.String getVendor()> -> _SINK_
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)> -> _SINK_
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: int getResultsCount()> -> _SINK_
<javax.obex.ServerOperation: long getLength()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)> -> _SINK_
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> -> _SINK_
<android.media.IAudioFocusDispatcher$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.AlbumEntry getAlbumEntry(java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.RotateDrawable: int getIntrinsicWidth()> -> _SINK_
<com.android.deskclock.Alarms: com.android.deskclock.Alarm getAlarm(android.content.ContentResolver,int)> -> _SINK_
<android.graphics.Typeface: int getStyle()> -> _SINK_
<android.mtp.MtpDevice: int getDeviceId()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: java.util.List getRevokedCertificates()> -> _SINK_
<gov.nist.core.StringTokenizer: char getNextChar()> -> _SINK_
<android.drm.DrmUtils: byte[] readBytes(java.io.File)> -> _SINK_
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)> -> _SINK_
<java.util.AbstractMap: java.lang.Object clone()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getIssuerUniqueID()> -> _SINK_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> -> _SINK_
<android.view.InputDevice: int getKeyboardType()> -> _SINK_
<com.android.emailcommon.utility.Utility: com.android.emailcommon.provider.Account findExistingAccount(android.content.Context,long,java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.RouteList getRouteHeaders()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralString: java.lang.String getString()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPeerPort()> -> _SINK_
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])> -> _SINK_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()> -> _SINK_
<android.view.View: android.graphics.Bitmap getDrawingCache()> -> _SINK_
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.CSeqHeader createCSeqHeader(int,java.lang.String)> -> _SINK_
<java.nio.ShortToByteBufferAdapter: short get(int)> -> _SINK_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SINK_
<com.android.mms.dom.DocumentImpl: boolean getXmlStandalone()> -> _SINK_
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getDuration()> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()> -> _SINK_
<com.android.camera.SoundClips: com.android.camera.SoundClips$Player getPlayer(android.content.Context)> -> _SINK_
<android.view.HardwareRenderer: android.view.HardwareRenderer createGlRenderer(int,boolean)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()> -> _SINK_
<android.webkit.DateSorter: int getIndex(long)> -> _SINK_
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: java.util.List getInstalledProviders(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: int getHash()> -> _SINK_
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getCurrentSubtype()> -> _SINK_
<com.android.server.am.CompatModePackages: java.util.HashMap getPackages()> -> _SINK_
<android.util.TimeUtils: java.util.ArrayList getTimeZonesWithUniqueOffsets(java.lang.String)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> -> _SINK_
<android.content.pm.IPackageMoveObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.webkit.WebViewClassic$FocusTransitionDrawable: int getOpacity()> -> _SINK_
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> -> _SINK_
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet headSet(java.lang.Object)> -> _SINK_
<android.view.IApplicationToken$Stub$Proxy: long getKeyDispatchingTimeout()> -> _SINK_
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getToTag()> -> _SINK_
<com.android.phone.BluetoothPhoneService$3: java.lang.String getSubscriberNumber()> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getWordInfo(int)> -> _SINK_
<com.android.camera.Util: android.hardware.Camera$Size getOptimalPreviewSize(android.app.Activity,java.util.List,double)> -> _SINK_
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> -> _SINK_
<gov.nist.javax.sip.header.ims.PServedUser: java.lang.String getRegistrationState()> -> _SINK_
<android.util.TypedValue: float getFraction(float,float)> -> _SINK_
<java.util.jar.InitManifest: int getPos()> -> _SINK_
<com.android.mms.dom.smil.SmilRegionMediaElementImpl: org.w3c.dom.smil.SMILRegionElement getRegion()> -> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERIA5String: java.lang.String getString()> -> _SINK_
<android.text.Layout: float getLineMax(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createACKRequest()> -> _SINK_
<gov.nist.javax.sip.header.AddressParametersHeader: java.lang.Object clone()> -> _SINK_
<android.content.pm.LabeledIntent: int getIconResource()> -> _SINK_
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)> -> _SINK_
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getX(android.view.MotionEvent,int)> -> _SINK_
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getY(android.view.MotionEvent,int)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getLocalHost()> -> _SINK_
<gov.nist.javax.sip.header.Via: int getTTL()> -> _SINK_
<com.android.deskclock.worldclock.WorldClockAdapter: int getCount()> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestSelection()> -> _SINK_
<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List getEntries()> -> _SINK_
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)> -> _SINK_
<android.hardware.SensorManager: float getInclination(float[])> -> _SINK_
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObject()> -> _SINK_
<android.view.View: int[] getDrawableState()> -> _SINK_
<android.widget.GridView: android.widget.Adapter getAdapter()> -> _SINK_
<android.support.v4.view.ViewPager$2: float getInterpolation(float)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.MenuInflater getMenuInflater()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonyPlmn()> -> _SINK_
<com.android.internal.widget.ActionBarView: int getDisplayOptions()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] wrap()> -> _SINK_
<android.graphics.drawable.ColorDrawable$ColorState: int getChangingConfigurations()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getBeginTransition()> -> _SINK_
<android.widget.SearchView: int getMaxWidth()> -> _SINK_
<java.io.EmulatedFields: double get(java.lang.String,double)> -> _SINK_
<com.android.email.FolderProperties: java.lang.String getDisplayName(com.android.emailcommon.provider.Mailbox)> -> _SINK_
<android.hardware.Camera$Parameters: int getMaxZoom()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarGravity()> -> _SINK_
<android.widget.AdapterView: android.view.View getEmptyView()> -> _SINK_
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getJavaScriptCanOpenWindowsAutomatically()> -> _SINK_
<com.android.videoeditor.widgets.ThumbnailCache: android.graphics.Bitmap get(com.android.videoeditor.widgets.ThumbnailKey)> -> _SINK_
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay[] getRememberedWifiDisplays()> -> _SINK_
<android.app.ActivityManager: java.util.List getRunningExternalApplications()> -> _SINK_
<android.filterpacks.imageproc.DuotoneFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: java.lang.String getAlphaMaskFilename()> -> _SINK_
<javax.crypto.Cipher: byte[] update(byte[])> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String encodeBody()> -> _SINK_
<com.google.common.collect.TreeMultiset: java.util.Iterator descendingEntryIterator()> -> _SINK_
<android.drm.DrmInfo: byte[] getData()> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.Object[] standardToArray(java.lang.Object[])> -> _SINK_
<android.filterfw.core.AsyncRunner: android.filterfw.core.FilterGraph getGraph()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getAppStartTime()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.widget.AbsListView: int getFooterViewsCount()> -> _SINK_
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.header.Via getViaHeader()> -> _SINK_
<com.adobe.xmp.options.ParseOptions: boolean getOmitNormalization()> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: int getNextAlarm(java.util.Calendar)> -> _SINK_
<android.view.IApplicationToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.text.style.TabStopSpan$Standard: int getTabStop()> -> _SINK_
<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getCompositionTimeEntries()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$600(com.android.ex.chips.BaseRecipientAdapter,android.database.Cursor)> -> _SINK_
<android.app.ActivityManagerProxy: int getUidForIntentSender(android.content.IIntentSender)> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.Intent)> -> _SINK_
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()> -> _SINK_
<libcore.io.ForwardingOs: libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)> -> _SINK_
<android.os.IMessenger$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingScheme()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: long getStartTime()> -> _SINK_
<android.drm.DrmInfo: java.lang.String getMimeType()> -> _SINK_
<android.filterpacks.imageproc.FisheyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()> -> _SINK_
<android.view.View: int getRawTextDirection()> -> _SINK_
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> -> _SINK_
<javax.sip.ResponseEvent: javax.sip.message.Response getResponse()> -> _SINK_
<gov.nist.javax.sip.DialogFilter: java.lang.String getProcessingInfo()> -> _SINK_
<android.os.CommonTimeConfig: boolean getAutoDisable()> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeLocaleDisplayName(java.lang.String)> -> _SINK_
<java.security.cert.CertificateFactory: java.security.Provider getProvider()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()> -> _SINK_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getRecentsButton()> -> _SINK_
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()> -> _SINK_
<com.adobe.xmp.options.Options: boolean getOption(int)> -> _SINK_
<org.apache.harmony.security.x501.AttributeValue: int getTag()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> -> _SINK_
<android.mtp.MtpDevice: byte[] getObject(int,int)> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()> -> _SINK_
<android.media.AudioService$ScoClient: int getPid()> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: float getReportedHorizontalFovDegrees()> -> _SINK_
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getEndRect()> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: int getEntity()> -> _SINK_
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: long getLastSaved()> -> _SINK_
<com.google.common.collect.ImmutableEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<android.view.ViewStub: int getLayoutResource()> -> _SINK_
<com.android.mms.ui.UriImage: byte[] getResizedImageData(int,int,int,int,int,android.net.Uri,android.content.Context)> -> _SINK_
<com.android.internal.database.SortCursor: java.lang.String getString(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()> -> _SINK_
<com.android.camera.MosaicPreviewRenderer: android.graphics.SurfaceTexture getInputSurfaceTexture()> -> _SINK_
<gov.nist.javax.sip.header.SIPObject: java.lang.String debugDump()> -> _SINK_
<android.hardware.input.KeyboardLayout: java.lang.String getLabel()> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: java.lang.String[] getFromColumns()> -> _SINK_
<android.webkit.WebSettingsClassic: int getDefaultFixedFontSize()> -> _SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer get(int[],int,int)> -> _SINK_
<android.renderscript.Element: int getBytesSize()> -> _SINK_
<java.nio.Buffer: java.nio.Buffer rewind()> -> _SINK_
<android.filterfw.core.Filter: java.lang.String getFilterClassName()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerPath(java.lang.String)> -> _SINK_
<android.app.ContextImpl: android.graphics.drawable.Drawable getWallpaper()> -> _SINK_
<android.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message getMessage()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary: com.android.inputmethod.latin.ExpandableDictionary$NextWord getBigramWord(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.VendorPolicyLoader: java.lang.String getImapIdValues(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getCNonce()> -> _SINK_
<android.os.Debug$MemoryInfo: int getOtherSharedDirty(int)> -> _SINK_
<com.android.deskclock.DigitalClock$AmPm: java.lang.CharSequence getAmPmText()> -> _SINK_
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)> -> _SINK_
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object clone()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getKey()> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: long getModificationTime()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class getRawType()> -> _SINK_
<org.apache.harmony.security.x509.CertificatePolicies: byte[] getEncoded()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedGlobalNetworkCallingCodes()> -> _SINK_
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()> -> _SINK_
<android.view.View: int getMeasuredWidthAndState()> -> _SINK_
<android.gesture.GestureLibrary: int getSequenceType()> -> _SINK_
<android.widget.DatePicker: int getMonth()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.Class getAttributeType(java.lang.String)> -> _SINK_
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.CertificatePolicies: java.util.List getPolicyInformations()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getPeerHostPort()> -> _SINK_
<libcore.net.url.FileURLConnection: int getContentLength()> -> _SINK_
<java.lang.Package: java.lang.String getSpecificationVersion()> -> _SINK_
<libcore.net.http.HttpHandler: int getDefaultPort()> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: int getHopCount()> -> _SINK_
<android.app.ContextImpl: java.io.File getFileStreamPath(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getScheme()> -> _SINK_
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.FieldParser getParser(java.lang.String)> -> _SINK_
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()> -> _SINK_
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: int getRows()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<gov.nist.core.NameValueList: java.lang.Object getValue(java.lang.String)> -> _SINK_
<java.security.spec.ECParameterSpec: int getCofactor()> -> _SINK_
<android.server.search.Searchables: java.util.ArrayList getSearchablesInGlobalSearchList()> -> _SINK_
<android.webkit.CertTool: java.lang.String[] getKeyStrengthList()> -> _SINK_
<android.content.res.Resources: java.lang.String getQuantityString(int,int)> -> _SINK_
<com.android.internal.app.AlertController$AlertParams$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.graphics.drawable.LayerDrawable: int getOpacity()> -> _SINK_
<java.text.SimpleDateFormat: java.util.Date get2DigitYearStart()> -> _SINK_
<java.beans.PropertyChangeListenerProxy: java.lang.String getPropertyName()> -> _SINK_
<com.android.videoeditor.service.IntentPool: android.content.Intent get()> -> _SINK_
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: android.view.View getChildOnPageAt(int)> -> _SINK_
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)> -> _SINK_
<android.os.storage.StorageVolume: int getStorageId()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getAndResetGyroData()> -> _SINK_
<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)> -> _SINK_
<java.net.URLConnection: boolean getAllowUserInteraction()> -> _SINK_
<android.widget.ExpandableListConnector: long getItemId(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()> -> _SINK_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMinification()> -> _SINK_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getVideoProfile()> -> _SINK_
<android.app.Activity: java.lang.String getCallingPackage()> -> _SINK_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: boolean getAudioflag()> -> _SINK_
<java.security.KeyStore$Builder$TmpLSParameter: java.security.KeyStore$ProtectionParameter getProtectionParameter()> -> _SINK_
<com.android.wallpaper.RenderScriptWallpaper: android.service.wallpaper.WallpaperService$Engine onCreateEngine()> -> _SINK_
<android.view.DragEvent: java.lang.Object getLocalState()> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> -> _SINK_
<java.nio.MappedByteBufferAdapter: long getLong(int)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getBeginTransition()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getAction(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getCK()> -> _SINK_
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()> -> _SINK_
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector getProxySelector()> -> _SINK_
<android.app.ActivityThread: android.util.DisplayMetrics getDisplayMetricsLocked(int,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getResolvedType()> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getNamespaceCount(int)> -> _SINK_
<android.app.backup.BackupDataInput: int getDataSize()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getValue()> -> _SINK_
<java.net.Authenticator: java.net.InetAddress getRequestingSite()> -> _SINK_
<android.os.IPermissionController$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.email.mail.store.ImapStore$ImapException: java.lang.String getAlertText()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getKey()> -> _SINK_
<com.android.commands.monkey.MonkeyKeyEvent: long getDownTime()> -> _SINK_
<com.android.phone.PhoneGlobals: android.app.PendingIntent getCallBackPendingIntent(android.content.Context,java.lang.String)> -> _SINK_
<android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()> -> _SINK_
<com.android.email.ResourceHelper: com.android.email.ResourceHelper getInstance(android.content.Context)> -> _SINK_
<gov.nist.javax.sip.header.Accept: java.lang.String getContentType()> -> _SINK_
<com.android.mms.dom.smil.TimeListImpl: int getLength()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()> -> _SINK_
<android.view.animation.Transformation: float getAlpha()> -> _SINK_
<com.android.mms.MmsConfig: int getMinimumSlideElementDuration()> -> _SINK_
<gov.nist.javax.sip.stack.IOHandler: java.net.SocketAddress obtainLocalAddress(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)> -> _SINK_
<libcore.net.http.HttpEngine: java.io.OutputStream getRequestBody()> -> _SINK_
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)> -> _SINK_
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.TimeList getBegin()> -> _SINK_
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getEncoded()> -> _SINK_
<android.preference.EditTextPreference: java.lang.String getText()> -> _SINK_
<android.webkit.WebSettingsClassic: int getDoubleTapZoom()> -> _SINK_
<com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long)> -> _SINK_
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()> -> _SINK_
<java.util.Date: long getTime()> -> _SINK_
<android.widget.HeaderViewListAdapter: int getFootersCount()> -> _SINK_
<org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<com.android.camera.PhotoModule: byte[] access$4802(com.android.camera.PhotoModule,byte[])> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getIK()> -> _SINK_
<android.media.AudioTrack: int getAudioSessionId()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.util.Iterator getParameterNames()> -> _SINK_
<android.os.storage.StorageVolume: int getMtpReserveSpace()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectAudioTrackPCMFilePath()> -> _SINK_
<org.apache.http.impl.cookie.RFC2109Spec: int getVersion()> -> _SINK_
<libcore.io.ForwardingOs: int getsockoptInt(java.io.FileDescriptor,int,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getScaledMeasuredWidth(android.view.View)> -> _SINK_
<android.media.videoeditor.MediaItem: java.util.List getAllEffects()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> -> _SINK_
<javax.sip.RequestEvent: javax.sip.message.Request getRequest()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object)> -> _SINK_
<com.android.inputmethod.latin.WordComposer: int getCodeAt(int)> -> _SINK_
<gov.nist.core.NameValueList: gov.nist.core.NameValue getNameValue(java.lang.String)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: int getLayer()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPResponse getLastResponse()> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()> -> _SINK_
<java.util.AbstractQueue: java.lang.Object element()> -> _SINK_
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getCount()> -> _SINK_
<android.app.Instrumentation: android.content.Context getContext()> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.header.CallIdHeader getNewCallId()> -> _SINK_
<com.android.internal.view.IInputContext$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: long getSampleDuration()> -> _SINK_
<android.view.accessibility.AccessibilityEvent: int getEventType()> -> _SINK_
<android.content.Intent: short getShortExtra(java.lang.String,short)> -> _SINK_
<android.os.CommonTimeConfig: int getMasterAnnounceInterval()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultKeyLabelFlags()> -> _SINK_
<org.apache.http.conn.scheme.Scheme: int getDefaultPort()> -> _SINK_
<android.filterfw.core.Filter: int getNumberOfConnectedOutputs()> -> _SINK_
<java.nio.DoubleArrayBuffer: double get()> -> _SINK_
<android.os.storage.StorageVolume: long getMaxFileSize()> -> _SINK_
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckReceived()> -> _SINK_
<android.view.KeyEvent: int getDeviceId()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: long getIfModifiedSince()> -> _SINK_
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.view.View,int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: java.lang.Object getInfo()> -> _SINK_
<com.google.android.apps.lightcycle.util.UiUtil: com.google.android.apps.lightcycle.util.Size getDrawableDimensions(android.content.Context,int)> -> _SINK_
<com.android.launcher2.DragLayer$LayoutParams: int getX()> -> _SINK_
<com.android.launcher2.DragLayer$LayoutParams: int getY()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()> -> _SINK_
<org.apache.http.cookie.CookieOrigin: java.lang.String getPath()> -> _SINK_
<java.nio.ShortArrayBuffer: java.nio.ShortBuffer get(short[],int,int)> -> _SINK_
<com.android.launcher2.PagedView: int getRelativeChildOffset(int)> -> _SINK_
<java.nio.FloatArrayBuffer: float get()> -> _SINK_
<java.security.cert.TrustAnchor: byte[] getNameConstraints()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: int getPort()> -> _SINK_
<gov.nist.javax.sip.header.Allow: java.lang.String getMethod()> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputedReference: java.lang.Object get()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getMediaPlaybackRequiresUserGesture()> -> _SINK_
<android.widget.RemoteViews$ViewGroupAction: java.lang.String getActionName()> -> _SINK_
<android.graphics.drawable.Drawable: int getMinimumWidth()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.LauncherAppWidgetHost getAppWidgetHost()> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()> -> _SINK_
<java.text.DateFormat: java.util.Calendar getCalendar()> -> _SINK_
<android.graphics.Paint: android.graphics.Paint$Style getStyle()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String)> -> _SINK_
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.lang.String getHandler()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getSignedBy()> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)> -> _SINK_
<android.inputmethodservice.KeyboardView$SwipeTracker: float getXVelocity()> -> _SINK_
<android.media.MediaScanner$MyMediaScannerClient: java.lang.String getGenreName(java.lang.String)> -> _SINK_
<android.widget.TimePicker$SavedState: int getHour()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getProtocolVersion()> -> _SINK_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])> -> _SINK_
<java.security.spec.ECFieldF2m: int getFieldSize()> -> _SINK_
<android.widget.Spinner$DialogPopup: java.lang.CharSequence getHintText()> -> _SINK_
<java.util.ArrayList: java.lang.Object get(int)> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: long getContentLength()> -> _SINK_
<com.android.mms.dom.NamedNodeMapImpl: int getLength()> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: int getEndOffset()> -> _SINK_
<android.app.SearchableInfo: int getSettingsDescriptionId()> -> _SINK_
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.MediaBox getMediaBox()> -> _SINK_
<java.io.FileDescriptor: int getInt$()> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getMultiplier()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ContentLanguageHeader createContentLanguageHeader(java.util.Locale)> -> _SINK_
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getCount()> -> _SINK_
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String,boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getRequestChannel()> -> _SINK_
<javax.crypto.Mac: java.lang.String getAlgorithm()> -> _SINK_
<android.content.ContentValues: java.lang.Object get(java.lang.String)> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: com.android.emailcommon.mail.Body getBody()> -> _SINK_
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getAccountCount()> -> _SINK_
<android.webkit.WebViewCore: float getFixedDisplayDensity(android.content.Context)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()> -> _SINK_
<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit)> -> _SINK_
<com.android.email.mail.Sender: java.lang.Class getSettingActivityClass()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: int getType()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: int getPort()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.String getOwnerInfo()> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: java.lang.Object getName()> -> _SINK_
<android.view.View: int getPaddingRight()> -> _SINK_
<android.widget.ViewSwitcher: android.view.View getNextView()> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ImplForVariable parseFormalTypeParameter()> -> _SINK_
<java.math.BigInteger: int getFirstNonzeroDigit()> -> _SINK_
<android.media.videoeditor.MediaItem: java.lang.String getGeneratedImageClip()> -> _SINK_
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()> -> _SINK_
<org.apache.harmony.security.x509.AlternativeName: byte[] getEncoded()> -> _SINK_
<com.android.launcher2.CellLayout: boolean getIsDragOverlapping()> -> _SINK_
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getInMessageCommandButtons()> -> _SINK_
<com.android.systemui.statusbar.tablet.NotificationPanel: android.view.View getClearButton()> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> -> _SINK_
<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk getFirstChunk()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.util.List getCertificateChain(java.security.cert.X509Certificate)> -> _SINK_
<com.android.server.am.ActivityStack: java.util.ArrayList processStoppingActivitiesLocked(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()> -> _SINK_
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)> -> _SINK_
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()> -> _SINK_
<dalvik.system.CloseGuard: dalvik.system.CloseGuard get()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllAudioTracks()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()> -> _SINK_
<libcore.net.http.HttpEngine: java.net.CacheResponse getCacheResponse()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertException: byte getDescriptionCode()> -> _SINK_
<android.media.videoeditor.EffectColor: int getColor()> -> _SINK_
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.Object getCallerIdentity()> -> _SINK_
<android.text.SpannedString: int getSpanStart(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener getSipListener()> -> _SINK_
<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asList()> -> _SINK_
<gov.nist.javax.sip.header.SIPObject: java.lang.String toString()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: int getViewTypeCount()> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: int getMinute()> -> _SINK_
<com.android.launcher2.Hotseat: com.android.launcher2.CellLayout getLayout()> -> _SINK_
<android.content.ClipDescription: int getMimeTypeCount()> -> _SINK_
<com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo getVersionInfo()> -> _SINK_
<com.android.mms.util.ImageCacheService: com.android.mms.util.ImageCacheService$ImageData getImageData(java.lang.String,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()> -> _SINK_
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)> -> _SINK_
<com.android.server.NativeDaemonEvent: int getCmdNumber()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERNumericString: byte[] getOctets()> -> _SINK_
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SINK_
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithSuggestionSpan(android.content.Context,java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords,boolean)> -> _SINK_
<com.android.inputmethod.latin.Suggest: java.util.concurrent.ConcurrentHashMap getUnigramDictionaries()> -> _SINK_
<android.util.TimeUtils: java.util.ArrayList getTimeZones(java.lang.String)> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes(java.lang.Class,boolean)> -> _SINK_
<android.view.View: int getPaddingTop()> -> _SINK_
<com.android.email.LegacyConversions: com.android.emailcommon.mail.Message makeMessage(android.content.Context,com.android.emailcommon.provider.EmailContent$Message)> -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getDur()> -> _SINK_
<com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.NodeList getTimeChildren()> -> _SINK_
<android.view.InputDevice: int getGeneration()> -> _SINK_
<gov.nist.javax.sip.header.SIPDateHeader: java.util.Calendar getDate()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()> -> _SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int)> -> _SINK_
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getChangingConfigurations()> -> _SINK_
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()> -> _SINK_
<libcore.net.http.HttpConnection: javax.net.ssl.SSLSocket getSecureSocketIfConnected()> -> _SINK_
<java.io.File: long getUsableSpace()> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViews getRemoteViewsAt(int)> -> _SINK_
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.providers.userdictionary.UserDictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Priority: java.lang.String getPriority()> -> _SINK_
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandomScript: com.android.commands.monkey.MonkeyEvent getNextEvent()> -> _SINK_
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)> -> _SINK_
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()> -> _SINK_
<android.media.Metadata: long getLong(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: java.lang.String getAuthType()> -> _SINK_
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()> -> _SINK_
<java.net.Socket: int getSendBufferSize()> -> _SINK_
<java.util.LinkedList: java.lang.Object getFirst()> -> _SINK_
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> -> _SINK_
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()> -> _SINK_
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntries()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.util.Iterator getHeaders()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: java.lang.String getAudioWaveformFilename()> -> _SINK_
<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat getPortFormat()> -> _SINK_
<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)> -> _SINK_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()> -> _SINK_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()> -> _SINK_
<android.text.StaticLayout: int getLineCount()> -> _SINK_
<android.webkit.URLUtil: byte[] decode(byte[])> -> _SINK_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: float getDur()> -> _SINK_
<com.android.launcher2.PagedView: android.view.View getPageAt(int)> -> _SINK_
<com.android.deskclock.SettingsActivity: java.lang.CharSequence[][] getAllTimezones()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: android.graphics.Rect getMagnifiedRegionBounds()> -> _SINK_
<com.android.mms.dom.smil.TimeImpl: short getTimeType()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getSIPVersion()> -> _SINK_
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> -> _SINK_
<com.android.launcher2.ShortcutAndWidgetContainer: android.view.View getChildAt(int,int)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])> -> _SINK_
<com.android.email.activity.Welcome: android.content.Intent createAccountShortcutIntent(android.content.Context,java.lang.String,long)> -> _SINK_
<java.util.AbstractSequentialList: java.util.Iterator iterator()> -> _SINK_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: int getAppWidgetId()> -> _SINK_
<android.view.ViewGroup: java.util.ArrayList access$400(android.view.ViewGroup)> -> _SINK_
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()> -> _SINK_
<com.google.common.collect.Multimaps$Keys: java.util.Set createEntrySet()> -> _SINK_
<org.apache.harmony.security.x509.Validity$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.widget.TabHost$TabSpec: java.lang.String getTag()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<gov.nist.javax.sip.parser.Lexer: java.lang.String getHeaderValue(java.lang.String)> -> _SINK_
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getOuterRingSize()> -> _SINK_
<android.graphics.Bitmap: int getPixel(int,int)> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastIoWaitTime()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: int getOrdering()> -> _SINK_
<java.lang.Package: java.lang.String getSpecificationTitle()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getTo()> -> _SINK_
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: java.lang.String getMimeTypeFromFileName(java.lang.String)> -> _SINK_
<java.lang.Package: java.lang.String getImplementationTitle()> -> _SINK_
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> -> _SINK_
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getRadius(int)> -> _SINK_
<android.filterfw.core.SyncRunner: java.lang.Exception getError()> -> _SINK_
<java.net.Socket: boolean getKeepAlive()> -> _SINK_
<android.app.SearchableInfo: int getInputType()> -> _SINK_
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.view.ViewConfiguration: int getFadingEdgeLength()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getEnd()> -> _SINK_
<javax.crypto.ExemptionMechanism: int getOutputSize(int)> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheFile(long,java.lang.String)> -> _SINK_
<android.app.backup.BackupDataInput: java.lang.String getKey()> -> _SINK_
<java.text.NumberFormat: java.lang.Number parse(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Finished: byte[] getData()> -> _SINK_
<android.filterfw.core.Frame: int getCapacity()> -> _SINK_
<java.lang.Class: int getModifiers()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: boolean getUseCaches()> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()> -> _SINK_
<org.apache.harmony.security.x501.AttributeValue: java.lang.String getHexString()> -> _SINK_
<android.media.AudioRecord: int getAudioSessionId()> -> _SINK_
<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()> -> _SINK_
<android.os.IUserManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.drm.ProcessedData: byte[] getData()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()> -> _SINK_
<com.android.email.activity.MailboxMoveToAdapter$MailboxMoveToLoader: android.database.Cursor loadInBackground()> -> _SINK_
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getDefaultKeyWidth()> -> _SINK_
<android.text.SpannableString: int getSpanFlags(java.lang.Object)> -> _SINK_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.hardware.usb.UsbDevice: int getVendorId()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.Pano2dPreviewOverlay getPanoPreview2d()> -> _SINK_
<android.widget.TextView: int getImeOptions()> -> _SINK_
<android.server.search.Searchables: android.content.ComponentName getWebSearchActivity()> -> _SINK_
<com.google.android.apps.lightcycle.util.AnalyticsHelper: com.google.android.apps.lightcycle.util.AnalyticsHelper getInstance(android.content.Context)> -> _SINK_
<android.media.AudioManager: int getStreamMaxVolume(int)> -> _SINK_
<android.media.RemoteControlClient: int getIntPlaybackInformation(int)> -> _SINK_
<com.android.internal.content.PackageHelper: android.os.storage.IMountService getMountService()> -> _SINK_
<com.android.launcher2.SmoothPagedView$OvershootInterpolator: float getInterpolation(float)> -> _SINK_
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<gov.nist.core.GenericObjectList: java.lang.String encode()> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Rect getSurfaceFrame()> -> _SINK_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()> -> _SINK_
<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)> -> _SINK_
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()> -> _SINK_
<android.view.Display: int getFlags()> -> _SINK_
<org.apache.http.impl.conn.AbstractPooledConnAdapter: org.apache.http.conn.routing.HttpRoute getRoute()> -> _SINK_
<com.android.server.wm.WindowState: int getSurfaceLayer()> -> _SINK_
<java.text.Format: java.lang.Object parseObject(java.lang.String)> -> _SINK_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.LocaleUtils$RunInLocale: java.lang.Object runInLocale(android.content.res.Resources,java.util.Locale)> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()> -> _SINK_
<android.graphics.Canvas: int getMaximumBitmapWidth()> -> _SINK_
<android.content.res.TypedArray: float getDimension(int,float)> -> _SINK_
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: int getIntrinsicHeight()> -> _SINK_
<java.net.URLConnection: int getReadTimeout()> -> _SINK_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()> -> _SINK_
<android.widget.RemoteViewsAdapter: int getItemViewType(int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getLocalAddress()> -> _SINK_
<com.adobe.xmp.options.ParseOptions: boolean getAcceptLatin1()> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> -> _SINK_
<com.android.internal.widget.LockPatternView$Cell: int getColumn()> -> _SINK_
<java.util.Arrays$ArrayList: java.lang.Object get(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.io.EmulatedFieldsForLoading: long get(java.lang.String,long)> -> _SINK_
<android.filterpacks.imageproc.SepiaFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.text.DynamicLayout: int getLineStart(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getScrollingIndicator()> -> _SINK_
<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()> -> _SINK_
<com.android.mms.ui.RecipientsEditor$RecipientsEditorTokenizer: java.util.List getNumbers()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId()> -> _SINK_
<android.widget.VideoView: int getBufferPercentage()> -> _SINK_
<java.util.Vector: java.lang.Object get(int)> -> _SINK_
<android.view.ViewConfiguration: int getDoubleTapSlop()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetToResetOnPageFadeOut()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits()> -> _SINK_
<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()> -> _SINK_
<gov.nist.javax.sip.message.MultipartMimeContentImpl: int getContentCount()> -> _SINK_
<gov.nist.javax.sip.header.Via: int getPort()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserType()> -> _SINK_
<android.filterfw.core.FrameFormat: int getDepth()> -> _SINK_
<android.text.SpannedString: int getSpanEnd(java.lang.Object)> -> _SINK_
<android.content.ContextWrapper: android.content.Context getBaseContext()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getIntlNumberFormat(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> -> _SINK_
<java.security.MessageDigest: int getDigestLength()> -> _SINK_
<com.android.videoeditor.OverlaysAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SINK_
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])> -> _SINK_
<com.android.camera.drawable.TextDrawable: int getIntrinsicWidth()> -> _SINK_
<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)> -> _SINK_
<java.nio.Buffer: java.nio.Buffer reset()> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()> -> _SINK_
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)> -> _SINK_
<com.google.android.picasasync.SyncState: int getState(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getAudioChannels()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getQueuedThreads()> -> _SINK_
<java.util.LinkedHashMap: java.util.Iterator newKeyIterator()> -> _SINK_
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> -> _SINK_
<libcore.net.UriCodec: java.lang.String validate(java.lang.String,int,int,java.lang.String)> -> _SINK_
<java.security.MessageDigest: byte[] digest()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.Bundle getAppWidgetOptions(int)> -> _SINK_
<android.view.DragEvent: int getAction()> -> _SINK_
<android.filterfw.core.ShaderProgram: java.lang.Object getHostValue(java.lang.String)> -> _SINK_
<android.os.Handler: android.os.IMessenger getIMessenger()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: float getVolume()> -> _SINK_
<com.adobe.xmp.options.Options: int getOptions()> -> _SINK_
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()> -> _SINK_
<java.nio.CharArrayBuffer: char get()> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()> -> _SINK_
<com.android.email.provider.ContentCache: com.android.email.provider.ContentCache$CacheToken getCacheToken(java.lang.String)> -> _SINK_
<com.android.launcher2.Folder: com.android.launcher2.FolderInfo getInfo()> -> _SINK_
<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)> -> _SINK_
<android.content.ContextWrapper: android.content.Context getApplicationContext()> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()> -> _SINK_
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: int getFixedContentLength()> -> _SINK_
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance(java.lang.String,java.util.Map)> -> _SINK_
<gov.nist.javax.sip.header.CallInfo: javax.sip.address.URI getInfo()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()> -> _SINK_
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()> -> _SINK_
<android.view.View: float getY()> -> _SINK_
<android.view.View: float getX()> -> _SINK_
<java.nio.DirectByteBuffer: int getInt(int)> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getRawResourceId()> -> _SINK_
<com.google.common.collect.ForwardingMap$StandardValues: java.util.Map map()> -> _SINK_
<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)> -> _SINK_
<android.text.style.QuoteSpan: int getSpanTypeId()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> -> _SINK_
<java.io.WriteAbortedException: java.lang.Throwable getCause()> -> _SINK_
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()> -> _SINK_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])> -> _SINK_
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()> -> _SINK_
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> -> _SINK_
<com.android.mms.transaction.RetryScheduler: com.android.mms.transaction.RetryScheduler getInstance(android.content.Context)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: int getPeerPort()> -> _SINK_
<gov.nist.javax.sip.message.ContentImpl: javax.sip.header.ContentTypeHeader getContentTypeHeader()> -> _SINK_
<android.widget.ListPopupWindow: int getVerticalOffset()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getQName(int)> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: android.graphics.Bitmap getPixels(java.lang.String,int,int,long,int)> -> _SINK_
<java.lang.reflect.Constructor: java.lang.String getName()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: short getFill()> -> _SINK_
<android.webkit.WebViewCore: android.webkit.DeviceMotionService getDeviceMotionService()> -> _SINK_
<android.renderscript.Program: int getTextureCount()> -> _SINK_
<android.os.UserManager: java.lang.String getUserName()> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(byte[])> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getAllowFileAccess()> -> _SINK_
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder(boolean)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getRequestTemplate()> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<android.widget.EdgeEffect: android.graphics.Rect getBounds(boolean)> -> _SINK_
<com.android.camera.ComboPreferences: android.content.SharedPreferences getLocal()> -> _SINK_
<com.android.mms.dom.DocumentImpl: short getNodeType()> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> -> _SINK_
<java.nio.CharSequenceAdapter: char get()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Response getResponse()> -> _SINK_
<android.os.Bundle: android.os.IBinder getIBinder(java.lang.String)> -> _SINK_
<android.widget.AbsListView: int getRightPaddingOffset()> -> _SINK_
<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)> -> _SINK_
<com.android.launcher2.CellLayout: int getCellWidth()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)> -> _SINK_
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()> -> _SINK_
<java.lang.reflect.Field: long getLong(java.lang.Object)> -> _SINK_
<com.google.common.collect.ForwardingObject: java.lang.String toString()> -> _SINK_
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getFirstChunk()> -> _SINK_
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String,int)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()> -> _SINK_
<android.view.animation.Animation: long getDuration()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.launcher2.Folder: android.view.View getItemAt(int)> -> _SINK_
<android.widget.Chronometer: long getBase()> -> _SINK_
<gov.nist.core.Token: java.lang.String getTokenValue()> -> _SINK_
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> -> _SINK_
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getAddressString(boolean)> -> _SINK_
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<android.media.videoeditor.MediaImageItem: void getThumbnailList(int,int,long,long,int,int[],android.media.videoeditor.MediaItem$GetThumbnailListCallback)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getTabCount()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getMAddrParam()> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer get(byte[],int,int)> -> _SINK_
<com.android.emailcommon.mail.Multipart: com.android.emailcommon.mail.BodyPart getBodyPart(int)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()> -> _SINK_
<android.app.ContextImpl: android.content.Context getApplicationContext()> -> _SINK_
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)> -> _SINK_
<android.widget.AdapterView: int getCount()> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle(android.os.Bundle)> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)> -> _SINK_
<android.content.Context: java.lang.CharSequence getText(int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getFilename()> -> _SINK_
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SINK_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(java.lang.Object,int)> -> _SINK_
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()> -> _SINK_
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()> -> _SINK_
<java.util.zip.Inflater: int getTotalIn()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.deskclock.widget.swipeablelistview.LogTag: java.lang.String getLogTag()> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)> -> _SINK_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.content.Context)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: int getWidth()> -> _SINK_
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Host)> -> _SINK_
<org.apache.harmony.security.x501.Name$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()> -> _SINK_
<android.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()> -> _SINK_
<java.text.NumberFormat: java.lang.String format(long)> -> _SINK_
<android.test.IsolatedContext: java.util.List getAndClearBroadcastIntents()> -> _SINK_
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getRootElementName()> -> _SINK_
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()> -> _SINK_
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<android.widget.TextView: int getTotalPaddingTop()> -> _SINK_
<com.android.mms.ui.UriImage: com.google.android.mms.pdu.PduPart getResizedImageAsPart(int,int,int)> -> _SINK_
<android.text.style.ForegroundColorSpan: int getSpanTypeId()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()> -> _SINK_
<android.widget.ArrayAdapter: int getPosition(java.lang.Object)> -> _SINK_
<android.view.MotionEvent: long getHistoricalEventTime(int)> -> _SINK_
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getItemCount()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getValue()> -> _SINK_
<org.apache.harmony.security.x509.InvalidityDate: java.util.Date getDate()> -> _SINK_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> -> _SINK_
<android.media.audiofx.Equalizer: short getCurrentPreset()> -> _SINK_
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: int getTag()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.text.Layout: android.text.TextPaint getPaint()> -> _SINK_
<com.android.phone.EditPhoneNumberPreference: java.lang.String getStringValue()> -> _SINK_
<android.widget.TextView: int getCompoundPaddingBottom()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object)> -> _SINK_
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)> -> _SINK_
<android.widget.RemoteViews$TextViewSizeAction: java.lang.String getActionName()> -> _SINK_
<com.android.phone.PhoneGlobals: com.android.internal.telephony.PhoneConstants$State getPhoneState()> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentEncoding()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getEncryptionAlgorithm()> -> _SINK_
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: int getMaxMoreSuggestionsRow()> -> _SINK_
<android.graphics.YuvImage: int getYuvFormat()> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: int getLayer()> -> _SINK_
<java.util.zip.Inflater: int getAdler()> -> _SINK_
<java.security.spec.X509EncodedKeySpec: java.lang.String getFormat()> -> _SINK_
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getBackButton()> -> _SINK_
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()> -> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: int getWidth()> -> _SINK_
<android.app.Fragment: android.app.Activity getActivity()> -> _SINK_
<com.android.inputmethod.compat.SuggestionsInfoCompatUtils: int getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS()> -> _SINK_
<android.view.inputmethod.CompletionInfo: int getPosition()> -> _SINK_
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> -> _SINK_
<com.android.camera.Storage: android.net.Uri newImage(android.content.ContentResolver,java.lang.String,long,int,int)> -> _SINK_
<java.io.WriteAbortedException: java.lang.String getMessage()> -> _SINK_
<java.nio.HeapByteBuffer: float getFloat()> -> _SINK_
<com.coremedia.iso.boxes.HandlerBox: long getContentSize()> -> _SINK_
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteOrder order()> -> _SINK_
<com.android.mms.ui.MessageListItem$5: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getAreaCodeMapStorage()> -> _SINK_
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.renderscript.Element: int getSubElementOffsetBytes(int)> -> _SINK_
<android.view.MotionEvent: float getOrientation(int)> -> _SINK_
<android.widget.CompoundButton: int getCompoundPaddingLeft()> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int getPendingAppTransition()> -> _SINK_
<android.widget.RemoteViews$TextViewDrawableAction: java.lang.String getActionName()> -> _SINK_
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.OverlayLinearLayout getOverlayLayout()> -> _SINK_
<com.android.mms.MmsConfig: java.lang.String getHttpParams()> -> _SINK_
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty()> -> _SINK_
<com.google.android.gms.common.internal.GmsClient: android.content.Context getContext()> -> _SINK_
<android.widget.BaseAdapter: int getItemViewType(int)> -> _SINK_
<android.animation.ValueAnimator: long getCurrentPlayTime()> -> _SINK_
<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SINK_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getIsdnSubAddress()> -> _SINK_
<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()> -> _SINK_
<android.text.Layout: int getParagraphRight(int)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAt(int)> -> _SINK_
<com.android.camera.ui.PieItem: int getOuterRadius()> -> _SINK_
<android.opengl.GLException: int getError()> -> _SINK_
<gov.nist.core.GenericObjectList: java.lang.String getIndentation()> -> _SINK_
<android.app.ContextImpl: java.io.File getFilesDir()> -> _SINK_
<com.android.internal.widget.WaveView: int getSuggestedMinimumHeight()> -> _SINK_
<com.android.launcher2.PagedView: int getScaledMeasuredWidth(android.view.View)> -> _SINK_
<android.view.ViewRootImpl: android.view.WindowLeaked getLocation()> -> _SINK_
<android.widget.ActivityChooserModel: android.widget.ActivityChooserModel get(android.content.Context,java.lang.String)> -> _SINK_
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)> -> _SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineWrap(java.security.Key)> -> _SINK_
<android.text.style.ForegroundColorSpan: int getForegroundColor()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.util.Iterator getRouteSet()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap$SerializedForm: java.lang.Object readResolve()> -> _SINK_
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String getMessage()> -> _SINK_
<com.android.email.Preferences: boolean getEnableDebugLogging()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()> -> _SINK_
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralString: byte[] getOctets()> -> _SINK_
<java.security.KeyStore$Builder$BuilderImpl: java.security.KeyStore$ProtectionParameter getProtectionParameter(java.lang.String)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.security.Permission getPermission()> -> _SINK_
<android.app.FragmentManager: android.app.FragmentTransaction openTransaction()> -> _SINK_
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> -> _SINK_
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createAlert(android.content.Context,java.lang.String,int,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,boolean)> -> _SINK_
<com.android.videoeditor.TransitionsAdapter: int getCount()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getAlphaForPage(int,int,boolean)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] getKeyboardLayouts()> -> _SINK_
<com.android.mms.ui.MessagingPreferenceActivity: android.app.Dialog onCreateDialog(int)> -> _SINK_
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)> -> _SINK_
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer getHeader()> -> _SINK_
<java.net.Socket: int getTrafficClass()> -> _SINK_
<com.android.internal.view.WindowManagerPolicyThread: java.lang.Thread getThread()> -> _SINK_
<android.content.res.TypedArray: int getColor(int,int)> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: int getDescendantFocusability()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Boolean: org.apache.harmony.security.asn1.ASN1Boolean getInstance()> -> _SINK_
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String,byte)> -> _SINK_
<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.commands.monkey.MonkeyTouchEvent: java.lang.String getTypeLabel()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1BitString: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.mms.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()> -> _SINK_
<com.android.internal.content.PackageMonitor: int getChangingUserId()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()> -> _SINK_
<android.view.ViewRootImpl: android.view.ViewParent getParentForAccessibility()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()> -> _SINK_
<android.widget.TableRow: int getChildrenSkipCount(android.view.View,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int getAppOrientation(android.view.IApplicationToken)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: gov.nist.javax.sip.address.TelephoneNumber getTelephoneSubscriber()> -> _SINK_
<javax.security.auth.x500.X500Principal: java.lang.String getName()> -> _SINK_
<android.webkit.ZoomManager: float getReadingLevelScale()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeId()> -> _SINK_
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()> -> _SINK_
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(int)> -> _SINK_
<android.webkit.WebViewClassic: int getHistoryPictureWidth()> -> _SINK_
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)> -> _SINK_
<java.security.Provider: java.util.Collection values()> -> _SINK_
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getUserInfo(int)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()> -> _SINK_
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()> -> _SINK_
<android.filterpacks.imageproc.CrossProcessFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPort()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()> -> _SINK_
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment restoreAttachmentWithId(android.content.Context,long)> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: long getDownTime()> -> _SINK_
<java.util.TimeZone: int getDSTSavings()> -> _SINK_
<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()> -> _SINK_
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SINK_
<android.view.ViewGroup: android.view.View getFocusedChild()> -> _SINK_
<com.adobe.xmp.options.AliasOptions: int getValidOptions()> -> _SINK_
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.android.internal.view.menu.MenuView$ItemView)> -> _SINK_
<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()> -> _SINK_
<android.util.NtpTrustedTime: long getCacheCertainty()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)> -> _SINK_
<com.android.videoeditor.TransitionsAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.widget.TextView: int getTotalPaddingEnd()> -> _SINK_
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()> -> _SINK_
<android.webkit.CacheManager$CacheResult: long getContentLength()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkViews$GetViewsWithTextCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)> -> _SINK_
<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemObject: java.util.List getHeaders()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> -> _SINK_
<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)> -> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)> -> _SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()> -> _SINK_
<java.io.EmulatedFields: char get(java.lang.String,char)> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getSize()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getBegin()> -> _SINK_
<com.android.camera.CameraScreenNail: int getUncroppedRenderWidth()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getDay()> -> _SINK_
<android.security.SystemKeyStore: byte[] retrieveKey(java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)> -> _SINK_
<java.nio.LongToByteBufferAdapter: long get()> -> _SINK_
<java.nio.DirectByteBuffer: double getDouble(int)> -> _SINK_
<java.security.cert.CertPath: java.lang.Object writeReplace()> -> _SINK_
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<org.apache.http.client.methods.HttpPost: java.lang.String getMethod()> -> _SINK_
<android.webkit.HTML5VideoViewProxy: android.webkit.WebViewClassic getWebView()> -> _SINK_
<android.webkit.WebSettingsClassic: int getMinimumLogicalFontSize()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)> -> _SINK_
<com.android.mms.ui.IconListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.ContextImpl: android.content.Context getReceiverRestrictedContext()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.util.Date getDate()> -> _SINK_
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getItemClickListener()> -> _SINK_
<com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object)> -> _SINK_
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getWebSearchActivity()> -> _SINK_
<android.renderscript.Element: int getSubElementArraySize(int)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<com.android.camera.CameraHolder: android.hardware.Camera$CameraInfo[] getCameraInfo()> -> _SINK_
<android.mtp.MtpObjectInfo: int getStorageId()> -> _SINK_
<android.speech.IRecognitionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.ProgressDialog: int getMax()> -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.camera.ui.RenderOverlay: int getWindowPositionY()> -> _SINK_
<gov.nist.javax.sip.stack.HopImpl: int getPort()> -> _SINK_
<com.android.camera.ui.RenderOverlay: int getWindowPositionX()> -> _SINK_
<gov.nist.javax.sip.header.From: java.lang.String getDisplayName()> -> _SINK_
<android.text.style.BulletSpan: int getLeadingMargin(boolean)> -> _SINK_
<java.util.UUID: long getMostSignificantBits()> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowState: com.android.server.wm.MagnificationSpec getWindowMagnificationSpecLocked()> -> _SINK_
<android.widget.ListPopupWindow: android.view.View getSelectedView()> -> _SINK_
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()> -> _SINK_
<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.Activity: int getTaskId()> -> _SINK_
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getSubtitle()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: int getViewTypeCount()> -> _SINK_
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)> -> _SINK_
<android.widget.Spinner$DropDownAdapter: int getViewTypeCount()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILLayoutElement getLayout()> -> _SINK_
<android.app.Fragment: int getId()> -> _SINK_
<android.webkit.WebViewClassic: float getZoomOverviewScale()> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void getSelectedText(int,int,com.android.internal.view.IInputContextCallback)> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> -> _SINK_
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<android.view.View$MeasureSpec: int getMode(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: javax.net.ssl.SSLSession getSession(byte[])> -> _SINK_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()> -> _SINK_
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginLine()> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getPositionDescription()> -> _SINK_
<com.android.launcher2.DragLayer: int getChildDrawingOrder(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: int getLocalSequenceNumber()> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getReliableProvisionalResponse()> -> _SINK_
<android.media.MediaRouter$RouteGroup: int getRouteCount()> -> _SINK_
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()> -> _SINK_
<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()> -> _SINK_
<android.view.KeyEvent: int getMetaState()> -> _SINK_
<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int getEncryptionState()> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: com.android.launcher2.AppsCustomizePagedView$ContentType getContentTypeForTabTag(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.lang.String getContentEncoding()> -> _SINK_
<com.android.internal.util.StateMachine: android.os.Handler getHandler()> -> _SINK_
<java.util.TimeZone: java.util.TimeZone getDefault()> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: int getTabWidth()> -> _SINK_
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()> -> _SINK_
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()> -> _SINK_
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> -> _SINK_
<com.android.launcher2.Workspace$ZoomOutInterpolator: float getInterpolation(float)> -> _SINK_
<java.sql.Date: int getSeconds()> -> _SINK_
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)> -> _SINK_
<android.content.pm.PackageItemInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.io.InputStream getOctetStream()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()> -> _SINK_
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean,int)> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)> -> _SINK_
<android.hardware.SensorManager$SensorEventPool: android.hardware.SensorEvent getFromPool()> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: int getHour()> -> _SINK_
<java.nio.BaseByteBuffer: char getChar()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getFrameRate(int)> -> _SINK_
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor moveTo(int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encodeSIPHeaders()> -> _SINK_
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.os.Binder: android.os.UserHandle getCallingUserHandle()> -> _SINK_
<android.accounts.Account: java.lang.String toString()> -> _SINK_
<junit.framework.ComparisonFailure: java.lang.String getExpected()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[],int,int)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObjectNoData()> -> _SINK_
<android.view.View: android.graphics.Insets getOpticalInsets()> -> _SINK_
<android.content.res.Resources: java.lang.String getString(int)> -> _SINK_
<org.apache.james.mime4j.field.datetime.DateTime: java.util.Date getDate()> -> _SINK_
<android.webkit.ViewManager: android.webkit.ViewManager$ChildView createView()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getProperty(java.lang.String)> -> _SINK_
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable loadIconForResolveInfo(android.content.pm.ResolveInfo)> -> _SINK_
<org.apache.http.entity.ByteArrayEntity: java.io.InputStream getContent()> -> _SINK_
<com.android.internal.database.SortCursor: short getShort(int)> -> _SINK_
<android.app.Activity: android.app.Activity getParent()> -> _SINK_
<com.android.launcher2.SearchDropTargetBar: android.graphics.Rect getSearchBarBounds()> -> _SINK_
<java.nio.CharBuffer: java.lang.Object array()> -> _SINK_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> -> _SINK_
<org.apache.harmony.security.x509.GeneralName: byte[] getEncodedName()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.Transition getTransition(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> -> _SINK_
<android.view.View: int getId()> -> _SINK_
<java.lang.SecurityManager: java.lang.Class[] getClassContext()> -> _SINK_
<android.content.res.ColorStateList: int getDefaultColor()> -> _SINK_
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: java.lang.Object getItem(int)> -> _SINK_
<com.android.mms.util.DownloadManager: boolean getAutoDownloadState(android.content.SharedPreferences)> -> _SINK_
<android.text.StaticLayout: int getLineDescent(int)> -> _SINK_
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.filterfw.core.FilterGraph: java.util.Set getFilters()> -> _SINK_
<android.media.AudioManager: int getRingerMode()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getMaxWallpaperLayer()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.io.InputStream getErrorStream()> -> _SINK_
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getContainerSelector()> -> _SINK_
<com.android.videoeditor.ProjectPickerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: java.lang.Object getItem(int)> -> _SINK_
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)> -> _SINK_
<java.util.logging.LogRecord: long getSequenceNumber()> -> _SINK_
<android.webkit.WebViewCore: android.webkit.BrowserFrame getBrowserFrame()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.os.Bundle getPreviousDaysOfWeekMap()> -> _SINK_
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> -> _SINK_
<android.os.Debug: int getGlobalAllocSize()> -> _SINK_
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> -> _SINK_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SINK_
<android.app.ActivityManager: java.util.List getRunningTasks(int)> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle(android.os.Bundle)> -> _SINK_
<android.view.View: int getMeasuredWidth()> -> _SINK_
<android.widget.ExpandableListConnector: java.util.ArrayList getExpandedGroupMetadataList()> -> _SINK_
<java.lang.Character: byte getDirectionality(int)> -> _SINK_
<com.adobe.xmp.options.ParseOptions: boolean getStrictAliasing()> -> _SINK_
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.text.SpannableStringInternal: int getSpanEnd(java.lang.Object)> -> _SINK_
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.widget.LockPatternUtils getLockPatternUtils()> -> _SINK_
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)> -> _SINK_
<android.os.IUserManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.security.x509.Extension$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<libcore.io.ForwardingOs: int getppid()> -> _SINK_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.RecentTasksLoader getInstance(android.content.Context)> -> _SINK_
<com.android.phone.EditPhoneNumberPreference: java.lang.CharSequence getSummaryOn()> -> _SINK_
<org.apache.harmony.security.x509.Extension$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getContentSize()> -> _SINK_
<com.android.providers.downloads.DownloadInfo: java.lang.String getLogMessageForNetworkError(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Primitive readTaggedObject(boolean,int)> -> _SINK_
<android.media.ExifInterface: byte[] getThumbnail()> -> _SINK_
<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.IsoFile getIsoFile()> -> _SINK_
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.SearchManager getSearchManager()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebView getWebView()> -> _SINK_
<com.android.email.FolderProperties: int getMessageCount(int,int,int)> -> _SINK_
<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()> -> _SINK_
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()> -> _SINK_
<android.media.AudioManager: int getRouting(int)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getTrackId()> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationString(java.lang.String)> -> _SINK_
<android.text.style.AbsoluteSizeSpan: boolean getDip()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getMonth()> -> _SINK_
<libcore.net.url.FileURLConnection: java.lang.String getContentType()> -> _SINK_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLength()> -> _SINK_
<com.coremedia.iso.boxes.mdat.SampleList: java.lang.Object get(int)> -> _SINK_
<android.view.View: android.content.res.Resources getResources()> -> _SINK_
<android.widget.ExpandableListView: long getExpandableListPosition(int)> -> _SINK_
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)> -> _SINK_
<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()> -> _SINK_
<com.android.launcher2.Workspace: com.android.launcher2.Folder getOpenFolder()> -> _SINK_
<android.app.ActivityThread: int getIntCoreSetting(java.lang.String,int)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()> -> _SINK_
<android.content.pm.ActivityInfo: int getThemeResource()> -> _SINK_
<com.android.email.activity.AccountSelectorAdapter: long getId(int)> -> _SINK_
<android.filterfw.core.NativeFrame: android.graphics.Bitmap getBitmap()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getMACLength()> -> _SINK_
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()> -> _SINK_
<android.mtp.MtpObjectInfo: int getParent()> -> _SINK_
<android.webkit.WebHistoryItemClassic: java.lang.String getUrl()> -> _SINK_
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> -> _SINK_
<android.media.RingtoneManager: boolean getStopPreviousRingtone()> -> _SINK_
<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()> -> _SINK_
<java.text.AttributedString$AttributedIterator: java.util.Set getAllAttributeKeys()> -> _SINK_
<android.animation.Keyframe$IntKeyframe: int getIntValue()> -> _SINK_
<com.beetstra.jutf7.Base64Util: int getSextet(byte)> -> _SINK_
<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndLine()> -> _SINK_
<org.apache.harmony.security.pkcs7.ContentInfo: int[] getContentType()> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: int getSlotIndex(java.lang.String)> -> _SINK_
<java.util.logging.Handler: java.lang.String getEncoding()> -> _SINK_
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> -> _SINK_
<android.animation.IntKeyframeSet: java.lang.Object getValue(float)> -> _SINK_
<com.android.videoeditor.TransitionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.ActivityManagerNative: android.app.IActivityManager getDefault()> -> _SINK_
<java.lang.reflect.Field: int getModifiers()> -> _SINK_
<android.support.v4.app.NotificationCompat$Style: android.app.Notification build()> -> _SINK_
<android.text.Layout: int getEllipsizedWidth()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getSmallFrameHeight()> -> _SINK_
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: int getChildrenLength()> -> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewDatabase getWebViewDatabase(android.content.Context)> -> _SINK_
<java.lang.Runtime: java.lang.Runtime getRuntime()> -> _SINK_
<java.util.UnknownFormatConversionException: java.lang.String getMessage()> -> _SINK_
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.Throwable getError()> -> _SINK_
<gov.nist.javax.sip.header.ReplyTo: java.lang.String getDisplayName()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getOpacity()> -> _SINK_
<android.view.View: int getNextFocusForwardId()> -> _SINK_
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> -> _SINK_
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)> -> _SINK_
<com.android.mms.data.RecipientIdCache: java.lang.String getSingleAddressFromCanonicalAddressInDb(android.content.Context,java.lang.String)> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getCurrentPosition()> -> _SINK_
<android.webkit.CallbackProxy$UploadFile: android.net.Uri getResult()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getAudioSamplingFrequency()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getLatestVersion(java.lang.String[])> -> _SINK_
<org.apache.http.conn.BasicManagedEntity: java.io.InputStream getContent()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getSelectedNavigationIndex()> -> _SINK_
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.Dictionary getMainDictionary()> -> _SINK_
<android.drm.DrmEvent: int getUniqueId()> -> _SINK_
<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()> -> _SINK_
<android.widget.AbsListView: float getTopFadingEdgeStrength()> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()> -> _SINK_
<org.apache.harmony.security.x509.ExtendedKeyUsage: java.util.List getExtendedKeyUsage()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getOpaque()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: int getIntrinsicHeight()> -> _SINK_
<android.widget.VideoView: int getCurrentPosition()> -> _SINK_
<android.server.search.Searchables: android.content.ComponentName getGlobalSearchActivity()> -> _SINK_
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()> -> _SINK_
<android.filterfw.io.GraphReader: android.filterfw.core.FilterGraph readGraphResource(android.content.Context,int)> -> _SINK_
<android.graphics.NinePatch: int getWidth()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getUseWideViewPort()> -> _SINK_
<java.security.cert.CertStore: java.lang.String getType()> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getKey()> -> _SINK_
<android.webkit.ZoomManager: float getMinZoomScale()> -> _SINK_
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndLine()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Level getLevel()> -> _SINK_
<javax.obex.ServerOperation: int getResponseCode()> -> _SINK_
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> -> _SINK_
<com.google.common.collect.TransformedImmutableList: com.google.common.collect.ImmutableList subList(int,int)> -> _SINK_
<com.android.email.activity.MessageCompose: android.content.Intent getMessageComposeIntent(android.content.Context,long)> -> _SINK_
<com.android.mms.dom.DocumentImpl: java.lang.String getInputEncoding()> -> _SINK_
<android.filterfw.core.GLFrame: int getTextureId()> -> _SINK_
<android.filterfw.core.FrameFormat: int getWidth()> -> _SINK_
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()> -> _SINK_
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)> -> _SINK_
<android.text.DynamicLayout: int[] getBlockIndices()> -> _SINK_
<android.view.View: android.graphics.Matrix getInverseMatrix()> -> _SINK_
<java.text.Collator: java.text.Collator getInstance()> -> _SINK_
<gov.nist.javax.sip.header.Expires: int getExpires()> -> _SINK_
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<com.android.videoeditor.widgets.ImageViewTouchBase: float getScale()> -> _SINK_
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()> -> _SINK_
<android.widget.HeaderViewListAdapter: long getItemId(int)> -> _SINK_
<com.google.common.collect.BstNodeFactory: com.google.common.collect.BstNode createLeaf(com.google.common.collect.BstNode)> -> _SINK_
<android.media.AudioManager: int getLastAudibleStreamVolume(int)> -> _SINK_
<android.util.EventLog$Event: java.lang.Object getData()> -> _SINK_
<gov.nist.javax.sip.header.InReplyTo: java.lang.String getCallId()> -> _SINK_
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getLocalTag()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getCallId()> -> _SINK_
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float distanceInfluenceForSnapDuration(float)> -> _SINK_
<org.apache.http.impl.cookie.RFC2965Spec: org.apache.http.Header getVersionHeader()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()> -> _SINK_
<com.android.commands.monkey.MonkeyMotionEvent: int getAction()> -> _SINK_
<android.widget.PopupWindow: int getWindowLayoutType()> -> _SINK_
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)> -> _SINK_
<libcore.net.http.ResponseHeaders: java.lang.String getEtag()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()> -> _SINK_
<com.android.mms.transaction.Transaction: java.lang.String toString()> -> _SINK_
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SINK_
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.xml.sax.SAXParseException: int getLineNumber()> -> _SINK_
<java.nio.channels.FileLock: java.lang.String toString()> -> _SINK_
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> -> _SINK_
<com.android.mms.util.Recycler$MmsRecycler: int getMessageLimit(android.content.Context)> -> _SINK_
<android.view.KeyEvent: java.lang.String getCharacters()> -> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> -> _SINK_
<android.widget.TextView: float getTextScaleX()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()> -> _SINK_
<android.app.ActivityThread: android.content.res.Configuration getConfiguration()> -> _SINK_
<com.android.mms.transaction.NotificationTransaction: int getType()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getToIndex()> -> _SINK_
<java.security.CodeSource: java.net.URL getLocation()> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: long getSentBytesCount()> -> _SINK_
<com.android.emailcommon.internet.TextBody: java.io.InputStream getInputStream()> -> _SINK_
<android.hardware.Sensor: float getMaximumRange()> -> _SINK_
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> -> _SINK_
<android.widget.GridLayout: boolean getUseDefaultMargins()> -> _SINK_
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.BasicConstraints getBasicConstraintsValue()> -> _SINK_
<android.view.ViewRootImpl$2: android.graphics.Rect getSurfaceFrame()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: int getUniqueId()> -> _SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)> -> _SINK_
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SINK_
<android.filterpacks.imageproc.SaturateFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> -> _SINK_
<android.filterfw.core.VertexFrame: java.lang.Object getObjectValue()> -> _SINK_
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryPermissionsByGroup(java.lang.String,int)> -> _SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.model.RegionModel: int getLeft()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> -> _SINK_
<android.widget.TextView: int getMinEms()> -> _SINK_
<com.android.inputmethod.keyboard.Key: int getMoreKeyLabelFlags()> -> _SINK_
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: int getBandwidth(java.lang.String)> -> _SINK_
<android.widget.TextView: android.graphics.Typeface getTypeface()> -> _SINK_
<javax.obex.HeaderSet: int getResponseCode()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getOpaque()> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getState()> -> _SINK_
<android.mtp.MtpDeviceInfo: java.lang.String getModel()> -> _SINK_
<org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.security.cert.Certificate[] getLocalCertificates()> -> _SINK_
<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie2: int[] getPorts()> -> _SINK_
<android.view.View: int getLeft()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)> -> _SINK_
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> -> _SINK_
<java.security.spec.EllipticCurve: java.math.BigInteger getB()> -> _SINK_
<android.webkit.WebViewCore$AutoFillData: java.lang.String getPreviewString()> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> -> _SINK_
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()> -> _SINK_
<com.android.mms.ui.MessageItem: long getMessageId()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: int getTTLParam()> -> _SINK_
<android.widget.Switch: int getCompoundPaddingRight()> -> _SINK_
<gov.nist.javax.sip.header.Warning: java.lang.String getText()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn: java.lang.String getMessage()> -> _SINK_
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanFlags(java.lang.Object)> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])> -> _SINK_
<android.text.method.MultiTapKeyListener: int getInputType()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: java.lang.String getString()> -> _SINK_
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getOriginatingIOI()> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()> -> _SINK_
<android.graphics.Paint: android.graphics.Xfermode getXfermode()> -> _SINK_
<android.sax.Element: android.sax.Element getChild(java.lang.String)> -> _SINK_
<android.os.Parcel: java.lang.Object[] readTypedArray(android.os.Parcelable$Creator)> -> _SINK_
<java.net.URL: java.lang.String getFile()> -> _SINK_
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentBox: com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox getTrackFragmentHeaderBox()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.DrawableGL: com.google.android.apps.lightcycle.opengl.Shader getShader()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERT61String: java.lang.String getString()> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()> -> _SINK_
<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()> -> _SINK_
<android.app.ActivityManager: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)> -> _SINK_
<android.widget.GridView: int getRequestedColumnWidth()> -> _SINK_
<android.provider.Settings: java.lang.String getGTalkDeviceId(long)> -> _SINK_
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)> -> _SINK_
<android.view.View: int getDrawingCacheBackgroundColor()> -> _SINK_
<android.widget.TextView: int getLineAtCoordinate(float)> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetwork$CommandQueueImpl: com.android.commands.monkey.MonkeyEvent getNextQueuedEvent()> -> _SINK_
<android.media.RemoteControlClient: int getRcseId()> -> _SINK_
<com.android.server.PackageManagerBackupAgent: java.util.Set getRestoredPackages()> -> _SINK_
<android.content.SyncManager: java.lang.String formatTime(long)> -> _SINK_
<java.nio.NioUtils: java.io.FileDescriptor getFD(java.nio.channels.FileChannel)> -> _SINK_
<android.text.style.SuggestionSpan: int getSpanTypeId()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> -> _SINK_
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getTitle()> -> _SINK_
<android.content.pm.ContainerEncryptionParams: long getAuthenticatedDataStart()> -> _SINK_
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> -> _SINK_
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,byte[],javax.sip.header.ContentTypeHeader)> -> _SINK_
<android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()> -> _SINK_
<android.widget.GridLayout: int getColumnCount()> -> _SINK_
<com.android.email.activity.UIControllerOnePane: int getLayoutId()> -> _SINK_
<android.widget.TextView: int getMaxWidth()> -> _SINK_
<com.android.launcher2.LauncherModel: int getCellLayoutChildId(long,int,int,int,int,int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean isDataConnectivityPossible()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()> -> _SINK_
<gov.nist.javax.sip.header.SIPETag: java.lang.String getETag()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()> -> _SINK_
<android.os.storage.StorageManager: java.util.List access$000(android.os.storage.StorageManager)> -> _SINK_
<java.text.DecimalFormatSymbols: char getPercent()> -> _SINK_
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getSessionBaseDirectory()> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: long getItemId(int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getInetAddress()> -> _SINK_
<android.app.ActivityThread: android.app.Activity getActivity(android.os.IBinder)> -> _SINK_
<android.widget.AdapterView: long getSelectedItemId()> -> _SINK_
<com.google.common.collect.RegularImmutableList$1: java.lang.Object get(int)> -> _SINK_
<gov.nist.javax.sip.header.UserAgent: java.util.ListIterator getProduct()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int,int)> -> _SINK_
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()> -> _SINK_
<android.webkit.WebView: android.webkit.WebSettings getSettings()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: long getId(android.database.Cursor)> -> _SINK_
<org.apache.http.message.BasicHeader: java.lang.String getValue()> -> _SINK_
<org.apache.harmony.security.x509.Extension: byte[] access$300(org.apache.harmony.security.x509.Extension)> -> _SINK_
<com.android.common.widget.CompositeCursorAdapter: com.android.common.widget.CompositeCursorAdapter$Partition getPartition(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()> -> _SINK_
<com.android.internal.util.XmlUtils: java.util.ArrayList readListXml(java.io.InputStream)> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getBody()> -> _SINK_
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.ContentImpl: javax.sip.header.ContentDispositionHeader getContentDispositionHeader()> -> _SINK_
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)> -> _SINK_
<com.google.android.picasasync.AlbumCollectorJson: java.util.Map getEntryFieldMap()> -> _SINK_
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getChildSelector()> -> _SINK_
<android.os.Environment: java.io.File getEmulatedStorageObbSource()> -> _SINK_
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone getTimeZone()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getMaxPlayBufferCount()> -> _SINK_
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getSignerInfos()> -> _SINK_
<javax.crypto.spec.PBEKeySpec: int getKeyLength()> -> _SINK_
<android.os.Debug: int getThreadExternalAllocCount()> -> _SINK_
<android.text.util.Rfc822Token: java.lang.String getComment()> -> _SINK_
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)> -> _SINK_
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> -> _SINK_
<android.os.Looper: java.lang.Thread getThread()> -> _SINK_
<android.drm.DrmRights: byte[] getData()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: int getFallbackAppWidgetId()> -> _SINK_
<android.media.IAudioRoutesObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.NodeList getTimeChildren()> -> _SINK_
<android.os.Bundle: short getShort(java.lang.String)> -> _SINK_
<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()> -> _SINK_
<android.media.AudioManager: int getLastAudibleMasterVolume()> -> _SINK_
<com.android.launcher2.PagedView: int getPageNearestToCenterOfScreen()> -> _SINK_
<javax.sip.RequestEvent: javax.sip.Dialog getDialog()> -> _SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: java.lang.String getPublicId()> -> _SINK_
<android.widget.PopupWindow: int getAnimationStyle()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)> -> _SINK_
<android.graphics.drawable.TransitionDrawable$TransitionState: int getChangingConfigurations()> -> _SINK_
<android.text.BoringLayout: int getEllipsisCount(int)> -> _SINK_
<com.android.commands.monkey.MonkeyKeyEvent: long getEventTime()> -> _SINK_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)> -> _SINK_
<gov.nist.javax.sip.header.Require: java.lang.String getOptionTag()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByViewId(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.view.MotionEvent: long getEventTimeNano()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer getNetworkLayer()> -> _SINK_
<android.app.Activity: int getTitleColor()> -> _SINK_
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> -> _SINK_
<android.widget.ViewAnimator: boolean getAnimateFirstView()> -> _SINK_
<javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)> -> _SINK_
<android.text.style.SuggestionSpan: int getUnderlineColor()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getHeight()> -> _SINK_
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String[] getParameters()> -> _SINK_
<android.view.MotionEvent: float getHistoricalOrientation(int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumHeight()> -> _SINK_
<android.view.MotionEvent: float getHistoricalToolMinor(int)> -> _SINK_
<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry()> -> _SINK_
<android.widget.Spinner: int getDropDownWidth()> -> _SINK_
<org.apache.http.impl.EnglishReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl getListeningPoint()> -> _SINK_
<android.webkit.WebViewClassic: android.graphics.Rect sendOurVisibleRect()> -> _SINK_
<com.google.common.collect.Multisets$UnmodifiableMultiset: java.util.Set elementSet()> -> _SINK_
<android.media.AudioSystem: java.lang.String getDeviceName(int)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.Header getHeader(java.lang.String)> -> _SINK_
<com.google.common.collect.Lists$AbstractListWrapper: java.lang.Object get(int)> -> _SINK_
<android.media.audiofx.Equalizer: short getNumberOfPresets()> -> _SINK_
<android.view.MotionEvent: float getTouchMinor(int)> -> _SINK_
<java.nio.IntArrayBuffer: int get()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object)> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)> -> _SINK_
<android.media.MediaFile: java.lang.String getMimeTypeForFile(java.lang.String)> -> _SINK_
<android.app.SearchableInfo: int getHintId()> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute(int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: int getTextureId()> -> _SINK_
<android.media.videoeditor.MediaImageItem: long getDuration()> -> _SINK_
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context)> -> _SINK_
<java.lang.ThreadLocal: java.lang.Object get()> -> _SINK_
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)> -> _SINK_
<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)> -> _SINK_
<com.android.launcher2.Hotseat: int getOrderInHotseat(int,int)> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Set getCriticalExtensionOIDs()> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.util.Calendar getPropertyCalendar(java.lang.String,java.lang.String)> -> _SINK_
<com.android.phone.InCallUiState: com.android.phone.Constants$CallStatusCode getPendingCallStatusCode()> -> _SINK_
<libcore.net.http.HttpEngine: libcore.net.http.RequestHeaders getRequestHeaders()> -> _SINK_
<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: int getPortServer()> -> _SINK_
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()> -> _SINK_
<java.net.URLConnection: long getDate()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.util.ArrayList getUniqueAspectRatiosList()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Map asMap()> -> _SINK_
<java.math.BigInteger: byte[] toByteArray()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(int,java.lang.String)> -> _SINK_
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsDatabaseHelper getUploadsDatabaseHelper()> -> _SINK_
<java.text.DecimalFormat: java.lang.String getNegativePrefix()> -> _SINK_
<com.google.common.collect.ForwardingIterator: java.lang.Object delegate()> -> _SINK_
<com.android.videoeditor.OverlayType: java.lang.String getName()> -> _SINK_
<com.android.inputmethod.latin.SettingsValues: java.lang.String getInputAttributesDebugString()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getCharset()> -> _SINK_
<android.content.pm.ComponentInfo: int getIconResource()> -> _SINK_
<org.apache.http.impl.auth.BasicScheme: java.lang.String getSchemeName()> -> _SINK_
<com.android.launcher2.SearchDropTargetBar: int getTransitionInDuration()> -> _SINK_
<com.android.mms.MmsApp: com.android.mms.util.ThumbnailManager getThumbnailManager()> -> _SINK_
<android.filterpacks.imageproc.SimpleImageFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)> -> _SINK_
<dalvik.system.profiler.HprofData: int getDepth()> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<android.view.MotionEvent: float getHistoricalX(int,int)> -> _SINK_
<android.view.MotionEvent: float getHistoricalY(int,int)> -> _SINK_
<android.widget.ListView: int getDividerHeight()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()> -> _SINK_
<com.android.deskclock.timer.CountingTimerView: java.lang.String getTimeString()> -> _SINK_
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()> -> _SINK_
<com.android.videoeditor.service.ApiService$IntentProcessor: java.util.Iterator getIntentQueueIterator()> -> _SINK_
<android.filterpacks.imageproc.VignetteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.email.mail.store.ImapFolder: java.lang.String getName()> -> _SINK_
<android.app.ActivityManagerProxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SINK_
<android.text.style.SuggestionSpan: int getFlags()> -> _SINK_
<android.widget.TableRow: android.view.View getVirtualChildAt(int)> -> _SINK_
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(java.lang.String,java.lang.String,float)> -> _SINK_
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(long)> -> _SINK_
<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)> -> _SINK_
<android.app.ListFragment: long getSelectedItemId()> -> _SINK_
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> -> _SINK_
<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()> -> _SINK_
<android.media.videoeditor.TransitionAlpha: int getBlendingPercent()> -> _SINK_
<android.view.View: int getScrollBarFadeDuration()> -> _SINK_
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()> -> _SINK_
<com.google.common.collect.SortedMultisets$ElementSet: com.google.common.collect.Multiset multiset()> -> _SINK_
<android.filterpacks.performance.Throughput: float getFramesPerSecond()> -> _SINK_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> -> _SINK_
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String,java.lang.String)> -> _SINK_
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor getInstance(android.content.Context)> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: long getCreationTime()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Response createReliableProvisionalResponse(int)> -> _SINK_
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()> -> _SINK_
<java.nio.DirectByteBuffer: short getShort(int)> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)> -> _SINK_
<java.net.Authenticator: java.net.Authenticator$RequestorType getRequestorType()> -> _SINK_
<com.google.common.collect.ImmutableList: java.util.List subList(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.NameValue getNameValue(java.lang.String)> -> _SINK_
<android.media.AudioManager: int getVibrateSetting(int)> -> _SINK_
<gov.nist.javax.sip.header.Via: javax.sip.address.Hop getHop()> -> _SINK_
<android.app.ListFragment: int getSelectedItemPosition()> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat: java.lang.Object getBridge()> -> _SINK_
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> -> _SINK_
<android.util.SparseLongArray: long get(int,long)> -> _SINK_
<android.filterfw.core.FilterSurfaceView: android.filterfw.core.GLEnvironment getGLEnv()> -> _SINK_
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getY()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getX()> -> _SINK_
<android.webkit.WebSettings: boolean getNavDump()> -> _SINK_
<android.text.method.DateKeyListener: int getInputType()> -> _SINK_
<java.security.KeyPair: java.security.PrivateKey getPrivate()> -> _SINK_
<android.webkit.WebViewClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()> -> _SINK_
<android.text.StaticLayout: int getEllipsisCount(int)> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicHeight()> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer: int getDuration()> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.widget.RemoteViews getAppWidgetViews(int)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: com.android.internal.statusbar.StatusBarIcon getIcon(int)> -> _SINK_
<android.hardware.Camera$Parameters: int getPreviewFrameRate()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(int)> -> _SINK_
<com.google.common.primitives.Ints$IntArrayAsList: java.lang.Integer get(int)> -> _SINK_
<android.view.MotionEvent: float getAxisValue(int,int)> -> _SINK_
<android.view.InputDevice$MotionRange: int getSource()> -> _SINK_
<android.gesture.Gesture: java.util.ArrayList getStrokes()> -> _SINK_
<com.android.ex.chips.RecipientEntry: java.lang.String getDisplayName()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoTransitionBehaviour(int)> -> _SINK_
<android.widget.TextView: int getCompoundPaddingTop()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: int getIndex(java.lang.String,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherModel: com.android.launcher2.FolderInfo getFolderById(android.content.Context,java.util.HashMap,long)> -> _SINK_
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)> -> _SINK_
<android.media.IRingtonePlayer$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)> -> _SINK_
<com.android.server.am.ActivityRecord: long getKeyDispatchingTimeout()> -> _SINK_
<java.util.ResourceBundle$NoFallbackControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)> -> _SINK_
<android.view.MotionEvent: float getHistoricalSize(int)> -> _SINK_
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.webkit.WebView: android.webkit.WebViewProvider getWebViewProvider()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.AcceptLanguageHeader createAcceptLanguageHeader(java.util.Locale)> -> _SINK_
<android.content.CursorEntityIterator: android.content.Entity next()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetPageIndex(android.view.View)> -> _SINK_
<com.google.common.collect.TreeMultiset: java.util.Iterator entryIterator()> -> _SINK_
<gov.nist.core.LexerCore: gov.nist.core.Token match(int)> -> _SINK_
<android.content.ContentProvider: java.lang.String getWritePermission()> -> _SINK_
<android.renderscript.ProgramVertex: int getInputCount()> -> _SINK_
<android.os.IUserManager$Stub$Proxy: java.util.List getUsers(boolean)> -> _SINK_
<org.apache.harmony.security.x509.CRLDistributionPoints: byte[] getEncoded()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardCodesSet: int getCode(java.lang.String)> -> _SINK_
<java.net.DatagramPacket: int getPort()> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.content.IntentSender: int getCreatorUid()> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState: int getChangingConfigurations()> -> _SINK_
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()> -> _SINK_
<org.apache.http.message.ParserCursor: int getPos()> -> _SINK_
<java.util.AbstractList: java.util.Iterator iterator()> -> _SINK_
<java.text.NumberFormat: int getMaximumIntegerDigits()> -> _SINK_
<android.text.BoringLayout: android.text.Layout$Directions getLineDirections(int)> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributeNamespace(int)> -> _SINK_
<com.android.providers.downloads.DownloadHandler: com.android.providers.downloads.DownloadHandler getInstance()> -> _SINK_
<android.webkit.WebSettings: boolean getBlockNetworkImage()> -> _SINK_
<android.widget.NumberPicker$InputTextFilter: int getInputType()> -> _SINK_
<libcore.icu.ICU: java.util.Locale[] getAvailableDecimalFormatSymbolsLocales()> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] decrypt(byte,byte[])> -> _SINK_
<com.android.ex.chips.RecipientEntry: int getDestinationType()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)> -> _SINK_
<android.view.View: int getMeasuredHeight()> -> _SINK_
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)> -> _SINK_
<android.os.PatternMatcher: int getType()> -> _SINK_
<android.text.method.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> -> _SINK_
<com.android.launcher2.WeakReferenceThreadLocal: java.lang.Object get()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)> -> _SINK_
<java.math.MathContext: int getPrecision()> -> _SINK_
<com.android.phone.Ringer$Worker: android.os.Looper getLooper()> -> _SINK_
<android.text.Layout: int getHeight()> -> _SINK_
<java.nio.MemoryBlock: long getSize()> -> _SINK_
<java.util.Locale: java.lang.String getISO3Country()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getToTag()> -> _SINK_
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> -> _SINK_
<java.text.AttributedString$AttributedIterator: java.util.Map getAttributes()> -> _SINK_
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionState getState()> -> _SINK_
<com.android.server.IntentResolverOld: java.util.Iterator filterIterator()> -> _SINK_
<java.security.cert.CertStore: java.lang.String getDefaultType()> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: int getDefaultTargetPort()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView: com.android.internal.widget.ScrollingTabContainerView$TabView access$300(com.android.internal.widget.ScrollingTabContainerView,android.app.ActionBar$Tab,boolean)> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.String standardToString()> -> _SINK_
<android.text.method.WordIterator: int getBeginning(int)> -> _SINK_
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()> -> _SINK_
<android.os.storage.StorageVolume: java.io.File getPathFile()> -> _SINK_
<android.os.StatFs: int getFreeBlocks()> -> _SINK_
<android.webkit.WebViewClassic$PrivateHandler: android.os.Looper getUiLooper()> -> _SINK_
<gov.nist.javax.sip.address.UserInfo: int getUserType()> -> _SINK_
<android.util.SparseIntArray: int get(int)> -> _SINK_
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.From: java.lang.String getTag()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: java.lang.String toString()> -> _SINK_
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getYVelocity()> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getKeyedElementOrNull(java.lang.String,boolean)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getName()> -> _SINK_
<com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)> -> _SINK_
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()> -> _SINK_
<android.renderscript.Program$BaseProgramBuilder: int getCurrentConstantIndex()> -> _SINK_
<android.text.Layout: float getPrimaryHorizontal(int)> -> _SINK_
<android.webkit.WebViewClassic: android.graphics.Bitmap getFavicon()> -> _SINK_
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.StatusLine: java.lang.String getReasonPhrase()> -> _SINK_
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$AccountPickerLoader: android.database.Cursor loadInBackground()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle()> -> _SINK_
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$SmsRecycler getSmsRecycler()> -> _SINK_
<android.widget.ScrollBarDrawable: int getSize(boolean)> -> _SINK_
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary: android.content.Context getContext()> -> _SINK_
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.KeyguardManager getKeyguardManager()> -> _SINK_
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()> -> _SINK_
<com.google.common.collect.Lists$Partition: java.lang.Object get(int)> -> _SINK_
<gov.nist.core.NameValue: java.lang.Object getValue()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getAudioCodecType(int)> -> _SINK_
<java.lang.Throwable: java.lang.Throwable getCause()> -> _SINK_
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.inputmethod.latin.LatinIME: int getCurrentAutoCapsState()> -> _SINK_
<android.widget.AutoCompleteTextView: int getDropDownHeight()> -> _SINK_
<com.android.camera.MosaicFrameProcessor: int createMosaic(boolean)> -> _SINK_
<com.android.exchange.adapter.GalParser: com.android.exchange.provider.GalResult getGalResult()> -> _SINK_
<com.android.internal.os.ProcessStats: float getTotalCpuPercent()> -> _SINK_
<android.preference.SeekBarDialogPreference: android.widget.SeekBar getSeekBar(android.view.View)> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: android.view.View getContent()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: int getResponseCode()> -> _SINK_
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getParentNode()> -> _SINK_
<android.text.DynamicLayout: int getEllipsizedWidth()> -> _SINK_
<android.preference.PreferenceManager: android.app.Activity getActivity()> -> _SINK_
<com.android.camera.CameraActivity: long getShutterToPictureDisplayedTime()> -> _SINK_
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getPageAt(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> -> _SINK_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SINK_
<android.text.DynamicLayout: int getLineTop(int)> -> _SINK_
<android.text.BoringLayout: int getBottomPadding()> -> _SINK_
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String,float)> -> _SINK_
<com.android.internal.widget.EditableInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SINK_
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getDefaultTextEncodingName()> -> _SINK_
<android.app.ActivityThread: android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()> -> _SINK_
<gov.nist.javax.sip.header.RequestLine: java.lang.String getVersionMinor()> -> _SINK_
<android.widget.TabWidget: int getChildDrawingOrder(int,int)> -> _SINK_
<android.media.AudioTrack: int getChannelCount()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()> -> _SINK_
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()> -> _SINK_
<com.android.mms.model.SlideshowModel: int getTotalMessageSize()> -> _SINK_
<javax.sip.ResponseEvent: javax.sip.ClientTransaction getClientTransaction()> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)> -> _SINK_
<android.media.videoeditor.MediaVideoItem: long getDuration()> -> _SINK_
<android.speech.tts.PlaybackQueueItem: android.speech.tts.TextToSpeechService$UtteranceProgressDispatcher getDispatcher()> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: int getSize()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: com.android.emailcommon.mail.Body getBody()> -> _SINK_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> -> _SINK_
<android.app.ContextImpl: java.lang.String getPackageName()> -> _SINK_
<com.android.launcher2.FocusOnlyTabWidget: int getChildTabIndex(android.view.View)> -> _SINK_
<java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)> -> _SINK_
<android.view.MotionEvent: float getXPrecision()> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getChildOffset(int)> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheDirectory()> -> _SINK_
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List subList(int,int)> -> _SINK_
<com.android.mms.MmsConfig: int getRecipientLimit()> -> _SINK_
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment[] restoreAttachmentsWithMessageId(android.content.Context,long)> -> _SINK_
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: int getSaveInstanceStateIndex()> -> _SINK_
<android.preference.Preference: android.os.Bundle getExtras()> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])> -> _SINK_
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()> -> _SINK_
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)> -> _SINK_
<android.appwidget.AppWidgetHostView: int getAppWidgetId()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getOwnerType()> -> _SINK_
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$100(com.android.mms.ui.ManageSimMessages)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getOutlineAlphaForPage(int,int,boolean)> -> _SINK_
<org.json.JSONArray: java.lang.String getString(int)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: boolean[] getSubjectUniqueID()> -> _SINK_
<android.os.StatFs: int getAvailableBlocks()> -> _SINK_
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()> -> _SINK_
<android.content.ContentProvider$Transport: java.lang.String getProviderName()> -> _SINK_
<java.util.IllegalFormatConversionException: char getConversion()> -> _SINK_
<android.content.Intent: android.content.ComponentName getComponent()> -> _SINK_
<android.widget.TextView: int getCompoundDrawablePadding()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayVariant()> -> _SINK_
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getColumnPos(int)> -> _SINK_
<android.widget.NumberPicker: boolean getWrapSelectorWheel()> -> _SINK_
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype createAdditionalSubtype(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: int indexOf(java.lang.Object)> -> _SINK_
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)> -> _SINK_
<com.android.common.widget.CompositeCursorAdapter: int getCount()> -> _SINK_
<android.widget.EditText: android.text.Editable getText()> -> _SINK_
<android.widget.ArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getBufferPercentage()> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ErrorInfoList getErrorInfoHeaders()> -> _SINK_
<com.android.deskclock.timer.TimerObj: long getTimesupTime()> -> _SINK_
<com.android.uiautomator.core.UiSelector: int getInt(int)> -> _SINK_
<java.net.ServerSocket: java.net.SocketImpl getImpl$()> -> _SINK_
<java.io.File: long getTotalSpace()> -> _SINK_
<com.google.common.collect.BstNode: java.lang.Object getKey()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getGrParam()> -> _SINK_
<android.text.method.DateTimeKeyListener: int getInputType()> -> _SINK_
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERPrintableString: byte[] getOctets()> -> _SINK_
<com.android.server.sip.SipSessionGroup: android.net.sip.SipProfile getLocalProfile()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: long getExpirationTime()> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: int getHorizontalFadingEdgeLength()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: long getSourceNodeId()> -> _SINK_
<java.util.ResourceBundle$Control: java.util.ResourceBundle$Control getNoFallbackControl(java.util.List)> -> _SINK_
<android.widget.TextView: java.util.Locale getTextLocale()> -> _SINK_
<gov.nist.javax.sip.header.AllowEventsList: java.util.ListIterator getMethods()> -> _SINK_
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerCount(android.view.MotionEvent)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()> -> _SINK_
<java.util.Formatter$FormatToken: int getArgIndex()> -> _SINK_
<libcore.io.ForwardingOs: java.net.InetAddress ioctlInetAddress(java.io.FileDescriptor,int,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)> -> _SINK_
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)> -> _SINK_
<android.app.ActivityManagerProxy: int getPackageScreenCompatMode(java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: int getNumGyroSamples()> -> _SINK_
<android.os.UserManager: int getUserHandle()> -> _SINK_
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)> -> _SINK_
<java.util.Locale: java.lang.String getDisplayLanguage()> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getStatusCode()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Enumerated: org.apache.harmony.security.asn1.ASN1Enumerated getInstance()> -> _SINK_
<android.view.KeyEvent: int getScanCode()> -> _SINK_
<android.text.Layout: int getWidth()> -> _SINK_
<java.io.File: java.lang.String getName()> -> _SINK_
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()> -> _SINK_
<org.json.JSONObject: java.lang.Object get(java.lang.String)> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()> -> _SINK_
<com.coremedia.iso.boxes.HandlerBox: java.lang.String getHandlerType()> -> _SINK_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> -> _SINK_
<java.io.EmulatedFieldsForLoading: java.io.ObjectStreamClass getObjectStreamClass()> -> _SINK_
<java.net.Socks4Message: byte[] getBytes()> -> _SINK_
<android.content.pm.LabeledIntent: int getLabelResource()> -> _SINK_
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: long getItemId(int)> -> _SINK_
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)> -> _SINK_
<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()> -> _SINK_
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: int getLeftPaneId()> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: java.lang.String getRules()> -> _SINK_
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetX()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetY()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicHeight()> -> _SINK_
<android.view.KeyEvent: char getMatch(char[])> -> _SINK_
<java.nio.FloatToByteBufferAdapter: float get(int)> -> _SINK_
<android.media.videoeditor.MediaItem: java.lang.String getId()> -> _SINK_
<android.widget.DatePicker: long getMinDate()> -> _SINK_
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.emailcommon.internet.MimeHeader: java.lang.String[] getHeader(java.lang.String)> -> _SINK_
<com.google.common.collect.Ordering: com.google.common.collect.Ordering nullsLast()> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: android.view.animation.Transformation getEnterTransformation()> -> _SINK_
<org.apache.http.client.methods.HttpRequestBase: java.lang.Object clone()> -> _SINK_
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int getRetryCount()> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: java.lang.String getBackgroundColor()> -> _SINK_
<java.nio.charset.CharsetEncoder: byte[] replacement()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointerDownCount()> -> _SINK_
<com.android.phone.InCallUiState: com.android.phone.InCallUiState$ProgressIndicationType getProgressIndication()> -> _SINK_
<com.google.common.collect.AbstractSortedSetMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<java.io.InvalidClassException: java.lang.String getMessage()> -> _SINK_
<java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)> -> _SINK_
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> -> _SINK_
<com.android.mms.transaction.SendTransaction: int getType()> -> _SINK_
<android.view.GLES20DisplayList: int getSize()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERVisibleString: byte[] getOctets()> -> _SINK_
<com.android.phone.CallLogAsync: android.os.AsyncTask getLastOutgoingCall(com.android.phone.CallLogAsync$GetLastOutgoingCallArgs)> -> _SINK_
<android.view.ViewRootImpl: android.view.AccessibilityInteractionController getAccessibilityInteractionController()> -> _SINK_
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getBegin()> -> _SINK_
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()> -> _SINK_
<com.android.mms.transaction.Transaction: int getServiceId()> -> _SINK_
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> -> _SINK_
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker$TimeRecorder: long getLastLetterTypingTime()> -> _SINK_
<com.android.phone.CallNotifier: boolean getIsCdmaRedialCall()> -> _SINK_
<android.widget.RelativeLayout: int getBaseline()> -> _SINK_
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<gov.nist.core.GenericObject: java.lang.Class getClassFromName(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranchId()> -> _SINK_
<javax.obex.HeaderSet: int[] getHeaderList()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: int getVersion()> -> _SINK_
<android.os.ParcelFileDescriptor: int getFd()> -> _SINK_
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getClipSettings()> -> _SINK_
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> -> _SINK_
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()> -> _SINK_
<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()> -> _SINK_
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetStringParser parser()> -> _SINK_
<android.webkit.WebBackForwardListClassic: int getCurrentIndex()> -> _SINK_
<java.net.URLConnection: int getContentLength()> -> _SINK_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(java.lang.String)> -> _SINK_
<java.lang.String: byte[] getBytes(java.lang.String)> -> _SINK_
<android.widget.ExpandableListConnector: int getCount()> -> _SINK_
<android.speech.tts.TextToSpeech: java.util.List getEngines()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite: android.graphics.PointF getPosition()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: javax.net.ssl.SSLSession getSession(java.lang.String,int)> -> _SINK_
<com.android.camera.ComboPreferences: java.lang.String getString(java.lang.String,java.lang.String)> -> _SINK_
<android.text.style.URLSpan: int getSpanTypeId()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserAtHost()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.View getActionView()> -> _SINK_
<android.content.ClipData: android.graphics.Bitmap getIcon()> -> _SINK_
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> -> _SINK_
<org.apache.harmony.security.pkcs7.ContentInfo: byte[] getEncoded()> -> _SINK_
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> -> _SINK_
<android.view.KeyEvent: int getKeyboardDevice()> -> _SINK_
<android.provider.MediaStore$Images$Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.view.MotionEvent: float getToolMajor()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int[],byte[])> -> _SINK_
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$EntryFactory: com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> -> _SINK_
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()> -> _SINK_
<android.text.BoringLayout: int getHeight()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieAudioTrack getAudioTrack(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)> -> _SINK_
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getStale()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryEndTime()> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<java.security.MessageDigest: byte[] digest(byte[])> -> _SINK_
<android.filterfw.core.KeyValueMap: float getFloat(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: android.graphics.Bitmap getTaskTopThumbnail(int)> -> _SINK_
<android.app.ContextImpl: java.io.File getExternalFilesDir(java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.ProgressBar: int getHeight()> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSystemAudioRoute()> -> _SINK_
<android.view.View: int getHorizontalFadingEdgeLength()> -> _SINK_
<android.graphics.Canvas: int getDensity()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double[] getGLMatrix()> -> _SINK_
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()> -> _SINK_
<android.hardware.SensorManager: java.util.List getSensorList(int)> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getRemoteAddress()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getViaHostPort()> -> _SINK_
<com.android.videoeditor.service.MovieTransition: java.lang.Class getTypeClass()> -> _SINK_
<android.media.videoeditor.Transition: int getBehavior()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getHead()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getName()> -> _SINK_
<gov.nist.core.StringTokenizer: java.lang.String getNextToken(char)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> -> _SINK_
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ActivityInfo)> -> _SINK_
<android.util.Property: java.lang.String getName()> -> _SINK_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> -> _SINK_
<dalvik.system.profiler.PortableThreadSampler: java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: int getDepth()> -> _SINK_
<android.os.ISchedulingPolicyService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERNumericString: java.lang.String getString()> -> _SINK_
<org.apache.http.client.methods.HttpPut: java.lang.String getMethod()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: long getTimelineDuration()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] wrap()> -> _SINK_
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()> -> _SINK_
<gov.nist.javax.sip.header.Supported: java.lang.String getOptionTag()> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicHeight()> -> _SINK_
<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.view.GLES20DisplayList: int getNativeDisplayList()> -> _SINK_
<java.io.EmulatedFieldsForLoading: short get(java.lang.String,short)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: int getItemId()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()> -> _SINK_
<android.os.CommonTimeUtils: java.lang.String transactGetString(int,java.lang.String)> -> _SINK_
<com.android.launcher2.CellLayout: float getChildrenScale()> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.View getCustomView()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()> -> _SINK_
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: byte getFc()> -> _SINK_
<android.preference.RingtonePreference: int getRingtoneType()> -> _SINK_
<android.widget.TextView: int getFadeTop(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerProtocol()> -> _SINK_
<android.emoji.EmojiFactory: int getVendorSpecificSjisFromAndroidPua(int)> -> _SINK_
<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()> -> _SINK_
<android.media.videoeditor.AudioTrack: java.lang.String getFilename()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> -> _SINK_
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentDirectory(android.content.Context,long)> -> _SINK_
<java.lang.Throwable: java.lang.String getLocalizedMessage()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedCollection: java.lang.Object getKey()> -> _SINK_
<com.android.inputmethod.latin.ResizableIntArray: int get(int)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getX(int,int)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)> -> _SINK_
<android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()> -> _SINK_
<com.android.mms.dom.ElementImpl: short getNodeType()> -> _SINK_
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> -> _SINK_
<java.net.HttpRetryException: java.lang.String getLocation()> -> _SINK_
<libcore.net.http.HttpEngine: java.lang.String getOriginAddress(java.net.URL)> -> _SINK_
<android.widget.TextView: android.text.Editable getEditableText()> -> _SINK_
<android.view.SurfaceView$4: android.view.Surface getSurface()> -> _SINK_
<android.view.View: int getSolidColor()> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.webkit.WebViewClassic: int getBlockLeftEdge(int,int,float)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: float getVolume()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()> -> _SINK_
<android.text.Layout: int getParagraphLeft(int)> -> _SINK_
<com.android.camera.Util: android.hardware.Camera$Size getOptimalVideoSnapshotPictureSize(java.util.List,double)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()> -> _SINK_
<android.webkit.WebBackForwardList: int getCurrentIndex()> -> _SINK_
<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.BaseAdapter: int getViewTypeCount()> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: float getRightFadingEdgeStrength()> -> _SINK_
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> -> _SINK_
<com.android.server.NativeDaemonEvent: java.lang.String getField(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<android.view.KeyEvent: int getModifiers()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()> -> _SINK_
<android.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable$Orientation getOrientation()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.Hotseat getHotseat()> -> _SINK_
<java.security.Security$SecurityDoor: java.util.List getAliases(java.security.Provider$Service)> -> _SINK_
<android.speech.tts.SynthesisRequest: int getSpeechRate()> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getContentType()> -> _SINK_
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: java.lang.Object getKey()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Integer getIndirectReference()> -> _SINK_
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> -> _SINK_
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualPhotoUploadTaskProvider()> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getListeningPoints()> -> _SINK_
<com.google.common.io.Files$1: java.io.FileInputStream getInput()> -> _SINK_
<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: org.apache.harmony.security.x509.Extensions getCrlEntryExtensions()> -> _SINK_
<com.google.common.collect.MapMaker: int getInitialCapacity()> -> _SINK_
<java.util.concurrent.CountDownLatch: long getCount()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)> -> _SINK_
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedCollection: java.util.Collection getDelegate()> -> _SINK_
<android.preference.PreferenceManager: long getNextId()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getDomain()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaMode()> -> _SINK_
<android.text.style.BackgroundColorSpan: int getBackgroundColor()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFirstLine()> -> _SINK_
<java.nio.DirectByteBuffer: char getChar(int)> -> _SINK_
<android.widget.FastScroller$ScrollFade: int getAlpha()> -> _SINK_
<com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> -> _SINK_
<com.android.mms.transaction.MessagingNotification: long getSmsThreadId(android.content.Context,android.net.Uri)> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)> -> _SINK_
<org.apache.commons.logging.LogFactory$2: java.lang.Object run()> -> _SINK_
<android.webkit.ZoomControlExternal: android.webkit.ZoomControlExternal$ExtendedZoomControls getControls()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)> -> _SINK_
<android.widget.ViewAnimator: int getDisplayedChild()> -> _SINK_
<libcore.net.http.ResponseHeaders: java.util.Date getLastModified()> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: int getTabHeight()> -> _SINK_
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()> -> _SINK_
<org.apache.http.message.BasicHttpResponse: java.util.Locale getLocale()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox: long getContentSize()> -> _SINK_
<android.text.Layout: int getLineAscent(int)> -> _SINK_
<android.widget.CursorTreeAdapter: long getChildId(int,int)> -> _SINK_
<java.text.MessageFormat: java.text.Format[] getFormats()> -> _SINK_
<android.webkit.WebViewClassic: int getProgress()> -> _SINK_
<java.lang.ref.FinalizerReference: java.lang.Object get()> -> _SINK_
<com.android.email.activity.setup.AccountServerBaseFragment: android.os.Bundle getSettingsModeArgs()> -> _SINK_
<android.text.BoringLayout: int getEllipsizedWidth()> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.view.IApplicationToken$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request)> -> _SINK_
<com.android.deskclock.Utils: int getGrayColorId()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: float getImuOrientationDegrees()> -> _SINK_
<com.adobe.xmp.XMPException: int getErrorCode()> -> _SINK_
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoCodecs()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> -> _SINK_
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: int getUserHandle(int)> -> _SINK_
<android.view.MotionEvent: int getActionMasked()> -> _SINK_
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: java.lang.String getDescriptionForKey(android.content.Context,com.android.inputmethod.keyboard.Keyboard,com.android.inputmethod.keyboard.Key,boolean)> -> _SINK_
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)> -> _SINK_
<java.text.DecimalFormatSymbols: char getMinusSign()> -> _SINK_
<android.content.ContextWrapper: java.io.File getSharedPrefsFile(java.lang.String)> -> _SINK_
<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.Key: int getAltCode()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int)> -> _SINK_
<android.app.LoadedApk: android.content.res.Resources getResources(android.app.ActivityThread)> -> _SINK_
<android.view.Window: android.content.Context getContext()> -> _SINK_
<com.google.common.collect.ForwardingMapEntry: java.lang.Object getKey()> -> _SINK_
<java.util.EnumSet: java.lang.Object writeReplace()> -> _SINK_
<android.view.View: int getPaddingEnd()> -> _SINK_
<android.app.Dialog: int getVolumeControlStream()> -> _SINK_
<android.media.videoeditor.TransitionSliding: int getDirection()> -> _SINK_
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()> -> _SINK_
<com.android.systemui.ExpandHelper$ViewScaler: int getNaturalHeight(int)> -> _SINK_
<org.apache.james.mime4j.RootInputStream: int getLineNumber()> -> _SINK_
<org.apache.harmony.security.x501.Name$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<com.android.camera.FocusOverlayManager: java.util.List getMeteringAreas()> -> _SINK_
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutParameters getLayoutParameters()> -> _SINK_
<android.view.IWindow$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.filterfw.core.FilterSurfaceView: int getSurfaceId()> -> _SINK_
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,java.util.Map)> -> _SINK_
<android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo getNextPoolable()> -> _SINK_
<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<android.view.PointerIcon: android.view.PointerIcon load(android.content.Context)> -> _SINK_
<android.view.animation.Animation: int getRepeatMode()> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createCancel()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createAck(long)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getDataValueDescriptor()> -> _SINK_
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)> -> _SINK_
<com.android.emailcommon.internet.MimeMultipart: java.io.InputStream getInputStream()> -> _SINK_
<com.android.email.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: long getAppDuration()> -> _SINK_
<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList createAsList()> -> _SINK_
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()> -> _SINK_
<android.webkit.WebView: int getProgress()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> -> _SINK_
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> -> _SINK_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getSystemId()> -> _SINK_
<com.android.internal.widget.LockPatternView$Cell: int getRow()> -> _SINK_
<gov.nist.javax.sip.header.Accept: gov.nist.javax.sip.header.MediaRange getMediaRange()> -> _SINK_
<com.android.internal.app.ActionBarImpl: android.view.View getCustomView()> -> _SINK_
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildContentView(android.view.View)> -> _SINK_
<android.mtp.MtpStorage: int getStorageId()> -> _SINK_
<android.preference.PreferenceGroupAdapter: int getItemViewType(int)> -> _SINK_
<java.net.PlainDatagramSocketImpl: byte getTTL()> -> _SINK_
<android.widget.AbsListView: android.view.View getSelectedView()> -> _SINK_
<android.text.style.ScaleXSpan: float getScaleX()> -> _SINK_
<android.filterfw.core.SimpleFrame: java.lang.Object getObjectValue()> -> _SINK_
<android.content.ComponentName: java.lang.String getShortClassName()> -> _SINK_
<android.hardware.usb.UsbInterface: int getEndpointCount()> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getIterableTextForAccessibility()> -> _SINK_
<android.view.ActionMode: java.lang.Object getTag()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()> -> _SINK_
<android.view.MotionEvent: float getHistoricalToolMajor(int)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout access$1900(android.widget.RemoteViewsAdapter$RemoteViewsMetaData,int,android.view.View,android.view.ViewGroup,java.lang.Object,android.view.LayoutInflater,android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getItemAtIndex(int)> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: java.lang.String getSrc()> -> _SINK_
<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()> -> _SINK_
<android.mtp.MtpStorage: long getReserveSpace()> -> _SINK_
<android.util.XmlPullAttributes: java.lang.String getAttributeName(int)> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.Workspace getWorkspace()> -> _SINK_
<org.apache.harmony.security.x509.GeneralName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.webkit.DateSorter: long getBoundary(int)> -> _SINK_
<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)> -> _SINK_
<android.view.TextureView: int getLayerType()> -> _SINK_
<java.io.File: java.lang.String getPath()> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayHeight(int,int,int)> -> _SINK_
<android.text.style.UnderlineSpan: int getSpanTypeId()> -> _SINK_
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getSubjectPublicKey()> -> _SINK_
<android.app.SearchableInfo: int getIconId()> -> _SINK_
<java.util.Currency: java.util.Currency getInstance(java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] access$000(org.apache.harmony.security.x509.AuthorityKeyIdentifier)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> -> _SINK_
<android.view.MotionEvent: float getHistoricalOrientation(int,int)> -> _SINK_
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevName()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: android.content.ComponentName getComponentName()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebChromeClient getWebChromeClient()> -> _SINK_
<android.view.PointerIcon: int getStyle()> -> _SINK_
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageOrderManager getMessageOrderManager()> -> _SINK_
<android.animation.Keyframe: float getFraction()> -> _SINK_
<javax.obex.ServerRequestHandler: long getConnectionId()> -> _SINK_
<android.text.style.AlignmentSpan$Standard: int getSpanTypeId()> -> _SINK_
<com.google.common.io.CharStreams$1: java.io.StringReader getInput()> -> _SINK_
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> -> _SINK_
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()> -> _SINK_
<android.filterfw.core.FrameFormat: int getValuesPerSample()> -> _SINK_
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> -> _SINK_
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> -> _SINK_
<android.app.Activity: java.util.HashMap getLastNonConfigurationChildInstances()> -> _SINK_
<java.sql.Date: int getHours()> -> _SINK_
<com.android.server.power.DisplayPowerState: int getScreenBrightness()> -> _SINK_
<com.android.internal.os.PowerProfile: double getBatteryCapacity()> -> _SINK_
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)> -> _SINK_
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.RequestLine getRequestLine()> -> _SINK_
<libcore.net.url.FtpURLConnection: java.lang.String getContentType()> -> _SINK_
<android.widget.TextView: int getMaxEms()> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: int getTagOffset()> -> _SINK_
<java.util.MapEntry: java.lang.Object getValue()> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: int getWidthHint()> -> _SINK_
<android.webkit.PluginManager: java.lang.String[] getPluginDirectories()> -> _SINK_
<java.util.zip.Deflater: int getAdler()> -> _SINK_
<com.android.inputmethod.compat.CompatUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SINK_
<android.app.ActivityOptions: android.graphics.Bitmap getThumbnail()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: int lastIndexOf(java.lang.Object)> -> _SINK_
<com.google.common.io.Resources$1: java.io.InputStream getInput()> -> _SINK_
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> -> _SINK_
<android.text.SpannableStringInternal: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SINK_
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)> -> _SINK_
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object get(java.lang.Object)> -> _SINK_
<java.net.InetSocketAddress: java.net.InetAddress getAddress()> -> _SINK_
<com.coremedia.iso.boxes.SampleSizeBox: long getSampleCount()> -> _SINK_
<android.content.ContextWrapper: int getThemeResId()> -> _SINK_
<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<com.google.common.io.CharStreams$3: java.io.OutputStreamWriter getOutput()> -> _SINK_
<com.google.common.collect.Multimaps$UnmodifiableSetMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.Authority: gov.nist.core.HostPort getHostPort()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<android.media.AudioRecord: int getNotificationMarkerPosition()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,javax.sip.header.ContentTypeHeader,byte[])> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getClassAttribute()> -> _SINK_
<gov.nist.core.Host: java.lang.String getAddress()> -> _SINK_
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()> -> _SINK_
<com.google.common.collect.AbstractSetMultimap: java.util.Collection createCollection()> -> _SINK_
<java.net.ResponseCache: java.net.ResponseCache getDefault()> -> _SINK_
<javax.xml.validation.Validator: boolean getFeature(java.lang.String)> -> _SINK_
<java.lang.SecurityManager: boolean getInCheck()> -> _SINK_
<java.nio.FileChannelImpl: java.io.FileDescriptor getFD()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getServerKeyType()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.content.Intent configurationIntent()> -> _SINK_
<android.media.RingtoneManager: boolean getIncludeDrm()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> -> _SINK_
<com.coremedia.iso.boxes.SyncSampleBox: long getContentSize()> -> _SINK_
<android.util.NtpTrustedTime: long getCacheAge()> -> _SINK_
<android.filterfw.core.InputPort: android.filterfw.core.Filter getSourceFilter()> -> _SINK_
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)> -> _SINK_
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)> -> _SINK_
<com.android.email.activity.MailboxFinder: com.android.email.Controller$Result getControllerResultsForTest()> -> _SINK_
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: int getVerticalFadingEdgeLength()> -> _SINK_
<com.android.mms.transaction.TransactionSettings: int getProxyPort()> -> _SINK_
<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()> -> _SINK_
<gov.nist.javax.sip.header.Warning: int getCode()> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$TabListener getCallback()> -> _SINK_
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type[] getActualTypeArguments()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.inputmethod.keyboard.KeyDetector: int getTouchX(int)> -> _SINK_
<com.android.inputmethod.keyboard.KeyDetector: int getTouchY(int)> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.lang.Object delegate()> -> _SINK_
<junit.runner.BaseTestRunner: java.lang.String processArguments(java.lang.String[])> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()> -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> -> _SINK_
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()> -> _SINK_
<com.android.mms.model.ContentRestrictionFactory: com.android.mms.model.ContentRestriction getContentRestriction()> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: long[] getMatrix()> -> _SINK_
<android.os.ICancellationSignal$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.Scroller: int getStartY()> -> _SINK_
<android.widget.Scroller: int getStartX()> -> _SINK_
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()> -> _SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: int getExpires()> -> _SINK_
<java.nio.HeapByteBuffer: short getShort(int)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.String getName()> -> _SINK_
<android.text.Layout: int getLineForOffset(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void getVisibleWindowsForDisplay(int,java.util.List)> -> _SINK_
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getAspectRatio()> -> _SINK_
<android.widget.TextView: android.content.res.ColorStateList getTextColors()> -> _SINK_
<android.filterfw.core.Frame: int getBindingType()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.NistSipMessageFactoryImpl: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: java.lang.String getAuthority()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.header.Contact getMyContactHeader()> -> _SINK_
<javax.security.cert.X509Certificate$1: byte[] getEncoded()> -> _SINK_
<junit.framework.TestSuite: java.lang.String getName()> -> _SINK_
<com.android.phone.PhoneGlobals: android.app.PendingIntent getSendSmsFromNotificationPendingIntent(android.content.Context,java.lang.String)> -> _SINK_
<libcore.net.http.HttpConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<android.preference.TwoStatePreference: boolean getDisableDependentsState()> -> _SINK_
<com.android.camera.ui.PieItem: int getIntrinsicHeight()> -> _SINK_
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.webkit.WebViewCore: android.webkit.WebViewClassic getWebViewClassic()> -> _SINK_
<android.preference.Preference: java.lang.StringBuilder getFilterableStringBuilder()> -> _SINK_
<android.media.TimedText: android.graphics.Rect getBounds()> -> _SINK_
<javax.crypto.Cipher: java.security.Provider getProvider()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: java.lang.Object writeReplace()> -> _SINK_
<android.view.View: float getTranslationY()> -> _SINK_
<android.view.View: float getTranslationX()> -> _SINK_
<com.android.mms.data.RecipientIdCache: java.util.List getAddresses(java.lang.String)> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranch()> -> _SINK_
<com.android.systemui.screenshot.GlobalScreenshot$5: float getInterpolation(float)> -> _SINK_
<com.android.systemui.screenshot.GlobalScreenshot$4: float getInterpolation(float)> -> _SINK_
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: com.android.inputmethod.latin.LogEntries$DeviceInfoEntry getInstance(long,android.content.Context)> -> _SINK_
<android.content.ClipDescription: java.lang.CharSequence getLabel()> -> _SINK_
<android.app.PendingIntent: java.lang.String getTargetPackage()> -> _SINK_
<com.android.launcher2.LauncherAppWidgetHostView: int getDescendantFocusability()> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: java.lang.String getPublicId()> -> _SINK_
<org.apache.harmony.security.x509.KeyUsage: byte[] getEncoded()> -> _SINK_
<android.widget.GridView: int getNumColumns()> -> _SINK_
<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> -> _SINK_
<android.text.Layout$SpannedEllipsizer: int getSpanStart(java.lang.Object)> -> _SINK_
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()> -> _SINK_
<android.net.Credentials: int getUid()> -> _SINK_
<libcore.net.http.HttpEngine$1: java.util.Map getHeaders()> -> _SINK_
<android.app.ActivityManagerProxy: android.content.res.Configuration getConfiguration()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.Object getProperty(java.lang.String)> -> _SINK_
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.graphics.drawable.Drawable getIcon()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.usb.UsbDevice: int getDeviceSubclass()> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getLocalIp()> -> _SINK_
<com.android.ex.chips.RecipientEntry: long getContactId()> -> _SINK_
<libcore.icu.CollationElementIteratorICU: int getMaxExpansion(int)> -> _SINK_
<android.graphics.Canvas: int getMaximumBitmapHeight()> -> _SINK_
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getSubject()> -> _SINK_
<android.webkit.PluginManager: android.webkit.PluginManager getInstance(android.content.Context)> -> _SINK_
<javax.obex.ClientOperation: javax.obex.HeaderSet getReceivedHeader()> -> _SINK_
<com.android.phone.EditPhoneNumberPreference: java.lang.String getRawPhoneNumber()> -> _SINK_
<android.text.PackedIntVector: int getValue(int,int)> -> _SINK_
<android.os.Debug: int getGlobalExternalAllocSize()> -> _SINK_
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object getValue()> -> _SINK_
<android.content.ClipData$Item: java.lang.String getHtmlText()> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat: float getXVelocity(android.view.VelocityTracker,int)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()> -> _SINK_
<com.android.providers.downloads.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.SAXException: java.lang.Exception getException()> -> _SINK_
<org.xml.sax.InputSource: java.io.InputStream getByteStream()> -> _SINK_
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.apache.http.message.BufferedHeader: java.lang.String getValue()> -> _SINK_
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)> -> _SINK_
<dalvik.system.profiler.HprofData: int getFlags()> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getDefaultSampleDuration()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getAlpha()> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getEndIndex()> -> _SINK_
<com.google.common.base.Optional$Absent: java.lang.Object get()> -> _SINK_
<java.nio.DirectByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> -> _SINK_
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> -> _SINK_
<java.util.IllegalFormatWidthException: int getWidth()> -> _SINK_
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)> -> _SINK_
<android.filterpacks.imageproc.FillLightFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<java.util.logging.LogRecord: java.lang.Throwable getThrown()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()> -> _SINK_
<android.view.View: int getOverScrollMode()> -> _SINK_
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> -> _SINK_
<org.apache.http.entity.InputStreamEntity: long getContentLength()> -> _SINK_
<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: gov.nist.javax.sip.address.Authority getAuthority()> -> _SINK_
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)> -> _SINK_
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()> -> _SINK_
<com.android.launcher2.CellLayout: int getHeightGap()> -> _SINK_
<android.widget.ListPopupWindow: int getHorizontalOffset()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: double getHeadingDegrees()> -> _SINK_
<android.graphics.drawable.ColorDrawable: int getOpacity()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getParameter(java.lang.String)> -> _SINK_
<org.apache.harmony.security.provider.crypto.RandomBitsSupplier: byte[] getRandomBits(int)> -> _SINK_
<com.android.mms.data.Conversation: java.lang.String getSnippet()> -> _SINK_
<android.renderscript.Script$FieldBase: android.renderscript.Allocation getAllocation()> -> _SINK_
<com.android.launcher2.PagedView: int getNextPage()> -> _SINK_
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> -> _SINK_
<libcore.net.http.RequestHeaders: int getMaxAgeSeconds()> -> _SINK_
<android.widget.NumberPicker: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)> -> _SINK_
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int,float)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeNamespace(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: int getOpacity()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: long getExpirationTime()> -> _SINK_
<android.content.res.TypedArray: java.lang.CharSequence getText(int)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> -> _SINK_
<android.view.View$DragShadowBuilder: android.view.View getView()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getDefaultUserAgentForLocale(android.content.Context,java.util.Locale)> -> _SINK_
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()> -> _SINK_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getUIAccountId()> -> _SINK_
<android.support.v4.view.PagerAdapter: float getPageWidth(int)> -> _SINK_
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()> -> _SINK_
<com.android.email.FolderProperties: int getMessageCount(android.database.Cursor)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndex()> -> _SINK_
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: int getFrequency()> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.lang.String getFirstHeader(java.lang.String)> -> _SINK_
<android.widget.AbsListView: float getBottomFadingEdgeStrength()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object)> -> _SINK_
<android.view.Window: android.view.Window getContainer()> -> _SINK_
<libcore.util.ZoneInfo: int getRawOffset()> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SINK_
<java.security.SecureRandom: java.lang.String getAlgorithm()> -> _SINK_
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)> -> _SINK_
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getAfterMediaItem()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()> -> _SINK_
<android.widget.LinearLayout: int getNextLocationOffset(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByText(int,int,long,java.lang.String)> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: java.text.CollationKey getCollationKey(java.lang.String)> -> _SINK_
<com.android.internal.os.RuntimeInit$1: java.lang.String getId()> -> _SINK_
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)> -> _SINK_
<java.util.Currency: int getDefaultFractionDigits()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getCaption()> -> _SINK_
<android.filterfw.core.FrameFormat: int getDimension(int)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> -> _SINK_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()> -> _SINK_
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getSubtitle()> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)> -> _SINK_
<android.renderscript.BaseObj: java.lang.String getName()> -> _SINK_
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)> -> _SINK_
<com.android.email.mail.Sender: com.android.email.mail.Sender getInstance(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ExpiresHeader getExpires()> -> _SINK_
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getBasePort()> -> _SINK_
<java.lang.ThreadGroup: int getMaxPriority()> -> _SINK_
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: java.util.List getSchemeNames()> -> _SINK_
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SINK_
<com.android.camera.ui.OverlayRenderer: int getHeight()> -> _SINK_
<com.coremedia.iso.boxes.FileTypeBox: long getContentSize()> -> _SINK_
<java.net.URI: java.lang.String getRawQuery()> -> _SINK_
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<com.android.camera.ComboPreferences: float getFloat(java.lang.String,float)> -> _SINK_
<android.media.audiofx.Equalizer: int getCenterFreq(short)> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ExtensionHeader createMinSEHeader(int)> -> _SINK_
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin)> -> _SINK_
<com.android.launcher2.DragLayer: android.view.View getAnimatedView()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> -> _SINK_
<com.android.inputmethod.keyboard.Key: java.lang.String getOutputText()> -> _SINK_
<java.util.EventListenerProxy: java.util.EventListener getListener()> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Shader: int getAttribute(int,java.lang.String)> -> _SINK_
<android.widget.AbsListView: int getSolidColor()> -> _SINK_
<com.android.mms.MmsConfig: int getDefaultMMSMessagesPerThread()> -> _SINK_
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleY()> -> _SINK_
<android.widget.DatePicker: int getYear()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleX()> -> _SINK_
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()> -> _SINK_
<com.android.launcher2.Workspace$ZInterpolator: float getInterpolation(float)> -> _SINK_
<android.hardware.input.InputManager: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> -> _SINK_
<org.apache.harmony.security.asn1.BerInputStream: int getLength()> -> _SINK_
<java.util.Collections$EmptyList: java.lang.Object get(int)> -> _SINK_
<javax.obex.ApplicationParameter: byte[] getAPPparam()> -> _SINK_
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: long getUserActivityTimeout()> -> _SINK_
<android.widget.GridView: int getGravity()> -> _SINK_
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)> -> _SINK_
<com.android.email.Preferences: java.lang.String getDeviceUID()> -> _SINK_
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()> -> _SINK_
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginColumn()> -> _SINK_
<com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()> -> _SINK_
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)> -> _SINK_
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()> -> _SINK_
<org.apache.http.message.BufferedHeader: java.lang.String getName()> -> _SINK_
<com.android.videoeditor.service.MovieTheme: java.lang.String getId()> -> _SINK_
<org.apache.harmony.security.x509.Extensions$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.net.InetAddress getPeerInetAddress()> -> _SINK_
<android.webkit.HTML5VideoView: int getCurrentState()> -> _SINK_
<java.util.logging.Handler: java.util.logging.Filter getFilter()> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: java.lang.String getContentType()> -> _SINK_
<android.os.Messenger: android.os.IBinder getBinder()> -> _SINK_
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> -> _SINK_
<android.renderscript.RenderScriptGL: int getWidth()> -> _SINK_
<gov.nist.javax.sip.header.StatusLine: java.lang.String getSipVersion()> -> _SINK_
<java.nio.HeapByteBuffer: int getInt()> -> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()> -> _SINK_
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.media.AudioManager: int getMasterVolume()> -> _SINK_
<android.content.IIntentSender$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.ex.chips.RecipientEntry: java.lang.String getDestination()> -> _SINK_
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype[] createAdditionalSubtypesArray(java.lang.String)> -> _SINK_
<com.google.common.collect.Lists$StringAsImmutableList$1: java.lang.Character get(int)> -> _SINK_
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()> -> _SINK_
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)> -> _SINK_
<com.android.phone.PhoneGlobals: android.os.UpdateLock getUpdateLock()> -> _SINK_
<java.nio.LongArrayBuffer: long get(int)> -> _SINK_
<android.widget.ListPopupWindow: int getInputMethodMode()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getSearchLight()> -> _SINK_
<android.view.Choreographer: long getFrameTime()> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String getSubserviceIdentifiers()> -> _SINK_
<com.coremedia.iso.boxes.FileTypeBox: java.lang.String getMajorBrand()> -> _SINK_
<libcore.net.url.FtpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.MulticastSocket: java.net.InetAddress getInterface()> -> _SINK_
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getServerCertificates()> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: android.graphics.drawable.Drawable getChipBackground(com.android.ex.chips.RecipientEntry)> -> _SINK_
<android.gesture.Gesture: int getStrokesCount()> -> _SINK_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()> -> _SINK_
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap: java.lang.Object getOrCompute(java.lang.Object)> -> _SINK_
<java.nio.MappedByteBufferAdapter: char getChar(int)> -> _SINK_
<com.android.emailcommon.internet.MimeUtility: java.lang.String getHeaderParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> -> _SINK_
<android.webkit.ZoomManager: float getInvDefaultScale()> -> _SINK_
<com.android.mms.dom.events.EventImpl: int getSeekTo()> -> _SINK_
<com.android.deskclock.Utils: java.lang.String getCityName(com.android.deskclock.worldclock.CityObj,com.android.deskclock.worldclock.CityObj)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: int getAltCodeKeyWhileTypingAnimAlpha()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,java.lang.String)> -> _SINK_
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getEncryptionSpec()> -> _SINK_
<com.android.internal.app.AlertController: android.widget.ListView getListView()> -> _SINK_
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()> -> _SINK_
<android.mtp.MtpObjectInfo: int getObjectHandle()> -> _SINK_
<java.net.URLConnection: boolean getDoInput()> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$MyAdapter: com.android.internal.policy.impl.GlobalActions$Action getItem(int)> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getOpacity()> -> _SINK_
<java.security.cert.CertPathValidatorException: int getIndex()> -> _SINK_
<java.nio.MappedByteBufferAdapter: long getLong()> -> _SINK_
<android.view.KeyEvent: int getKeyCode()> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: long getRequestCount()> -> _SINK_
<android.view.View: int getWindowVisibility()> -> _SINK_
<gov.nist.javax.sip.header.Accept: float getQValue()> -> _SINK_
<android.webkit.WebHistoryItemClassic: byte[] getFlattenedData()> -> _SINK_
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: java.lang.String getCurrentPageDescription()> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long getItemId(int)> -> _SINK_
<android.graphics.drawable.DrawableContainer: int getMinimumHeight()> -> _SINK_
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getProtocol()> -> _SINK_
<android.widget.OverScroller: int getStartX()> -> _SINK_
<android.widget.OverScroller: int getStartY()> -> _SINK_
<java.net.PlainSocketImpl: java.lang.Object getOption(int)> -> _SINK_
<javax.security.cert.X509Certificate$1: byte[] getSigAlgParams()> -> _SINK_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()> -> _SINK_
<android.text.Layout: float getLineLeft(int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<com.google.common.collect.Multimaps$TransformedEntriesListMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: boolean isMusicActive()> -> _SINK_
<android.app.IWallpaperManagerCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: java.lang.String getDescription(int)> -> _SINK_
<android.widget.PopupWindow: int getInputMethodMode()> -> _SINK_
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)> -> _SINK_
<java.security.cert.CertificateFactory: java.util.Iterator getCertPathEncodings()> -> _SINK_
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: int getType()> -> _SINK_
<org.apache.harmony.security.x509.Time$1: java.lang.Object getObjectToEncode(java.lang.Object)> -> _SINK_
<com.android.phone.InCallTouchUi: int getTouchUiHeight()> -> _SINK_
<java.lang.reflect.Field: int getInt(java.lang.Object)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509NameEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive convertHexEncoded(java.lang.String,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> -> _SINK_
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: int getTagNo()> -> _SINK_
<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: int getTransportState()> -> _SINK_
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()> -> _SINK_
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: long getCSeq()> -> _SINK_
<android.widget.Editor$ActionPopupWindow: int getTextOffset()> -> _SINK_
<android.view.MotionEvent: int getPointerId(int)> -> _SINK_
<libcore.net.http.ResponseHeaders: libcore.net.http.RawHeaders getHeaders()> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getCallId()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromParentToView(android.view.View,float,float)> -> _SINK_
<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()> -> _SINK_
<com.android.internal.os.ProcessStats: int getLastIdleTime()> -> _SINK_
<com.android.server.am.UriPermissionOwner$ExternalToken: com.android.server.am.UriPermissionOwner getOwner()> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.VideoModel getVideo()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getTargetFrames()> -> _SINK_
<javax.sip.TransactionTerminatedEvent: javax.sip.ClientTransaction getClientTransaction()> -> _SINK_
<android.hardware.Camera$Parameters: int getPreviewFormat()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.widget.TabHost: android.view.View getCurrentTabView()> -> _SINK_
<android.view.KeyEvent: int getSource()> -> _SINK_
<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getShowVisualIndicator()> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: long getTimescale()> -> _SINK_
<com.android.camera.ui.PieItem: float getCenter()> -> _SINK_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getReceivedPointerDownTime(int)> -> _SINK_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageProcessor: java.lang.String getTransport()> -> _SINK_
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()> -> _SINK_
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: int getHopCount()> -> _SINK_
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> -> _SINK_
<com.android.providers.downloads.DownloadProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.app.IWallpaperManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.os.Bundle: int getInt(java.lang.String)> -> _SINK_
<android.app.backup.BackupDataInputStream: java.lang.String getKey()> -> _SINK_
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()> -> _SINK_
<java.nio.MappedByteBufferAdapter: float getFloat(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getViaHost()> -> _SINK_
<gov.nist.javax.sip.header.Event: java.lang.String getEventType()> -> _SINK_
<com.android.launcher2.Workspace: android.view.View getContent()> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: java.lang.Object getMetric(java.lang.String)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.MessageDisplay: android.graphics.Bitmap access$100(com.google.android.apps.lightcycle.panorama.MessageDisplay,java.lang.String,int,android.graphics.Typeface,float[])> -> _SINK_
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.VideoFrameProcessor: float[] getRotationEstimate()> -> _SINK_
<android.content.res.Resources: float getFraction(int,int,int)> -> _SINK_
<android.net.Credentials: int getPid()> -> _SINK_
<java.io.ObjectStreamClass: java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)> -> _SINK_
<com.android.mms.ui.UriImage: int getWidth()> -> _SINK_
<android.content.Intent: java.lang.String getDataString()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: int getWidth()> -> _SINK_
<android.view.View: float getScaleY()> -> _SINK_
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)> -> _SINK_
<android.view.View: float getScaleX()> -> _SINK_
<com.android.mms.layout.HVGALayoutParameters: int getImageHeight()> -> _SINK_
<android.view.KeyEvent: int getUnicodeChar()> -> _SINK_
<android.webkit.WebSettings: int getUserAgent()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getLocalCertificates()> -> _SINK_
<android.view.View: java.lang.Object getTag(int)> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: long getItemId(int)> -> _SINK_
<android.widget.GridLayout$Axis: int[] getTrailingMargins()> -> _SINK_
<gov.nist.core.MultiValueMapImpl: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)> -> _SINK_
<java.text.DecimalFormatSymbols: char getDigit()> -> _SINK_
<com.android.server.sip.SipSessionGroup$MakeCallCommand: int getTimeout()> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getXVelocity()> -> _SINK_
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)> -> _SINK_
<android.os.Environment: java.io.File getRootDirectory()> -> _SINK_
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getRecommendedMaxBytesOverMobile()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getInstallLocation()> -> _SINK_
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getCallId()> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()> -> _SINK_
<android.view.ViewConfiguration: int getScrollDefaultDelay()> -> _SINK_
<gov.nist.javax.sip.message.MessageObject: java.lang.String debugDump()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForRegion(java.lang.String)> -> _SINK_
<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.gesture.Learner: java.util.ArrayList getInstances()> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()> -> _SINK_
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)> -> _SINK_
<android.filterpacks.imageproc.LomoishFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: float getLeftFadingEdgeStrength()> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)> -> _SINK_
<java.security.Security: java.security.Provider[] getProviders()> -> _SINK_
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRightsManager getInstance()> -> _SINK_
<com.google.common.collect.ForwardingMap: java.lang.Object remove(java.lang.Object)> -> _SINK_
<android.view.ScaleGestureDetector: float getFocusX()> -> _SINK_
<android.view.ScaleGestureDetector: float getFocusY()> -> _SINK_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> -> _SINK_
<com.android.email.ControllerResultUiThreadWrapper: com.android.email.Controller$Result getWrappee()> -> _SINK_
<android.os.MemoryFile: java.io.InputStream getInputStream()> -> _SINK_
<com.android.mms.ui.AttachmentTypeSelectorAdapter$AttachmentListItem: int getCommand()> -> _SINK_
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationTypeId()> -> _SINK_
<javax.obex.ClientOperation: int getResponseCode()> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: java.lang.String getStackName()> -> _SINK_
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> -> _SINK_
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()> -> _SINK_
<android.widget.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.launcher2.PagedViewGridLayout: android.view.View getChildOnPageAt(int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getOutputText(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> -> _SINK_
<android.view.TextureView: android.graphics.Bitmap getBitmap()> -> _SINK_
<libcore.net.http.RequestHeaders: int getMaxStaleSeconds()> -> _SINK_
<android.animation.LayoutTransition: java.util.List getTransitionListeners()> -> _SINK_
<com.android.server.NativeDaemonEvent: java.lang.String getMessage()> -> _SINK_
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()> -> _SINK_
<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)> -> _SINK_
<android.content.SyncStatusInfo: int getLastFailureMesgAsInt(int)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(java.lang.String)> -> _SINK_
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)> -> _SINK_
<com.android.internal.widget.DrawableHolder: float getY()> -> _SINK_
<com.android.internal.widget.DrawableHolder: float getX()> -> _SINK_
<com.google.common.collect.ImmutableCollection: java.lang.String toString()> -> _SINK_
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<java.security.cert.CertPathValidator: java.security.Provider getProvider()> -> _SINK_
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Via: gov.nist.javax.sip.header.Protocol getSentProtocol()> -> _SINK_
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$1: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)> -> _SINK_
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()> -> _SINK_
<android.filterfw.core.FilterFunction: android.filterfw.core.FilterContext getContext()> -> _SINK_
<android.app.SearchableInfo: int getLabelId()> -> _SINK_
<android.app.backup.IRestoreObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.widget.RemoteViews: java.lang.String getPackage()> -> _SINK_
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getCapacity()> -> _SINK_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: java.lang.String getSystemId()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: gov.nist.core.NameValueList getAuthParams()> -> _SINK_
<com.android.launcher2.ShortcutInfo: java.lang.String getPackageName()> -> _SINK_
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getComment()> -> _SINK_
<com.android.exchange.adapter.ProvisionParser: com.android.emailcommon.provider.Policy getPolicy()> -> _SINK_
<com.android.videoeditor.util.FileUtils: java.io.File getProjectsRootDir(android.content.Context)> -> _SINK_
<java.nio.MappedByteBufferAdapter: double getDouble(int)> -> _SINK_
<android.view.MotionEvent: float getToolMinor()> -> _SINK_
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getWorkingStats(int)> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemGenerationException: java.lang.Throwable getCause()> -> _SINK_
<android.text.BoringLayout: int getLineCount()> -> _SINK_
<com.google.common.collect.ArrayListMultimap: java.util.List get(java.lang.Object)> -> _SINK_
<com.android.internal.content.PackageMonitor: java.lang.String getPackageName(android.content.Intent)> -> _SINK_
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String,int)> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getContentSize()> -> _SINK_
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getZipCode()> -> _SINK_
<android.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: int getIntrinsicHeight()> -> _SINK_
<android.view.InputEvent: android.view.InputDevice getDevice()> -> _SINK_
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)> -> _SINK_
<android.media.videoeditor.AudioTrack: long getDuration()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetPosition(int)> -> _SINK_
<android.app.DownloadManager: long getActiveNetworkWarningBytes(android.content.Context)> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: android.text.Spannable getSpannable()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumId()> -> _SINK_
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -> _SINK_
<android.app.AppGlobals: java.lang.String getInitialPackage()> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Folder$OpenMode getMode()> -> _SINK_
<java.security.cert.PKIXParameters: java.util.Set getInitialPolicies()> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: int getContentWidth()> -> _SINK_
<java.util.Hashtable$HashtableEntry: java.lang.Object getKey()> -> _SINK_
<android.view.View: int getMinimumHeight()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator()> -> _SINK_
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()> -> _SINK_
<com.android.mms.model.RegionModel: int getTop()> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getAlbumCoverCacheFile(long,java.lang.String,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)> -> _SINK_
<com.android.mms.model.MediaModel: java.lang.String getSrc()> -> _SINK_
<libcore.util.ZoneInfoDB: java.lang.String getVersion()> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getMimeType()> -> _SINK_
<com.android.mms.data.Conversation: com.android.mms.data.ContactList getRecipients()> -> _SINK_
<com.android.mms.ui.LayoutSelectorAdapter: java.util.List getData(android.content.Context)> -> _SINK_
<java.util.ArrayDeque: java.lang.Object getFirst()> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)> -> _SINK_
<com.googlecode.mp4parser.authoring.Movie: long getNextTrackId()> -> _SINK_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.internal.os.PowerProfile: int getNumSpeedSteps()> -> _SINK_
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<com.google.common.collect.ForwardingSet: java.lang.Object delegate()> -> _SINK_
<android.webkit.WebHistoryItemClassic: java.lang.String getOriginalUrl()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: long getLocalSeqNumber()> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<android.content.BroadcastReceiver: java.lang.String getResultData()> -> _SINK_
<android.widget.AdapterView: int getLastVisiblePosition()> -> _SINK_
<android.hardware.usb.UsbEndpoint: int getType()> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.internal.app.LocalePicker$LocaleInfo: java.lang.String getLabel()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger getSerialNumber()> -> _SINK_
<android.hardware.Camera$Parameters: int getPictureFormat()> -> _SINK_
<java.text.DecimalFormatSymbols: char getPerMill()> -> _SINK_
<gov.nist.core.StringTokenizer: java.util.Vector getLines()> -> _SINK_
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()> -> _SINK_
<com.android.emailcommon.mail.Message: java.lang.String toString()> -> _SINK_
<android.hardware.usb.UsbDevice: int getDeviceProtocol()> -> _SINK_
<android.app.FragmentManagerImpl: int getBackStackEntryCount()> -> _SINK_
<com.android.mms.util.ImageCacheService: byte[] getBytes(java.lang.String)> -> _SINK_
<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieEffect getEffect()> -> _SINK_
<java.util.IllegalFormatCodePointException: int getCodePoint()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getDatabasePath()> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentFragment createDocumentFragment()> -> _SINK_
<com.android.email.activity.UIControllerBase: java.lang.String getSearchHint()> -> _SINK_
<android.text.method.DialerKeyListener: int getInputType()> -> _SINK_
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getLoadingView()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getFantasyFontFamily()> -> _SINK_
<com.google.common.collect.Maps$1: java.lang.Object getKey()> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getParent()> -> _SINK_
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> -> _SINK_
<java.lang.Number: short shortValue()> -> _SINK_
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: int getCount()> -> _SINK_
<com.android.mms.MmsConfig: int getSmsToMmsTextThreshold()> -> _SINK_
<com.google.common.io.ByteStreams$1: java.io.ByteArrayInputStream getInput()> -> _SINK_
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()> -> _SINK_
<android.graphics.drawable.ColorDrawable: int getColor()> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: android.filterfw.core.SerializedFrame$DirectByteInputStream getInputStream()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieTransition getTransition(java.lang.String)> -> _SINK_
<com.android.mms.model.MediaModel: java.lang.String getContentType()> -> _SINK_
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> -> _SINK_
<com.google.common.collect.ImmutableSortedSet: java.util.Iterator iterator()> -> _SINK_
<com.android.email.activity.ThreePaneLayout: int getMiddlePaneId()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getY()> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: float getX()> -> _SINK_
<com.android.mms.util.BlobCache: byte[] lookup(long)> -> _SINK_
<gov.nist.javax.sip.header.ContentType: gov.nist.javax.sip.header.MediaRange getMediaRange()> -> _SINK_
<com.google.common.collect.ForwardingMultimap: java.util.Set keySet()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getTransport()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float getBoundedScrollProgress(int,android.view.View,int)> -> _SINK_
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.android.mms.model.SlideshowModel)> -> _SINK_
<android.view.KeyCharacterMap: char getMatch(int,char[],int)> -> _SINK_
<android.media.MediaRouter: int getRouteCountStatic()> -> _SINK_
<java.lang.Class: java.lang.Class[] getDeclaredClasses()> -> _SINK_
<com.google.common.collect.Iterators$11: java.lang.Object get(int)> -> _SINK_
<com.google.common.collect.Iterators$12: java.lang.Object get(int)> -> _SINK_
<android.renderscript.Type: android.renderscript.Element getElement()> -> _SINK_
<java.lang.Enum: java.lang.Object clone()> -> _SINK_
<android.media.IRemoteControlClient$Stub: android.os.IBinder asBinder()> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: java.lang.String getLanguageRange()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.header.Via getViaHeader()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderField(java.lang.String)> -> _SINK_
<com.android.camera.ComboPreferences: boolean getBoolean(java.lang.String,boolean)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.validation.Schema getSchema()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)> -> _SINK_
<android.widget.Scroller: int getFinalY()> -> _SINK_
<android.widget.Scroller: int getFinalX()> -> _SINK_
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.Types: java.lang.reflect.Type[] getClonedTypeArray(org.apache.harmony.luni.lang.reflect.ListOfTypes)> -> _SINK_
<android.media.Metadata: byte[] getByteArray(int)> -> _SINK_
<javax.security.auth.callback.PasswordCallback: char[] getPassword()> -> _SINK_
<android.drm.ProcessedData: java.lang.String getSubscriptionId()> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub: android.accounts.IAccountManagerResponse asInterface(android.os.IBinder)> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.PluginList getPluginList()> -> _SINK_
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> -> _SINK_
<com.android.launcher2.Workspace: int getDescendantFocusability()> -> _SINK_
<com.android.exchange.adapter.ProvisionParser: boolean getRemoteWipe()> -> _SINK_
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList)> -> _SINK_
<android.content.IntentFilter: java.lang.String getDataType(int)> -> _SINK_
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getTransferEncoding()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtree: byte[] getEncoded()> -> _SINK_
<android.media.videoeditor.TransitionAlpha: java.lang.String getPNGMaskFilename()> -> _SINK_
<com.google.android.picasastore.HttpUtils: org.apache.http.conn.ClientConnectionManager getConnectionManager()> -> _SINK_
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: long getItemId(int)> -> _SINK_
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)> -> _SINK_
<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()> -> _SINK_
<android.media.Metadata: java.util.Date getDate(int)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: long getSampleSize()> -> _SINK_
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()> -> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)> -> _SINK_
<com.android.uiautomator.core.UiDevice: int getDisplayHeight()> -> _SINK_
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationId()> -> _SINK_
<android.drm.DrmInfoRequest: java.lang.String getMimeType()> -> _SINK_
<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getOwner()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getResourceId()> -> _SINK_
<android.util.Property: java.lang.Class getType()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.PointCloud: float getScale()> -> _SINK_
<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)> -> _SINK_
<javax.obex.ClientSession: javax.obex.HeaderSet disconnect(javax.obex.HeaderSet)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: long getDuration()> -> _SINK_
<android.media.AudioRecord: int getChannelCount()> -> _SINK_
<android.util.SparseArray: java.lang.Object get(int)> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer: com.android.mms.dom.smil.SmilPlayer getPlayer()> -> _SINK_
<java.util.zip.ZipEntry: long getCrc()> -> _SINK_
<com.google.common.collect.Lists$TwoPlusArrayList: java.lang.Object get(int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(java.lang.String)> -> _SINK_
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()> -> _SINK_
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: android.view.MotionEvent getLastReceivedEvent()> -> _SINK_
<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<com.android.exchange.EasSyncService: boolean getValidateRedirect(com.android.exchange.EasResponse,com.android.emailcommon.provider.HostAuth)> -> _SINK_
<android.content.ClipboardManager: java.lang.CharSequence getText()> -> _SINK_
<android.webkit.PluginList: java.util.List getList()> -> _SINK_
<com.android.common.widget.CompositeCursorAdapter: android.content.Context getContext()> -> _SINK_
<android.widget.OverScroller: int getDuration()> -> _SINK_
<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()> -> _SINK_
<com.android.server.am.ProcessRecord: java.lang.String[] getPackageList()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object)> -> _SINK_
<android.app.FragmentManagerImpl: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)> -> _SINK_
<android.content.CursorLoader: android.database.Cursor loadInBackground()> -> _SINK_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getAlgorithm()> -> _SINK_
<android.widget.ListPopupWindow: int getSelectedItemPosition()> -> _SINK_
<java.lang.reflect.Array: int getLength(java.lang.Object)> -> _SINK_
<org.apache.http.auth.AuthScope: java.lang.String getScheme()> -> _SINK_
<android.filterfw.core.FrameFormat: int getDimensionCount()> -> _SINK_
<com.android.launcher2.Hotseat: int getCellXFromOrder(int)> -> _SINK_
<android.media.IMediaScannerListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet: com.android.inputmethod.keyboard.internal.KeyStyle getKeyStyle(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: float getReportedHorizontalFovDegrees()> -> _SINK_
<java.util.Currency: java.util.Set getAvailableCurrencies()> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription loadFirstTask()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getNodeValue()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getPrefix()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getVolumeState(java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getDisplayZoomControls()> -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: int getContentHeight()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$StaticVarGetter: java.lang.String get()> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String[] getHeader(java.lang.String)> -> _SINK_
<android.text.util.Rfc822Token: java.lang.String getAddress()> -> _SINK_
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.PicasaDatabaseHelper get(android.content.Context)> -> _SINK_
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)> -> _SINK_
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getAdjustedDate()> -> _SINK_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Handler: java.lang.String getMessageName(android.os.Message)> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()> -> _SINK_
<java.security.Signature: byte[] sign()> -> _SINK_
<android.content.res.TypedArray: java.lang.String getPositionDescription()> -> _SINK_
<android.webkit.CacheManager$CacheResult: java.lang.String getLocation()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUniversalString: byte[] getOctets()> -> _SINK_
<gov.nist.javax.sip.header.TimeStamp: long getTime()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.TimeToSampleBox getTimeToSampleBox()> -> _SINK_
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SINK_
<android.widget.Editor$EasyEditPopupWindow: int getVerticalLocalPosition(int)> -> _SINK_
<java.security.cert.CertPathValidator: java.lang.String getDefaultType()> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: java.util.Locale getAcceptLanguage()> -> _SINK_
<org.apache.harmony.security.x509.BasicConstraints: byte[] getEncoded()> -> _SINK_
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getUncompressedStream(java.io.InputStream)> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()> -> _SINK_
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumWidth()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryBeginTime()> -> _SINK_
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocolVersion()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> -> _SINK_
<org.apache.harmony.security.x509.OtherName: byte[] getValue()> -> _SINK_
<android.preference.Preference: java.lang.String getKey()> -> _SINK_
<java.text.FieldPosition: int getBeginIndex()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> -> _SINK_
<android.widget.RemoteViews$MemoryUsageCounter: int getMemoryUsage()> -> _SINK_
<dalvik.system.profiler.HprofData: java.util.List getThreadHistory()> -> _SINK_
<com.android.providers.downloads.StorageManager: java.io.File getDownloadDataDirectory()> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)> -> _SINK_
<android.text.BoringLayout: int getParagraphDirection(int)> -> _SINK_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getInputEncoding()> -> _SINK_
<com.android.server.am.ServiceRecord: int getLastStartId()> -> _SINK_
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Builder getInstance()> -> _SINK_
<com.android.internal.widget.ActionBarView: int getNavigationMode()> -> _SINK_
<com.android.mms.model.MediaModel: android.net.Uri getUri()> -> _SINK_
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getNextBoundary()> -> _SINK_
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getFromApplicationSpecifiedCompletions(android.view.inputmethod.CompletionInfo[])> -> _SINK_
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])> -> _SINK_
<android.media.videoeditor.MediaProperties: android.util.Pair[] getSupportedResolutions(int)> -> _SINK_
<javax.crypto.Cipher: byte[] doFinal(byte[])> -> _SINK_
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: java.util.Calendar getJavaCal()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter$MailboxFragmentLoader: android.database.Cursor loadInBackground()> -> _SINK_
<gov.nist.javax.sip.parser.Parser: gov.nist.javax.sip.parser.Lexer getLexer()> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: android.graphics.Bitmap getBitmap()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtrees: byte[] getEncoded()> -> _SINK_
<com.google.common.collect.ImmutableSet: java.lang.Object writeReplace()> -> _SINK_
<android.media.videoeditor.AudioTrack: long getBoundaryEndTime()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getSerifFontFamily()> -> _SINK_
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getHost()> -> _SINK_
<java.util.Currency: java.lang.String getDisplayName()> -> _SINK_
<java.net.PlainDatagramSocketImpl: int getTimeToLive()> -> _SINK_
<android.app.LoadedApk: java.lang.String getPackageName()> -> _SINK_
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()> -> _SINK_
<com.coremedia.iso.boxes.MediaInformationBox: com.coremedia.iso.boxes.SampleTableBox getSampleTableBox()> -> _SINK_
<com.android.mms.util.SimpleCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriText()> -> _SINK_
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetNewHeader()> -> _SINK_
<java.util.zip.ZipEntry: java.lang.String getComment()> -> _SINK_
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getDomain()> -> _SINK_
<com.android.server.pm.PackageSettingBase: java.util.HashSet getEnabledComponents(int)> -> _SINK_
<android.filterfw.core.KeyValueMap: int getInt(java.lang.String)> -> _SINK_
<java.text.Collator: java.util.Locale[] getAvailableLocales()> -> _SINK_
<org.json.JSONArray: long getLong(int)> -> _SINK_
<android.content.res.Resources: java.lang.String getResourceName(int)> -> _SINK_
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getCacheFileName(java.lang.String,java.lang.String,android.content.Context)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)> -> _SINK_
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()> -> _SINK_
<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespacePrefix(int)> -> _SINK_
<android.content.Intent: double getDoubleExtra(java.lang.String,double)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: java.io.InputStream getInputStream()> -> _SINK_
<org.apache.harmony.security.x509.ReasonCode: byte[] getEncoded()> -> _SINK_
<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.mms.data.Conversation: android.net.Uri getUri()> -> _SINK_
<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])> -> _SINK_
<org.apache.http.message.BasicStatusLine: java.lang.String getReasonPhrase()> -> _SINK_
<com.google.common.collect.ImmutableMap: java.util.Set keySet()> -> _SINK_
<com.android.server.NativeDaemonEvent: int getCode()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getUserAgentString()> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes(java.lang.Class,boolean)> -> _SINK_
<gov.nist.javax.sip.header.CallIdentifier: java.lang.String getLocalId()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getKey()> -> _SINK_
<gov.nist.core.Host: java.net.InetAddress getInetAddress()> -> _SINK_
<com.googlecode.mp4parser.FullContainerBox: void getContent(java.nio.ByteBuffer)> -> _SINK_
<gov.nist.javax.sip.header.Accept: java.lang.String getContentSubType()> -> _SINK_
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()> -> _SINK_
<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)> -> _SINK_
<java.util.concurrent.locks.ReentrantLock$Sync: int getHoldCount()> -> _SINK_
<android.media.videoeditor.Overlay: long getStartTime()> -> _SINK_
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel)> -> _SINK_
<android.widget.Spinner$DropDownAdapter: long getItemId(int)> -> _SINK_
<com.android.internal.os.BinderInternal: long getLastGcTime()> -> _SINK_
<android.widget.AbsSpinner: android.widget.Adapter getAdapter()> -> _SINK_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getRelativeChildOffset(int)> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)> -> _SINK_
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel get(int)> -> _SINK_
<libcore.icu.TimeZones: java.lang.String getDisplayName(java.lang.String[][],java.lang.String,boolean,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getReceiveUdpBufferSize()> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getCommentURL()> -> _SINK_
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)> -> _SINK_
<android.widget.TextView: int getCompoundPaddingRight()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: android.content.Context getContext()> -> _SINK_
<java.util.ResourceBundle: java.util.Set keySet()> -> _SINK_
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)> -> _SINK_
<java.text.NumberFormat: java.text.NumberFormat getInstance()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> -> _SINK_
<com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.view.AbsSavedState: android.os.Parcelable getSuperState()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: long getMediaItemBeginTime(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: int getMaximumMessageSize()> -> _SINK_
<android.os.Parcel: java.io.Serializable readSerializable()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ListOfVariables: java.lang.reflect.TypeVariable[] getArray()> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: java.lang.String getDefaultContentEncodingCharset()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getActiveClientTransactionCount()> -> _SINK_
<com.android.email.activity.UiUtilities: android.view.View getView(android.view.View,int)> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)> -> _SINK_
<java.lang.Thread: java.lang.Thread$State getState()> -> _SINK_
<android.webkit.WebViewClassic: int getVisibleTitleHeight()> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getAudioChannels()> -> _SINK_
<android.app.ProgressDialog: int getProgress()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()> -> _SINK_
<android.app.Activity: int getChangingConfigurations()> -> _SINK_
<com.android.mms.transaction.TransactionBundle: java.lang.String getMmscUrl()> -> _SINK_
<android.webkit.WebSettingsClassic: int getTextZoom()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<android.app.ActivityOptions: android.os.IRemoteCallback getOnAnimationStartListener()> -> _SINK_
<android.widget.ListPopupWindow: long getSelectedItemId()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()> -> _SINK_
<com.android.org.bouncycastle.asn1.DEROctetStringParser: java.io.InputStream getOctetStream()> -> _SINK_
<android.view.KeyCharacterMap: char getDisplayLabel(int)> -> _SINK_
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()> -> _SINK_
<android.graphics.drawable.ScaleDrawable: int getChangingConfigurations()> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic: int getDefaultFontSize()> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$MyAdapter: long getItemId(int)> -> _SINK_
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SINK_
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getLastReceivedUpPointerDownTime()> -> _SINK_
<android.app.ActivityThread: java.lang.String getProfileFilePath()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: byte[] sign()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getLocalName()> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getFromTag()> -> _SINK_
<java.util.LinkedList: java.lang.Object get(int)> -> _SINK_
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()> -> _SINK_
<android.os.storage.StorageManager$ObbListenerDelegate: android.os.storage.OnObbStateChangeListener getListener()> -> _SINK_
<java.lang.Class: java.lang.String getName()> -> _SINK_
<com.android.camera.ui.PopupManager: com.android.camera.ui.PopupManager getInstance(android.content.Context)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1StringType: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.filterpacks.imageproc.ImageCombineFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: org.apache.harmony.security.x509.GeneralNames getAuthorityCertIssuer()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$10: java.lang.String get()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getQop()> -> _SINK_
<android.webkit.WebViewClassic$PrivateHandler: android.content.Context getContext()> -> _SINK_
<java.security.Security: java.util.Set getAlgorithms(java.lang.String)> -> _SINK_
<android.widget.ListView: int getFooterViewsCount()> -> _SINK_
<android.graphics.BitmapRegionDecoder: int getHeight()> -> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostName()> -> _SINK_
<android.app.Instrumentation: android.os.Bundle getBinderCounts()> -> _SINK_
<com.android.mms.drm.DrmUtils: java.lang.String getConvertExtension(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: boolean getMaxBiometricUnlockAttemptsReached()> -> _SINK_
<android.widget.AdapterView: int getPositionForView(android.view.View)> -> _SINK_
<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getLastMediaItemId()> -> _SINK_
<android.widget.RemoteViewsAdapter: long getItemId(int)> -> _SINK_
<android.webkit.HTML5VideoView: int getTextureName()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate: java.net.SecureCacheResponse getCacheResponse()> -> _SINK_
<android.content.ComponentName: java.lang.String getPackageName()> -> _SINK_
<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SINK_
<android.text.StaticLayout: int getTopPadding()> -> _SINK_
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)> -> _SINK_
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)> -> _SINK_
<com.android.camera.CameraHolder: int getBackCameraId()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)> -> _SINK_
<org.apache.harmony.security.x509.CertificateList: byte[] access$300(org.apache.harmony.security.x509.CertificateList)> -> _SINK_
<android.filterfw.geometry.Rectangle: float getHeight()> -> _SINK_
<com.android.videoeditor.util.StringUtils: java.lang.String getTimestampAsString(android.content.Context,long)> -> _SINK_
<gov.nist.javax.sip.address.NetObject: java.lang.String toString()> -> _SINK_
<com.google.common.collect.ForwardingMap$StandardKeySet: java.util.Map map()> -> _SINK_
<android.app.IUiModeManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getStartDate()> -> _SINK_
<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()> -> _SINK_
<java.nio.MemoryBlock$NonMovableHeapBlock: byte[] array()> -> _SINK_
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> -> _SINK_
<android.webkit.HTML5VideoView: int getVideoLayerId()> -> _SINK_
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> -> _SINK_
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> -> _SINK_
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)> -> _SINK_
<android.preference.PreferenceScreen: android.app.Dialog getDialog()> -> _SINK_
<java.nio.DirectByteBuffer: int getInt()> -> _SINK_
<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<com.android.email.mail.transport.MailTransport: java.io.OutputStream getOutputStream()> -> _SINK_
<com.google.android.picasasync.UploadsManager: long addManualUpload(com.google.android.picasasync.UploadTaskEntry)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFlashMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebSettings getSettings()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> -> _SINK_
<com.beetstra.jutf7.Base64Util: byte getChar(int)> -> _SINK_
<com.android.emailcommon.mail.Multipart: java.lang.String getContentType()> -> _SINK_
<android.graphics.Canvas: javax.microedition.khronos.opengles.GL getGL()> -> _SINK_
<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getDecodingTimeEntries()> -> _SINK_
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getErrorStream()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.lang.String getMultiParameter(java.lang.String)> -> _SINK_
<com.android.email.provider.ContentCache$CacheToken: java.lang.String getId()> -> _SINK_
<com.android.email.mail.store.imap.ImapString$1: java.lang.String getString()> -> _SINK_
<android.widget.GridView: int getHorizontalSpacing()> -> _SINK_
<android.app.ListActivity: android.widget.ListView getListView()> -> _SINK_
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> -> _SINK_
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)> -> _SINK_
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace(int)> -> _SINK_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay getActiveDisplay()> -> _SINK_
<com.android.inputmethod.latin.suggestions.SuggestionStripView: com.android.inputmethod.latin.SuggestedWords getSuggestions()> -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.email.MessageListContext getListContext()> -> _SINK_
<android.widget.Spinner: int getGravity()> -> _SINK_
<android.drm.mobile1.DrmRawContent: int getContentLength(android.drm.mobile1.DrmRights)> -> _SINK_
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)> -> _SINK_
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.io.InputStream getAsStream()> -> _SINK_
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionSettings getConnectionSettings()> -> _SINK_
<java.nio.CharSequenceAdapter: char get(int)> -> _SINK_
<android.content.res.TypedArray: int getInteger(int,int)> -> _SINK_
<android.app.ProgressDialog: int getSecondaryProgress()> -> _SINK_
<gov.nist.core.LexerCore: java.lang.String getRest()> -> _SINK_
<android.widget.ImageView: boolean getBaselineAlignBottom()> -> _SINK_
<com.android.ex.chips.RecipientChip: long getDataId()> -> _SINK_
<org.apache.harmony.security.pkcs7.AuthenticatedAttributes: java.util.List getAttributes()> -> _SINK_
<android.os.Registrant: android.os.Handler getHandler()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.util.Map getRequestProperties()> -> _SINK_
<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<java.util.AbstractList$SubAbstractList: java.lang.Object get(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()> -> _SINK_
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$100(com.google.android.gms.common.internal.GmsClient)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskBlendingPercent()> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getTerminatingIOI()> -> _SINK_
<android.view.ContextThemeWrapper: int getThemeResId()> -> _SINK_
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()> -> _SINK_
<android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey getRSAPublicKey()> -> _SINK_
<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)> -> _SINK_
<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()> -> _SINK_
<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()> -> _SINK_
<android.text.method.TextKeyListener$NullKeyListener: int getInputType()> -> _SINK_
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()> -> _SINK_
<com.android.internal.widget.DrawableHolder: float getAlpha()> -> _SINK_
<android.graphics.SurfaceTexture: long getTimestamp()> -> _SINK_
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.StateListDrawable$StateListState getStateListState()> -> _SINK_
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: int getHash()> -> _SINK_
<android.widget.TextView: int getVerticalOffset(boolean)> -> _SINK_
<android.widget.TextView: int getMarqueeRepeatLimit()> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)> -> _SINK_
<com.android.camera.ListPreference: java.lang.String getEntry()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getStorageEncryptionStatus(int)> -> _SINK_
<java.math.MathContext: java.math.RoundingMode getRoundingMode()> -> _SINK_
<com.android.mms.ui.AttachmentTypeSelectorAdapter: java.util.List getData(int,android.content.Context)> -> _SINK_
<android.os.Debug: int getThreadExternalAllocSize()> -> _SINK_
<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)> -> _SINK_
<android.webkit.HTML5VideoView: boolean getReadyToUseSurfTex()> -> _SINK_
<com.android.internal.widget.DrawableHolder: int getWidth()> -> _SINK_
<libcore.icu.ICU: java.lang.String[] getISOCountries()> -> _SINK_
<android.app.ActivityThread: android.content.res.Configuration applyConfigCompatMainThread(int,android.content.res.Configuration,android.content.res.CompatibilityInfo)> -> _SINK_
<android.text.Layout: int getLineBaseline(int)> -> _SINK_
<com.android.internal.widget.SizeAdaptiveLayout: android.view.View getModestyPanel()> -> _SINK_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getViewTypeCount()> -> _SINK_
<android.view.inputmethod.CorrectionInfo: int getOffset()> -> _SINK_
<com.android.providers.downloads.RealSystemFacade: android.net.NetworkInfo getActiveNetworkInfo(int)> -> _SINK_
<android.app.ActivityManagerProxy: java.util.List getRunningExternalApplications()> -> _SINK_
<com.google.common.collect.ForwardingMapEntry: java.lang.Object getValue()> -> _SINK_
<android.view.AccessibilityIterators$AbstractTextSegmentIterator: int[] getRange(int,int)> -> _SINK_
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$ArrayAdapterWithButtons: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.text.Layout: android.text.Layout$Alignment getAlignment()> -> _SINK_
<android.view.View: int getLeftPaddingOffset()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])> -> _SINK_
<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()> -> _SINK_
<com.google.android.apps.lightcycle.storage.StorageManagerFactory: com.google.android.apps.lightcycle.storage.StorageManager getStorageManager()> -> _SINK_
<org.apache.harmony.security.x509.NameConstraints: byte[] getEncoded()> -> _SINK_
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SINK_
<libcore.io.ForwardingOs: java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor,int,int)> -> _SINK_
<android.net.Credentials: int getGid()> -> _SINK_
<java.util.logging.LogRecord: java.util.logging.Level getLevel()> -> _SINK_
<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)> -> _SINK_
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> -> _SINK_
<android.view.ViewGroup: int getChildCount()> -> _SINK_
<com.android.systemui.statusbar.NotificationData$Entry: android.view.View getLargeView()> -> _SINK_
<android.widget.TabHost: java.lang.String getCurrentTabTag()> -> _SINK_
<com.android.deskclock.TimePicker: int getLayoutId()> -> _SINK_
<android.view.View: float getPivotY()> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: int getNanoSecond()> -> _SINK_
<android.view.View: float getPivotX()> -> _SINK_
<gov.nist.javax.sip.header.ErrorInfo: javax.sip.address.URI getErrorInfo()> -> _SINK_
<java.nio.FloatArrayBuffer: float get(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Encodable readObject()> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionaryBigramList: java.util.HashMap getBigrams(java.lang.String)> -> _SINK_
<android.os.IVibratorService$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.internal.app.LocalePicker$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: int getPadding()> -> _SINK_
<com.android.camera.CameraScreenNail: int getWidth()> -> _SINK_
<com.android.mms.ui.Presenter: com.android.mms.model.Model getModel()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPeerPacketSourcePort()> -> _SINK_
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getX(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: boolean isBouncing()> -> _SINK_
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getY(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getServerTransactionTableSize()> -> _SINK_
<java.nio.DoubleArrayBuffer: double get(int)> -> _SINK_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.coremedia.iso.boxes.Box getMediaHeaderBox()> -> _SINK_
<com.android.phone.CallTime: long getCallDuration(com.android.internal.telephony.Call)> -> _SINK_
<com.android.systemui.recent.TaskDescription: android.graphics.Bitmap getThumbnail()> -> _SINK_
<com.android.exchange.provider.GalResult$GalData: java.lang.String get(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getWidth(int)> -> _SINK_
<com.google.common.collect.ForwardingMap: java.util.Set entrySet()> -> _SINK_
<java.text.DecimalFormatSymbols: char getDecimalSeparator()> -> _SINK_
<org.apache.harmony.security.x509.SubjectKeyIdentifier: byte[] getKeyIdentifier()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()> -> _SINK_
<android.graphics.Bitmap: int getHeight()> -> _SINK_
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList,int)> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(long)> -> _SINK_
<org.apache.http.HttpHost: java.lang.String getSchemeName()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(com.android.videoeditor.service.MovieTransition)> -> _SINK_
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()> -> _SINK_
<android.view.ViewGroup: android.view.View getChildAt(int)> -> _SINK_
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> -> _SINK_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> -> _SINK_
<android.view.View: java.lang.CharSequence getContentDescription()> -> _SINK_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)> -> _SINK_
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()> -> _SINK_
<com.google.android.picasasync.PicasaApi: int getAlbums(com.google.android.picasasync.UserEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> -> _SINK_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()> -> _SINK_
<java.io.ObjectStreamField: java.lang.String getTypeString()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: java.util.List getUnmodifiableChildren()> -> _SINK_
<android.content.res.XmlBlock$Parser: int getAttributeIntValue(int,int)> -> _SINK_
<android.preference.ListPreference: java.lang.String getValue()> -> _SINK_
<java.net.InterfaceAddress: short getNetworkPrefixLength()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.View getActionView()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SINK_
<android.media.videoeditor.WaveformData: int getFrameDuration()> -> _SINK_
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$200(com.google.android.gms.common.internal.GmsClient)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.stack.DefaultRouter: java.util.ListIterator getNextHops(javax.sip.message.Request)> -> _SINK_
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: int getViaPort()> -> _SINK_
<com.android.email.provider.ContentCache: java.util.Map getSnapshot()> -> _SINK_
<com.android.server.IntentResolver: java.lang.Object newResult(android.content.IntentFilter,int,int)> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: gov.nist.javax.sip.header.extensions.ReferencesHeader createReferencesHeader(java.lang.String,java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaImageItem: int getWidth()> -> _SINK_
<android.support.v4.view.PagerAdapter: java.lang.CharSequence getPageTitle(int)> -> _SINK_
<com.android.emailcommon.provider.EmailContent: android.net.Uri save(android.content.Context)> -> _SINK_
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()> -> _SINK_
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket getSocket()> -> _SINK_
<android.widget.AbsListView: int getBottomPaddingOffset()> -> _SINK_
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()> -> _SINK_
<android.widget.RemoteViews$BitmapReflectionAction: java.lang.String getActionName()> -> _SINK_
<java.util.SimpleTimeZone: int getOffset(long)> -> _SINK_
<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultBackgroundType()> -> _SINK_
<gov.nist.core.NameValueList: java.util.Iterator getNames()> -> _SINK_
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)> -> _SINK_
<android.view.View: android.content.Context getContext()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] getKeyIdentifier()> -> _SINK_
<android.animation.ValueAnimator: float getAnimatedFraction()> -> _SINK_
<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()> -> _SINK_
<android.content.res.TypedArray: int getResourceId(int,int)> -> _SINK_
<java.lang.Daemons$Daemon: java.lang.StackTraceElement[] getStackTrace()> -> _SINK_
<java.security.MessageDigestSpi: java.lang.Object clone()> -> _SINK_
<android.filterfw.core.NativeFrame: int[] getInts()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<android.view.View: int getNextFocusUpId()> -> _SINK_
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> -> _SINK_
<java.util.SimpleTimeZone: int getRawOffset()> -> _SINK_
<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> -> _SINK_
<java.util.Formatter$FormatToken: char getConversionType()> -> _SINK_
<com.android.internal.content.PackageMonitor: android.os.Handler getRegisteredHandler()> -> _SINK_
<android.view.textservice.SpellCheckerSubtype: int getNameResId()> -> _SINK_
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> -> _SINK_
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getScheme()> -> _SINK_
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation$Cache getInstance()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: libcore.net.http.HttpEngine getHttpEngine()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.util.List leadingDigitPatterns()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst()> -> _SINK_
<android.graphics.drawable.LayerDrawable$LayerState: int getChangingConfigurations()> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<libcore.io.ForwardingOs: java.net.SocketAddress getsockname(java.io.FileDescriptor)> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: int getPort()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getHeader(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageSettingBase: int getEnabled(int)> -> _SINK_
<android.text.DynamicLayout: int getLineCount()> -> _SINK_
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()> -> _SINK_
<org.apache.james.mime4j.field.address.MailboxList: org.apache.james.mime4j.field.address.Mailbox get(int)> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getEmailAddress()> -> _SINK_
<org.xml.sax.InputSource: java.lang.String getPublicId()> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase(int)> -> _SINK_
<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)> -> _SINK_
<java.net.Socks4Message: java.lang.String getErrorString(int)> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: int[] getEdge(int)> -> _SINK_
<com.google.android.picasasync.PicasaSyncHelper: com.google.android.picasasync.PicasaSyncHelper getInstance(android.content.Context)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: int getFileType(int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator startDelay(int,android.animation.Animator)> -> _SINK_
<gov.nist.core.LexerCore: java.lang.String getString(char)> -> _SINK_
<com.android.internal.view.menu.ActionMenuView: int getWindowAnimations()> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getEnd()> -> _SINK_
<libcore.net.url.FtpHandler: int getDefaultPort()> -> _SINK_
<com.android.camera.ui.PieRenderer: int getSize()> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> -> _SINK_
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: android.media.videoeditor.WaveformData getWaveformData()> -> _SINK_
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getFirstArgument(int)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERUniversalString: java.lang.String getString()> -> _SINK_
<android.view.View: int getNextFocusDownId()> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: float getDur()> -> _SINK_
<android.media.AudioManager: boolean isMicrophoneMute()> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestions$Divider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> -> _SINK_
<gov.nist.javax.sip.DialogTimeoutEvent: javax.sip.Dialog getDialog()> -> _SINK_
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)> -> _SINK_
<com.googlecode.mp4parser.authoring.TrackMetaData: java.util.Date getCreationTime()> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()> -> _SINK_
<com.android.ex.chips.RecipientAlternatesAdapter: com.android.ex.chips.RecipientEntry getRecipientEntry(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()> -> _SINK_
<org.apache.commons.logging.LogConfigurationException: java.lang.Throwable getCause()> -> _SINK_
<com.android.server.IntentResolver: java.util.Iterator filterIterator()> -> _SINK_
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.ProximityInfo getProximityInfo()> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account,int,java.lang.String)> -> _SINK_
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: com.android.emailcommon.provider.EmailContent$Attachment[] doInBackground(java.lang.Long[])> -> _SINK_
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)> -> _SINK_
<com.android.deskclock.Utils$ScreensaverMoveSaverRunnable$1: float getInterpolation(float)> -> _SINK_
<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])> -> _SINK_
<android.widget.Chronometer: java.lang.String getFormat()> -> _SINK_
<android.widget.SearchView: java.lang.CharSequence getQueryHint()> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> -> _SINK_
<org.apache.harmony.security.x509.IssuingDistributionPoint: byte[] getEncoded()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: int getAppVolume()> -> _SINK_
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()> -> _SINK_
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)> -> _SINK_
<org.apache.http.entity.BufferedHttpEntity: long getContentLength()> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.String getTextContent()> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.Object getParm(java.lang.String)> -> _SINK_
<com.android.providers.downloads.DownloadProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.android.exchange.adapter.AbstractSyncAdapter: android.content.ContentProviderResult[] safeExecute(java.lang.String,java.util.ArrayList)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlphaMultiplier()> -> _SINK_
<android.media.AudioManager: int getStreamVolume(int)> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardLayoutSet: com.android.inputmethod.keyboard.Keyboard getKeyboard(int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: int getPort()> -> _SINK_
<com.android.internal.app.ResolverActivity$ResolveListAdapter: java.lang.Object getItem(int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: int getChangingConfigurations()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: int getDisplayInitialOrientationDegrees()> -> _SINK_
<java.lang.Class: java.lang.Object[] getSigners()> -> _SINK_
<com.android.internal.database.SortCursor: byte[] getBlob(int)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getClassName(int)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> -> _SINK_
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()> -> _SINK_
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$902(com.android.ex.chips.BaseRecipientAdapter,java.util.List)> -> _SINK_
<android.webkit.WebViewClassic: int getViewWidth()> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.filterfw.core.Frame: android.filterfw.core.Frame release()> -> _SINK_
<android.app.Fragment: android.content.res.Resources getResources()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] getTypesAsString()> -> _SINK_
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> -> _SINK_
<libcore.net.http.HttpEngine: int getResponseCode()> -> _SINK_
<android.os.CommonTimeConfig: byte getMasterElectionPriority()> -> _SINK_
<java.lang.SecurityManager: java.lang.Class currentLoadedClass()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: int getItemId()> -> _SINK_
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SINK_
<android.webkit.WebView$HitTestResult: int getType()> -> _SINK_
<com.android.launcher2.DragView: android.graphics.Point getDragVisualizeOffset()> -> _SINK_
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)> -> _SINK_
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()> -> _SINK_
<com.android.server.usb.UsbDeviceManager: java.lang.String access$400()> -> _SINK_
<android.app.Fragment: android.app.Fragment getParentFragment()> -> _SINK_
<java.security.KeyStore: java.security.Provider getProvider()> -> _SINK_
<javax.xml.validation.ValidatorHandler: boolean getFeature(java.lang.String)> -> _SINK_
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.ActionProvider getActionProvider()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine2()> -> _SINK_
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine1()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> -> _SINK_
<android.app.ActivityManager: int getCurrentUser()> -> _SINK_
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)> -> _SINK_
<android.content.Intent: android.net.Uri getData()> -> _SINK_
<java.util.logging.Handler: java.util.logging.Formatter getFormatter()> -> _SINK_
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.media.AudioTrack: int getPlaybackHeadPosition()> -> _SINK_
<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()> -> _SINK_
<gov.nist.javax.sip.header.TimeStamp: int getTimeDelay()> -> _SINK_
<android.sax.Children: android.sax.Element getOrCreate(android.sax.Element,java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.view.ViewGroup: android.view.View findFocus()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.ChunkOffsetBox getChunkOffsetBox()> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> -> _SINK_
<android.widget.OverScroller: int getFinalX()> -> _SINK_
<android.widget.OverScroller: int getFinalY()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SINK_
<com.android.videoeditor.service.MovieTheme: int getPreviewMovieResId()> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.AudioModel getAudio()> -> _SINK_
<com.google.common.collect.ForwardingMapEntry: java.lang.Object delegate()> -> _SINK_
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: double get()> -> _SINK_
<com.android.emailcommon.TempDirectory: java.io.File getTempDirectory()> -> _SINK_
<com.android.mms.MmsConfig: int getMaxImageHeight()> -> _SINK_
<android.animation.LayoutTransition: long getStagger(int)> -> _SINK_
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)> -> _SINK_
<android.graphics.drawable.Drawable: int[] getState()> -> _SINK_
<com.android.launcher2.ButtonDropTarget: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> -> _SINK_
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> -> _SINK_
<java.util.Date: int getTimezoneOffset()> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getSentBy()> -> _SINK_
<gov.nist.javax.sip.header.TimeStamp: float getTimeStamp()> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.Object getApplicationData()> -> _SINK_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SINK_
<android.drm.mobile1.DrmRightsManager: java.util.List getRightsList()> -> _SINK_
<android.renderscript.Program$BaseProgramBuilder: int getCurrentTextureIndex()> -> _SINK_
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> -> _SINK_
<java.lang.Class: java.lang.Object[] getEnumConstants()> -> _SINK_
<java.nio.LongArrayBuffer: java.nio.LongBuffer get(long[],int,int)> -> _SINK_
<java.util.LinkedList: java.lang.Object getLast()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getBlockNetworkLoads()> -> _SINK_
<org.apache.harmony.security.fortress.Services: java.security.Provider getProvider(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.MultipartMimeContentImpl: java.util.Iterator getContents()> -> _SINK_
<gov.nist.javax.sip.header.ProxyRequire: java.lang.String getOptionTag()> -> _SINK_
<android.app.ITransientNotification$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.http.impl.cookie.RFC2109Spec: org.apache.http.Header getVersionHeader()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: java.lang.String getContentType()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()> -> _SINK_
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getLabelWidth()> -> _SINK_
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> -> _SINK_
<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()> -> _SINK_
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int)> -> _SINK_
<android.view.GLES20Canvas: android.graphics.DrawFilter getDrawFilter()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()> -> _SINK_
<android.widget.SimpleAdapter: android.widget.Filter getFilter()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()> -> _SINK_
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<java.lang.AbstractStringBuilder: char[] getValue()> -> _SINK_
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.RAck: java.lang.String getMethod()> -> _SINK_
<com.android.mms.MmsApp: android.drm.DrmManagerClient getDrmManagerClient()> -> _SINK_
<com.android.email.VendorPolicyLoader: com.android.email.VendorPolicyLoader getInstance(android.content.Context)> -> _SINK_
<java.lang.ProcessManager$ProcessImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay getRememberedWifiDisplay(java.lang.String)> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$3: java.lang.String get()> -> _SINK_
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$4: java.lang.String get()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$5: java.lang.String get()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getResponseMessage()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef: org.apache.http.conn.routing.HttpRoute getRoute()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$1: java.lang.String get()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$2: java.lang.String get()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$8: java.lang.String get()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$9: java.lang.String get()> -> _SINK_
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> -> _SINK_
<com.android.org.bouncycastle.asn1.DEREnumerated: java.math.BigInteger getValue()> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$6: java.lang.String get()> -> _SINK_
<android.support.v4.view.PagerAdapter: int getItemPosition(java.lang.Object)> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkVars$7: java.lang.String get()> -> _SINK_
<com.coremedia.iso.boxes.SampleDependencyTypeBox: java.util.List getEntries()> -> _SINK_
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)> -> _SINK_
<libcore.net.http.RawHeaders: libcore.net.http.RawHeaders getAll(java.util.Set)> -> _SINK_
<java.util.Locale: java.lang.String getCountry()> -> _SINK_
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> -> _SINK_
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: int getMinimumWidth()> -> _SINK_
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object getApplicationData()> -> _SINK_
<java.util.ArrayDeque: java.lang.Object getLast()> -> _SINK_
<com.android.server.PackageManagerBackupAgent: com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String)> -> _SINK_
<android.view.Window: int getFeatures()> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getMimeType()> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getPhoneNumber()> -> _SINK_
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)> -> _SINK_
<android.filterpacks.imageproc.BitmapOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: com.google.android.picasasync.UploadTaskEntry createNew(android.content.ContentValues,int)> -> _SINK_
<com.android.launcher2.CellLayout: float getDistanceFromCell(float,float,int[])> -> _SINK_
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])> -> _SINK_
<android.graphics.Region: android.graphics.Rect getBounds()> -> _SINK_
<com.android.mms.model.LayoutModel: java.util.ArrayList getRegions()> -> _SINK_
<android.view.ViewGroup: int getPersistentDrawingCache()> -> _SINK_
<android.app.ListActivity: int getSelectedItemPosition()> -> _SINK_
<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()> -> _SINK_
<java.lang.String: byte[] getBytes()> -> _SINK_
<android.widget.VideoView: int getDuration()> -> _SINK_
<android.renderscript.Mesh: int getPrimitiveCount()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlDefaultFieldOfViewDegrees()> -> _SINK_
<javax.obex.ObexHelper: byte[] getTagValue(byte,byte[])> -> _SINK_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle$Control)> -> _SINK_
<java.text.DateFormat: java.lang.String format(java.util.Date)> -> _SINK_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: int getRetransmitTimer()> -> _SINK_
<android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options,android.net.Uri,boolean)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)> -> _SINK_
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: long getAppDuration()> -> _SINK_
<com.android.server.wm.WindowState: int getSystemUiVisibility()> -> _SINK_
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterX()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterY()> -> _SINK_
<com.android.mms.model.SlideModel: int getSlideSize()> -> _SINK_
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.TrackHeaderBox getTrackHeaderBox()> -> _SINK_
<com.android.email.NotificationController: android.text.SpannableString getNewMessageTitle(java.lang.String,int)> -> _SINK_
<libcore.io.EventLogger: libcore.io.EventLogger$Reporter getReporter()> -> _SINK_
<android.view.IInputFilterHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageCleanItem nextPackageToClean(android.content.pm.PackageCleanItem)> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<android.media.videoeditor.Overlay: java.util.Map getUserAttributes()> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.Element getDocumentElement()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int)> -> _SINK_
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<java.net.InetSocketAddress: int getPort()> -> _SINK_
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()> -> _SINK_
<com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context,com.android.internal.net.VpnConfig)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<android.view.View: float getCameraDistance()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> -> _SINK_
<android.content.ContextWrapper: java.io.File getCacheDir()> -> _SINK_
<android.view.ViewRootImpl$2: android.view.Surface getSurface()> -> _SINK_
<gov.nist.core.NameValue: java.lang.Object getValueAsObject()> -> _SINK_
<com.android.ex.chips.RecipientEntry: java.lang.String getDestinationLabel()> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsCache: com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsParams getSuggestionsFromCache(java.lang.String,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: java.lang.Object get()> -> _SINK_
<android.renderscript.BaseObj: int getID(android.renderscript.RenderScript)> -> _SINK_
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable getIcon(android.content.res.Resources,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.message.SIPRequest createRequest(gov.nist.javax.sip.address.SipUri,gov.nist.javax.sip.header.Via,gov.nist.javax.sip.header.CSeq,gov.nist.javax.sip.header.From,gov.nist.javax.sip.header.To)> -> _SINK_
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getX(android.view.MotionEvent,int)> -> _SINK_
<android.mtp.MtpObjectInfo: int getAssociationDesc()> -> _SINK_
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getY(android.view.MotionEvent,int)> -> _SINK_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()> -> _SINK_
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getName()> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumHeight()> -> _SINK_
<android.media.videoeditor.AudioTrack: int getAudioBitrate()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getCallState()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getSecond()> -> _SINK_
<android.widget.Spinner$DropDownAdapter: int getCount()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()> -> _SINK_
<android.app.IThumbnailRetriever$Stub$Proxy: android.graphics.Bitmap getThumbnail(int)> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getSystemId()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()> -> _SINK_
<gov.nist.javax.sip.header.AlertInfo: javax.sip.address.URI getAlertInfo()> -> _SINK_
<android.media.IRemoteVolumeObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.view.KeyEvent: char getNumber()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllTransitions()> -> _SINK_
<com.android.email.activity.UIControllerBase: long getActualAccountId()> -> _SINK_
<android.content.Entity: java.util.ArrayList getSubValues()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: javax.sip.header.Header getFirst()> -> _SINK_
<android.widget.LinearLayout: int getChildrenSkipCount(android.view.View,int)> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: java.lang.String getSipCallOption()> -> _SINK_
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> -> _SINK_
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ImplForVariable parseTypeVariableSignature()> -> _SINK_
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> -> _SINK_
<android.net.sip.SimpleSessionDescription: int getBandwidth(java.lang.String)> -> _SINK_
<android.os.UserManager: java.util.List getUsers()> -> _SINK_
<com.android.mms.MmsConfig: int getMaxMessageSize()> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getAboveUniverseLayer()> -> _SINK_
<android.preference.ListPreference: java.lang.CharSequence getSummary()> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()> -> _SINK_
<android.os.Environment: java.io.File getUserSystemDirectory(int)> -> _SINK_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.res.Resources)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAngularVelocitySquaredRad()> -> _SINK_
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getPanoDirectory()> -> _SINK_
<android.widget.TabHost$FactoryContentStrategy: android.view.View getContentView()> -> _SINK_
<com.android.mms.data.Conversation: int getMessageCount()> -> _SINK_
<com.google.common.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries$1$1: java.lang.Object getKey()> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getQop()> -> _SINK_
<java.nio.charset.Charset: java.util.Set aliases()> -> _SINK_
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getChangedRoot()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection getDialogs()> -> _SINK_
<org.apache.http.entity.BasicHttpEntity: long getContentLength()> -> _SINK_
<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)> -> _SINK_
<org.apache.harmony.security.x509.InfoAccessSyntax: byte[] getEncoded()> -> _SINK_
<com.android.launcher2.ButtonDropTarget: android.graphics.drawable.Drawable getCurrentDrawable()> -> _SINK_
<android.os.PatternMatcher: java.lang.String getPath()> -> _SINK_
<android.widget.TimePicker: java.lang.Integer getCurrentHour()> -> _SINK_
<android.view.KeyEvent: int getAction()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: boolean getEkfEnabled()> -> _SINK_
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getContentAlpha()> -> _SINK_
<android.app.ActivityManagerProxy: int getProcessLimit()> -> _SINK_
<android.os.storage.IMountServiceListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.util.XmlPullAttributes: int getStyleAttribute()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte)> -> _SINK_
<android.view.View: android.view.DisplayList getDisplayList()> -> _SINK_
<android.filterfw.core.FilterFactory: android.filterfw.core.Filter createFilterByClassName(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.NotificationController$NotificationThread: android.os.Looper getLooper()> -> _SINK_
<com.android.emailcommon.mail.Address: java.lang.String getAddress()> -> _SINK_
<android.widget.ViewAnimator: android.view.View getCurrentView()> -> _SINK_
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.os.IBinder getFocusedWindowToken()> -> _SINK_
<java.net.PlainSocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<com.android.launcher2.Workspace: java.lang.String getCurrentPageDescription()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()> -> _SINK_
<android.graphics.drawable.ColorDrawable: int getAlpha()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: float getParameterAsFloat(java.lang.String)> -> _SINK_
<dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()> -> _SINK_
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> -> _SINK_
<java.nio.HeapByteBuffer: float getFloat(int)> -> _SINK_
<android.widget.PopupWindow: int getWidth()> -> _SINK_
<org.apache.harmony.security.x509.OtherName: byte[] getEncoded()> -> _SINK_
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getTimeChildren()> -> _SINK_
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Date getNotAfter()> -> _SINK_
<javax.crypto.ExemptionMechanism: java.lang.String getName()> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: int getCursorCapsMode(int)> -> _SINK_
<com.google.common.collect.ImmutableMap: java.util.Set entrySet()> -> _SINK_
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(java.lang.Object)> -> _SINK_
<com.android.mms.data.Conversation: long getDate()> -> _SINK_
<com.android.email.activity.MessageList: android.content.Intent createFroyoIntent(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager,javax.sip.header.HeaderFactory)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)> -> _SINK_
<java.io.SerializablePermission: java.lang.String getActions()> -> _SINK_
<libcore.net.http.HttpEngine: java.lang.String getDefaultUserAgent()> -> _SINK_
<com.android.camera.drawable.TextDrawable: int getOpacity()> -> _SINK_
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> -> _SINK_
<android.text.method.QwertyKeyListener: int getInputType()> -> _SINK_
<android.webkit.WebView: android.graphics.Bitmap getFavicon()> -> _SINK_
<java.text.DateFormat: java.util.TimeZone getTimeZone()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: int[] getPorts()> -> _SINK_
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)> -> _SINK_
<android.content.pm.ContainerEncryptionParams: long getEncryptedDataStart()> -> _SINK_
<android.app.ContextImpl: java.lang.String getPackageResourcePath()> -> _SINK_
<org.apache.harmony.security.x509.Extension: boolean getCritical()> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)> -> _SINK_
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getServiceDescriptor()> -> _SINK_
<android.content.Loader: java.lang.String toString()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getWidth()> -> _SINK_
<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)> -> _SINK_
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$ZInterpolator: float getInterpolation(float)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)> -> _SINK_
<android.app.BackStackRecord: int getTransition()> -> _SINK_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> -> _SINK_
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getHandling()> -> _SINK_
<android.webkit.WebSettingsClassic: java.lang.String getPluginsPath()> -> _SINK_
<android.view.KeyEvent: char getDisplayLabel()> -> _SINK_
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()> -> _SINK_
<org.apache.http.message.BasicStatusLine: org.apache.http.ProtocolVersion getProtocolVersion()> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.MainKeyboardView getMainKeyboardView()> -> _SINK_
<android.view.IOnKeyguardExitResult$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.view.Surface: android.os.IBinder getBuiltInDisplay(int)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Boolean getPropertyBoolean(java.lang.String,java.lang.String)> -> _SINK_
<com.android.launcher2.FolderIcon: boolean getTextVisible()> -> _SINK_
<android.media.videoeditor.MediaVideoItem: long getBoundaryEndTime()> -> _SINK_
<android.view.MotionEvent: float getHistoricalY(int)> -> _SINK_
<android.view.MotionEvent: float getHistoricalX(int)> -> _SINK_
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SINK_
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayWidth(int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguageList: gov.nist.javax.sip.header.AcceptLanguage getLast()> -> _SINK_
<com.android.videoeditor.service.IntentPool: android.content.Intent get(android.content.Context,java.lang.Class)> -> _SINK_
<java.net.JarURLConnection: java.net.URL getJarFileURL()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: int getStartPositionMillis()> -> _SINK_
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()> -> _SINK_
<android.preference.PreferenceActivity$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<java.io.ObjectStreamField: java.lang.String getName()> -> _SINK_
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: java.lang.CharSequence getAddToDictionaryWord()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.security.cert.Certificate[] getPeerCertificates()> -> _SINK_
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getSavedIpAddress()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: int getRemoteSequenceNumber()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumWidth()> -> _SINK_
<android.app.ContextImpl$20: java.lang.Object getService(android.app.ContextImpl)> -> _SINK_
<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithmName()> -> _SINK_
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignedData$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.drm.DrmInfo: int getInfoType()> -> _SINK_
<com.coremedia.iso.boxes.StaticChunkOffsetBox: long getContentSize()> -> _SINK_
<android.media.videoeditor.Effect: java.lang.String getId()> -> _SINK_
<com.android.launcher2.PagedView: int getCurrentPage()> -> _SINK_
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: double getOffsetTime()> -> _SINK_
<com.android.mms.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<android.app.WallpaperManager: int getDesiredMinimumHeight()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()> -> _SINK_
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: int[] getTopEdge()> -> _SINK_
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,int,android.os.UserHandle,boolean)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Null: com.android.org.bouncycastle.asn1.ASN1Null getInstance(java.lang.Object)> -> _SINK_
<com.google.common.collect.ImmutableList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: gov.nist.javax.sip.message.SIPMessage getSIPMessage()> -> _SINK_
<android.media.videoeditor.TransitionAlpha: java.lang.String getMaskFilename()> -> _SINK_
<com.android.camera.CameraHolder: int getFrontCameraId()> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: int getItemViewType(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.PinListEntry: java.lang.String getCommonName()> -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: int getPolicyMask()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getSaveFormData()> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray)> -> _SINK_
<com.android.server.am.CoreSettingsObserver: android.os.Bundle getCoreSettingsLocked()> -> _SINK_
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> -> _SINK_
<android.view.KeyEvent: int getFlags()> -> _SINK_
<com.android.mms.transaction.SmsReceiver: com.android.mms.transaction.SmsReceiver getInstance()> -> _SINK_
<android.filterfw.geometry.Quad: float getBoundingWidth()> -> _SINK_
<java.util.zip.ZipEntry: long getTime()> -> _SINK_
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SINK_
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()> -> _SINK_
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.view.FocusFinder: android.view.FocusFinder getInstance()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[][] internalZoneStrings()> -> _SINK_
<android.webkit.WebSettings: boolean getAllowFileAccess()> -> _SINK_
<com.android.internal.util.StateMachine: int getLogRecSize()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getId()> -> _SINK_
<android.inputmethodservice.Keyboard: int getMinWidth()> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RAckHeader createRAckHeader(int,int,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> -> _SINK_
<android.content.res.TypedArray: int getInt(int,int)> -> _SINK_
<android.filterfw.core.FrameManager: android.filterfw.core.FilterContext getContext()> -> _SINK_
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getBoundary()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getParent()> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)> -> _SINK_
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineGetIV()> -> _SINK_
<com.coremedia.iso.boxes.MediaHeaderBox: long getDuration()> -> _SINK_
<android.widget.ImageView: int getMaxHeight()> -> _SINK_
<java.nio.DatagramChannelImpl: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.view.ViewConfiguration: int getLongPressTimeout()> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: int getStartOffset()> -> _SINK_
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryBeginTime()> -> _SINK_
<java.net.HttpRetryException: java.lang.String getReason()> -> _SINK_
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: float getWindowCompatibilityScale(android.os.IBinder)> -> _SINK_
<android.app.Activity: android.app.Application getApplication()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: byte[] getEncoded()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Null: java.lang.String toString()> -> _SINK_
<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.util.ListIterator listIterator()> -> _SINK_
<android.view.GLES20TextureLayer: android.view.HardwareCanvas getCanvas()> -> _SINK_
<android.webkit.WebViewClassic: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _SINK_
<gov.nist.core.HostPort: int getPort()> -> _SINK_
<com.android.emailcommon.mail.Folder: java.lang.String toString()> -> _SINK_
<java.util.TreeMap$Node: java.lang.Object getKey()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestMD5withoutLast()> -> _SINK_
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: java.lang.String getParameter(java.lang.String)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)> -> _SINK_
<android.webkit.WebSettingsClassic: int getUserAgent()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float getScrollProgress(int,android.view.View,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)> -> _SINK_
<java.util.FormatFlagsConversionMismatchException: char getConversion()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getFilterOutput()> -> _SINK_
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getAccessibilityRootNode()> -> _SINK_
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()> -> _SINK_
<com.android.launcher2.Workspace: float getBackgroundAlpha()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()> -> _SINK_
<javax.crypto.Cipher: int getOutputSize(int)> -> _SINK_
<java.lang.reflect.Field: short getShort(java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: gov.nist.core.NameValueList getParameters()> -> _SINK_
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()> -> _SINK_
<android.view.View: int getScrollY()> -> _SINK_
<android.view.View: int getScrollX()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getScrollY()> -> _SINK_
<gov.nist.javax.sip.header.ContentType: java.lang.String getContentType()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: int getScrollX()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getContentType()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int,int)> -> _SINK_
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()> -> _SINK_
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getMimeType()> -> _SINK_
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> -> _SINK_
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> -> _SINK_
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getSelectedItemsNum()> -> _SINK_
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getEndDate()> -> _SINK_
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<com.google.common.collect.TreeMultiset$LiveEntry: java.lang.Object getElement()> -> _SINK_
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SINK_
<java.security.KeyStore: java.lang.String getType()> -> _SINK_
<com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()> -> _SINK_
<com.android.mms.util.Recycler$MmsRecycler: long getThreadId(android.database.Cursor)> -> _SINK_
<android.widget.Spinner$DropDownAdapter: int getItemViewType(int)> -> _SINK_
<com.google.android.picasasync.PrefetchHelper$PrefetchContext: int getDownloadFailCount()> -> _SINK_
<com.android.ex.chips.BaseRecipientAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: int getHeight()> -> _SINK_
<android.graphics.drawable.Drawable: int getLayoutDirection()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createRequest(java.lang.String)> -> _SINK_
<android.media.videoeditor.MediaProperties: int[] getAllSupportedAspectRatios()> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getInviteTransaction()> -> _SINK_
<android.content.ContextWrapper: android.os.Looper getMainLooper()> -> _SINK_
<android.hardware.Sensor: int getMinDelay()> -> _SINK_
<android.os.Debug: int getGlobalExternalFreedSize()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)> -> _SINK_
<com.google.android.picasasync.PicasaSyncHelper: java.util.ArrayList getUsers()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<java.nio.charset.CharsetDecoder: java.lang.String replacement()> -> _SINK_
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getFirst(int)> -> _SINK_
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)> -> _SINK_
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<java.net.SocketImpl: java.lang.String toString()> -> _SINK_
<org.apache.harmony.security.x509.PolicyInformation: java.lang.String getPolicyIdentifier()> -> _SINK_
<libcore.icu.TimeZones$ZoneStringsCache: java.lang.Object create(java.lang.Object)> -> _SINK_
<android.hardware.Sensor: float getResolution()> -> _SINK_
<android.app.ExpandableListActivity: long getSelectedPosition()> -> _SINK_
<android.view.MotionEvent: int getEdgeFlags()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes()> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: float getInitialRate()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNode(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength()> -> _SINK_
<java.util.logging.Logger: java.lang.String getResourceBundleName()> -> _SINK_
<android.widget.TextView: float getShadowDx()> -> _SINK_
<android.widget.TextView: float getShadowDy()> -> _SINK_
<java.nio.IntArrayBuffer: int get(int)> -> _SINK_
<java.nio.ServerSocketChannelImpl: java.io.FileDescriptor getFD()> -> _SINK_
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<com.android.mms.ui.ChipsRecipientAdapter: int getItemLayout()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()> -> _SINK_
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.Calendar getCalendar()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<android.widget.TextView: int getExtendedPaddingBottom()> -> _SINK_
<android.widget.ImageView: boolean getAdjustViewBounds()> -> _SINK_
<android.filterfw.core.FrameManager: android.filterfw.core.GLEnvironment getGLEnvironment()> -> _SINK_
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)> -> _SINK_
<android.widget.TextView: java.util.Locale getTextServicesLocale()> -> _SINK_
<com.android.mms.MmsConfig: int getMaxSizeScaleForPendingMmsAllowed()> -> _SINK_
<android.widget.TextView: float getTextSize()> -> _SINK_
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)> -> _SINK_
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getViewTypeCount()> -> _SINK_
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation,java.lang.Runnable)> -> _SINK_
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)> -> _SINK_
<android.media.AudioTrack: int getPlaybackRate()> -> _SINK_
<org.apache.http.conn.HttpHostConnectException: org.apache.http.HttpHost getHost()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)> -> _SINK_
<android.app.PendingIntent: java.lang.String getCreatorPackage()> -> _SINK_
<com.android.mms.ui.DeliveryReportActivity$MmsReportRequest: java.lang.String getRecipient()> -> _SINK_
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SINK_
<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()> -> _SINK_
<com.android.mms.ui.RecipientsEditor: int getRecipientCount()> -> _SINK_
<gov.nist.core.DuplicateNameValueList: java.lang.String getParameter(java.lang.String)> -> _SINK_
<android.view.ScaleGestureDetector: long getTimeDelta()> -> _SINK_
<android.animation.Keyframe$FloatKeyframe: java.lang.Object getValue()> -> _SINK_
<android.widget.NumberPicker: int getValue()> -> _SINK_
<android.view.MotionEvent: float getTouchMinor()> -> _SINK_
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)> -> _SINK_
<android.widget.HorizontalScrollView: int getMaxScrollAmount()> -> _SINK_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)> -> _SINK_
<android.view.animation.Animation: float getScaleFactor()> -> _SINK_
<android.provider.Telephony$Mms: java.lang.String getMessageBoxName(int)> -> _SINK_
<java.security.KeyStore$PasswordProtection: char[] getPassword()> -> _SINK_
<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()> -> _SINK_
<android.media.MiniThumbFile: long getMagic(long)> -> _SINK_
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: int getContentLength()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getAlgorithm()> -> _SINK_
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SINK_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()> -> _SINK_
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> -> _SINK_
<android.preference.RingtonePreference: boolean getShowSilent()> -> _SINK_
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getMonth()> -> _SINK_
<java.io.ObjectStreamField: java.lang.Class getType()> -> _SINK_
<org.apache.harmony.security.pkcs7.SignedData: int getVersion()> -> _SINK_
<android.view.ScaleGestureDetector: float getScaleFactor()> -> _SINK_
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()> -> _SINK_
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> -> _SINK_
<android.media.MediaRouter$RouteInfo: int getPlaybackStream()> -> _SINK_
<java.nio.ByteBuffer: java.lang.Object array()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.util.Date getNotAfter()> -> _SINK_
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocol()> -> _SINK_
<java.io.ObjectStreamClass: long getSerialVersionUID()> -> _SINK_
<com.android.mms.transaction.TransactionState: int getState()> -> _SINK_
<android.webkit.CallbackProxy: int getProgress()> -> _SINK_
<com.android.mms.util.Recycler$SmsRecycler: int getMessageLimit(android.content.Context)> -> _SINK_
<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicyViolation()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: libcore.net.http.HttpEngine getHttpEngine()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpResponse receiveResponseHeader()> -> _SINK_
<android.view.Display: int getHeight()> -> _SINK_
<android.content.pm.VerificationParams: int getInstallerUid()> -> _SINK_
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)> -> _SINK_
<android.widget.TabHost: int getCurrentTab()> -> _SINK_
<android.filterpacks.imageproc.TintFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.webkit.CacheManager$CacheResult: int getHttpStatusCode()> -> _SINK_
<com.google.common.collect.BstNode: com.google.common.collect.BstNode getChild(com.google.common.collect.BstSide)> -> _SINK_
<android.webkit.WebViewClassic: int getHeight()> -> _SINK_
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.google.android.mms.pdu.PduBody)> -> _SINK_
<android.animation.ValueAnimator: int getRepeatMode()> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)> -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie2: java.lang.String getCommentURL()> -> _SINK_
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getChildIndexForRelativeOffset(int)> -> _SINK_
<android.widget.ZoomButtonsController: android.view.View getZoomControls()> -> _SINK_
<org.apache.harmony.security.x509.InvalidityDate: byte[] getEncoded()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Any: int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<libcore.icu.NativeBreakIterator: java.text.CharacterIterator getText()> -> _SINK_
<com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()> -> _SINK_
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)> -> _SINK_
<java.io.EmulatedFieldsForLoading: byte get(java.lang.String,byte)> -> _SINK_
<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()> -> _SINK_
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()> -> _SINK_
<java.text.BreakIterator: java.util.Locale[] getAvailableLocales()> -> _SINK_
<android.text.DynamicLayout: int getBottomPadding()> -> _SINK_
<com.android.email.mail.store.imap.ImapString: byte[] access$000()> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint[] getListeningPoints()> -> _SINK_
<com.android.launcher2.LauncherViewPropertyAnimator: long getDuration()> -> _SINK_
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent getContent(android.database.Cursor,java.lang.Class)> -> _SINK_
<com.android.soundrecorder.Recorder: int getMaxAmplitude()> -> _SINK_
<gov.nist.javax.sip.header.RetryAfter: int getDuration()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionX()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionY()> -> _SINK_
<android.drm.mobile1.DrmConstraintInfo: long getInterval()> -> _SINK_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<com.google.android.apps.lightcycle.xmp.XmpUtil: com.adobe.xmp.XMPMeta createXMPMeta()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()> -> _SINK_
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> -> _SINK_
<com.android.internal.app.ActionBarImpl: int getDisplayOptions()> -> _SINK_
<com.android.internal.backup.LocalTransport: long getCurrentRestoreSet()> -> _SINK_
<android.view.Display: java.lang.String getAddress()> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingProtocol()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object[] toArray()> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()> -> _SINK_
<android.view.View: android.graphics.drawable.Drawable getBackground()> -> _SINK_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> -> _SINK_
<android.widget.TextView$Marquee: float getMaxFadeScroll()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: long getProjectDuration()> -> _SINK_
<com.android.email.Preferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)> -> _SINK_
<android.view.AccessibilityInteractionController$PrivateHandler: java.lang.String getMessageName(android.os.Message)> -> _SINK_
<com.android.email.activity.InsertQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getOriginalState()> -> _SINK_
<com.coremedia.iso.boxes.HandlerBox: java.lang.String getName()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromViewToParent(android.view.View,float,float)> -> _SINK_
<android.filterfw.core.FilterFunction: android.filterfw.core.Filter getFilter()> -> _SINK_
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()> -> _SINK_
<android.widget.SimpleAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)> -> _SINK_
<android.text.style.AbsoluteSizeSpan: int getSize()> -> _SINK_
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)> -> _SINK_
<com.adobe.xmp.impl.XMPNodeUtils: java.lang.String serializeNodeValue(java.lang.Object)> -> _SINK_
<android.webkit.WebBackForwardListClassic: boolean getClearPending()> -> _SINK_
<libcore.net.http.RequestHeaders: java.lang.String getProxyAuthorization()> -> _SINK_
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.DHParameters: byte[] getPrime()> -> _SINK_
<android.app.IInstrumentationWatcher$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.SimpleAdapter: long getItemId(int)> -> _SINK_
<javax.obex.ServerOperation: int getMaxPacketSize()> -> _SINK_
<android.widget.AbsSeekBar: int getThumbOffset()> -> _SINK_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)> -> _SINK_
<java.nio.DirectByteBuffer: short getShort()> -> _SINK_
<android.renderscript.Element: int getSubElementCount()> -> _SINK_
<com.android.email.activity.setup.SetupData: java.lang.String getUsername()> -> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: long getDuration()> -> _SINK_
<android.filterpacks.imageproc.PosterizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.TextView: int getCompoundPaddingLeft()> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: long getCurrentRestoreSet()> -> _SINK_
<android.text.util.Rfc822Token: java.lang.String getName()> -> _SINK_
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()> -> _SINK_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()> -> _SINK_
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object getState()> -> _SINK_
<android.webkit.WebHistoryItem: java.lang.String getTitle()> -> _SINK_
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> -> _SINK_
<android.webkit.PluginManager: java.lang.String getPluginSharedDataDirectory()> -> _SINK_
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SINK_
<android.opengl.EGLObjectHandle: int getHandle()> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getInputEncoding()> -> _SINK_
<android.filterfw.core.SimpleFrame: int[] getInts()> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: int getValidOptions()> -> _SINK_
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> -> _SINK_
<java.lang.Class: java.lang.String getCanonicalName()> -> _SINK_
<android.text.method.CharacterPickerDialog$OptionsAdapter: long getItemId(int)> -> _SINK_
<com.android.systemui.statusbar.phone.Ticker$Segment: android.text.StaticLayout getLayout(java.lang.CharSequence)> -> _SINK_
<java.text.Format: java.lang.String format(java.lang.Object)> -> _SINK_
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()> -> _SINK_
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()> -> _SINK_
<android.preference.Preference: android.content.Intent getIntent()> -> _SINK_
<java.lang.Throwable: java.lang.String getMessage()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getValue()> -> _SINK_
<com.android.camera.ComboPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)> -> _SINK_
<android.app.SearchableInfo: int getVoiceLanguageModeId()> -> _SINK_
<android.view.animation.OvershootInterpolator: float getInterpolation(float)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboard: int getDefaultCoordX()> -> _SINK_
<com.android.server.sip.SipSessionGroup$MakeCallCommand: android.net.sip.SipProfile getPeerProfile()> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumWidth()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()> -> _SINK_
<android.view.ViewRootImpl: android.view.View getView()> -> _SINK_
<com.android.phone.PhoneGlobals: android.app.Activity getPUKEntryActivity()> -> _SINK_
<com.android.deskclock.timer.TimerFragment: com.android.deskclock.timer.TimerFragment$TimersListAdapter createAdapter(android.content.Context,android.content.SharedPreferences)> -> _SINK_
<com.android.mms.dom.smil.TimeImpl: double getResolvedOffset()> -> _SINK_
<com.android.internal.app.ResolverActivity$ResolveListAdapter: long getItemId(int)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebBackForwardListClient getWebBackForwardListClient()> -> _SINK_
<android.content.ISyncContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getPrefix()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry()> -> _SINK_
<android.graphics.Bitmap: int getDefaultDensity()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryEndTime()> -> _SINK_
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<java.util.regex.PatternSyntaxException: int getIndex()> -> _SINK_
<android.hardware.input.IInputManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.phone.CdmaPhoneCallState: boolean getAddCallMenuStateAfterCallWaiting()> -> _SINK_
<com.android.exchange.ExchangeService: java.lang.String getDeviceId(android.content.Context)> -> _SINK_
<android.widget.ExpandableListConnector: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> -> _SINK_
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)> -> _SINK_
<com.android.server.NativeDaemonConnector: java.util.ArrayList doCommand(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: int getAction()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getContentEncoding()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<android.webkit.WebStorage$Origin: long getQuota()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getSentProtocolField()> -> _SINK_
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int)> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: int getAspectRatio()> -> _SINK_
<org.apache.http.impl.auth.DigestScheme: java.lang.String getSchemeName()> -> _SINK_
<android.app.ActivityManager: int getLargeMemoryClass()> -> _SINK_
<android.view.MotionEvent: float getOrientation()> -> _SINK_
<android.os.Bundle: int[] getIntArray(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$2: float getInterpolation(float)> -> _SINK_
<android.view.InputDevice: java.lang.String getDescriptor()> -> _SINK_
<com.android.server.AppWidgetService: int[] getAppWidgetIds(android.content.ComponentName)> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$3: float getInterpolation(float)> -> _SINK_
<java.text.CollationElementIterator: int getOffset()> -> _SINK_
<android.widget.CursorAdapter: int getCount()> -> _SINK_
<java.math.BigInt: int getNativeBIGNUM()> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(java.io.InputStream)> -> _SINK_
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)> -> _SINK_
<javax.sip.IOExceptionEvent: java.lang.String getTransport()> -> _SINK_
<android.net.LocalSocketAddress$Namespace: int getId()> -> _SINK_
<android.widget.SimpleAdapter: int getCount()> -> _SINK_
<android.view.animation.Animation: boolean getFillAfter()> -> _SINK_
<android.app.LoadedApk: java.lang.String getResDir()> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector()> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: java.net.Proxy getProxy()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getViaHost()> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: long getItemId(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getBandwidthTypes()> -> _SINK_
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()> -> _SINK_
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)> -> _SINK_
<com.android.videoeditor.service.MovieTransition: java.lang.String getId()> -> _SINK_
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getHost()> -> _SINK_
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> -> _SINK_
<android.hardware.display.IDisplayManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.preference.PreferenceGroupAdapter: int getViewTypeCount()> -> _SINK_
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getTextRegion()> -> _SINK_
<junit.framework.TestCase: junit.framework.TestResult createResult()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerName()> -> _SINK_
<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SINK_
<android.filterfw.core.Frame: int getRefCount()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl$HttpsEngine: javax.net.ssl.SSLSocketFactory getSslSocketFactory()> -> _SINK_
<android.widget.ExpandableListConnector: android.widget.ExpandableListAdapter getAdapter()> -> _SINK_
<android.renderscript.Mesh: android.renderscript.Mesh$Primitive getPrimitive(int)> -> _SINK_
<android.filterfw.core.NativeBuffer: int getElementSize()> -> _SINK_
<com.google.android.gms.panorama.internal.IPanoramaCallbacks$Stub: android.os.IBinder asBinder()> -> _SINK_
<org.apache.harmony.security.x509.CRLDistributionPoints$1: java.util.Collection getValues(java.lang.Object)> -> _SINK_
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context,int)> -> _SINK_
<android.webkit.WebSettingsClassic: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.DuplicateNameValueList getMultiParameters()> -> _SINK_
<org.xml.sax.helpers.NewInstance: java.lang.ClassLoader getClassLoader()> -> _SINK_
<dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()> -> _SINK_
<com.android.camera.CameraActivity: long getJpegCallbackFinishTime()> -> _SINK_
<android.content.Intent: android.os.Bundle getExtras()> -> _SINK_
<android.media.AudioRecord: int getAudioSource()> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.view.View getHeaderView()> -> _SINK_
<gov.nist.javax.sip.header.Unsupported: java.lang.String getOptionTag()> -> _SINK_
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()> -> _SINK_
<android.emoji.EmojiFactory: java.lang.String getAndroidPuaFromVendorSpecificPua(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -> _SINK_
<android.util.EventLog$Event: int getThreadId()> -> _SINK_
<com.android.exchange.adapter.MoveItemsParser: int getStatusCode()> -> _SINK_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)> -> _SINK_
<com.google.android.mms.util.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.view.animation.Animation: boolean getFillBefore()> -> _SINK_
<android.app.SearchManager: java.util.List getGlobalSearchActivities()> -> _SINK_
<org.json.JSONArray: double getDouble(int)> -> _SINK_
<android.os.Debug$MemoryInfo: int getOtherPrivateDirty(int)> -> _SINK_
<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)> -> _SINK_
<java.io.EmulatedFields$ObjectSlot: java.lang.Object getFieldValue()> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider: long getAccountIdByName(android.content.Context,java.lang.String)> -> _SINK_
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(android.widget.ExpandableListPosition)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> -> _SINK_
<android.webkit.WebStorageClassic: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)> -> _SINK_
<java.net.InetAddress: java.lang.String getHostName()> -> _SINK_
<android.preference.Preference: int getWidgetLayoutResource()> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getMountedObbPath(java.lang.String)> -> _SINK_
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()> -> _SINK_
<libcore.net.http.RawHeaders: java.lang.String get(java.lang.String)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getViewAt(int)> -> _SINK_
<org.apache.http.impl.cookie.RFC2965Spec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> -> _SINK_
<android.preference.PreferenceFragment: android.widget.ListView getListView()> -> _SINK_
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getRemotePort()> -> _SINK_
<android.preference.DialogPreference: int getDialogLayoutResource()> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: javax.net.ssl.SSLSession getSSLSession()> -> _SINK_
<gov.nist.javax.sip.header.SubscriptionState: int getRetryAfter()> -> _SINK_
<android.widget.AdapterViewAnimator: android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(android.view.View)> -> _SINK_
<android.view.VelocityTracker: float getXVelocity()> -> _SINK_
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getLabel(java.lang.String)> -> _SINK_
<android.view.animation.Animation: long computeDurationHint()> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: int getProfilesCount()> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getIdAttribute()> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicWidth()> -> _SINK_
<com.android.launcher2.Workspace: android.view.View getViewForTag(java.lang.Object)> -> _SINK_
<java.net.HttpURLConnection: int getResponseCode()> -> _SINK_
<org.apache.http.util.VersionInfo: java.lang.String getRelease()> -> _SINK_
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()> -> _SINK_
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)> -> _SINK_
<android.filterfw.core.NativeFrame: int getCapacity()> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerAddress()> -> _SINK_
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.NodeList getRegions()> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAccelInPlaneRotationRadians()> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: int getPageCount()> -> _SINK_
<java.text.DecimalFormatSymbols: char getGroupingSeparator()> -> _SINK_
<android.renderscript.Element: int getVectorSize()> -> _SINK_
<android.media.AudioTrack: int getNotificationMarkerPosition()> -> _SINK_
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getMidTransition()> -> _SINK_
<android.graphics.drawable.ClipDrawable$ClipState: int getChangingConfigurations()> -> _SINK_
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.message.MultipartMimeContent getMultipartMimeContent()> -> _SINK_
<javax.security.cert.X509Certificate$1: java.security.Principal getSubjectDN()> -> _SINK_
<android.filterfw.core.SerializedFrame: java.lang.Object getObjectValue()> -> _SINK_
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> -> _SINK_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SINK_
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(byte[])> -> _SINK_
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeType(int)> -> _SINK_
<org.apache.http.message.BasicHeaderElement: int getParameterCount()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()> -> _SINK_
<android.webkit.WebBackForwardList: int getSize()> -> _SINK_
<android.os.IHardwareService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.os.UserManager: int getUserCount()> -> _SINK_
<com.android.videoeditor.service.MovieMediaItem: long getDuration()> -> _SINK_
<com.android.videoeditor.BaseAdapterWithImages: long getItemId(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> -> _SINK_
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)> -> _SINK_
<com.android.mms.widget.MmsWidgetService$MmsFactory: long getItemId(int)> -> _SINK_
<android.view.View: int getNextFocusLeftId()> -> _SINK_
<java.util.Locale: java.lang.String getDisplayName()> -> _SINK_
<com.android.ex.chips.RecipientEntry: long getDataId()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef()> -> _SINK_
<java.nio.ReadOnlyDirectByteBuffer: byte[] protectedArray()> -> _SINK_
<android.view.View: int getMinimumWidth()> -> _SINK_
<gov.nist.core.NameValue: java.lang.Object getKey()> -> _SINK_
<android.webkit.WebViewCore$AutoFillData: int getQueryId()> -> _SINK_
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)> -> _SINK_
<android.widget.ArrayAdapter: long getItemId(int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayHeight(int,int,int)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1SequenceParser parser()> -> _SINK_
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)> -> _SINK_
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)> -> _SINK_
<android.view.ScaleGestureDetector: long getEventTime()> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])> -> _SINK_
<android.content.res.XmlBlock$Parser: int getEventType()> -> _SINK_
<org.apache.http.message.BufferedHeader: int getValuePos()> -> _SINK_
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()> -> _SINK_
<android.widget.SearchView: int getInputType()> -> _SINK_
<android.webkit.WebViewClassic: int getScrollX()> -> _SINK_
<android.webkit.WebViewClassic: int getScrollY()> -> _SINK_
<android.graphics.Bitmap: int getDensity()> -> _SINK_
<android.util.XmlPullAttributes: int getAttributeNameResource(int)> -> _SINK_
<android.os.HandlerThread: int getThreadId()> -> _SINK_
<android.media.audiofx.AudioEffect: int getParameter(int,byte[])> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()> -> _SINK_
<javax.obex.ServerOperation: java.lang.String getType()> -> _SINK_
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)> -> _SINK_
<java.util.Date: int getDate()> -> _SINK_
<android.text.DynamicLayout: int getNumberOfBlocks()> -> _SINK_
<com.android.systemui.usb.UsbStorageActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _SINK_
<javax.crypto.spec.PBEKeySpec: char[] getPassword()> -> _SINK_
<com.android.uiautomator.core.UiDevice: int getDisplayRotation()> -> _SINK_
<javax.sip.DialogState: javax.sip.DialogState getObject(int)> -> _SINK_
<android.text.Layout: int getOffsetToLeftOf(int)> -> _SINK_
<com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> -> _SINK_
<java.lang.Class: java.net.URL getResource(java.lang.String)> -> _SINK_
<android.widget.Editor$SelectionEndHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> -> _SINK_
<android.widget.TabHost: android.widget.TabWidget getTabWidget()> -> _SINK_
<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()> -> _SINK_
<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.webkit.WebViewCore: android.webkit.WebSettingsClassic getSettings()> -> _SINK_
<android.view.View: android.view.ViewRootImpl getViewRootImpl()> -> _SINK_
<com.android.mms.model.RegionModel: java.lang.String getFit()> -> _SINK_
<android.widget.CompoundButton: int getCompoundPaddingRight()> -> _SINK_
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getOriginalTarget()> -> _SINK_
<android.view.MotionEvent: int getButtonState()> -> _SINK_
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()> -> _SINK_
<com.android.internal.view.ActionBarPolicy: int getMaxActionButtons()> -> _SINK_
<libcore.io.ForwardingOs: int getsockoptByte(java.io.FileDescriptor,int,int)> -> _SINK_
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScale()> -> _SINK_
<com.android.email.activity.UIControllerSearchTwoPane: int getLayoutId()> -> _SINK_
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String[] getSerialPorts()> -> _SINK_
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: java.util.Enumeration getObjects()> -> _SINK_
<java.nio.BaseByteBuffer: char getChar(int)> -> _SINK_
<java.nio.LongBuffer: java.lang.Object array()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransport()> -> _SINK_
<android.widget.Spinner$DialogPopup: int getVerticalOffset()> -> _SINK_
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.os.NullVibrator: android.os.NullVibrator getInstance()> -> _SINK_
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> -> _SINK_
<com.coremedia.iso.boxes.TrackHeaderBox: int getAlternateGroup()> -> _SINK_
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()> -> _SINK_
<java.nio.HeapByteBuffer: char getChar(int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<com.android.camera.CameraScreenNail: float getAlpha()> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getHostPort()> -> _SINK_
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()> -> _SINK_
<com.android.internal.database.SortCursor: int getType(int)> -> _SINK_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()> -> _SINK_
<com.google.common.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection get(java.lang.Object)> -> _SINK_
<android.os.Bundle: char getChar(java.lang.String)> -> _SINK_
<com.android.email.RecipientAdapter: int getItemLayout()> -> _SINK_
<android.hardware.usb.UsbInterface: int getId()> -> _SINK_
<com.android.uiautomator.core.UiSelector: int getInstance()> -> _SINK_
<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()> -> _SINK_
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)> -> _SINK_
<com.google.common.collect.AbstractMultimap: java.util.Map backingMap()> -> _SINK_
<android.gesture.Gesture: float getLength()> -> _SINK_
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()> -> _SINK_
<android.text.Annotation: java.lang.String getValue()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()> -> _SINK_
<android.app.ActivityManagerProxy: java.lang.String getCallingPackage(android.os.IBinder)> -> _SINK_
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String)> -> _SINK_
<com.android.email.mail.transport.MailTransport: java.net.InetAddress getLocalAddress()> -> _SINK_
<android.text.style.SuggestionSpan: java.lang.String getLocale()> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getAttribute(java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<java.util.Hashtable$HashIterator: java.util.Hashtable$HashtableEntry nextEntryNotFailFast()> -> _SINK_
<com.android.camera.CameraActivity: long getCaptureStartTime()> -> _SINK_
<org.apache.harmony.security.x509.PolicyInformation$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)> -> _SINK_
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()> -> _SINK_
<com.android.commands.uiautomator.Launcher$Command: java.lang.String name()> -> _SINK_
<java.nio.DirectByteBuffer: float getFloat(int)> -> _SINK_
<com.android.mms.dom.AttrImpl: java.lang.String getValue()> -> _SINK_
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getTargetPort()> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getResponse()> -> _SINK_
<com.android.org.bouncycastle.asn1.DERBMPString: java.lang.String getString()> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> -> _SINK_
<android.os.Bundle: long getLong(java.lang.String)> -> _SINK_
<java.util.concurrent.locks.LockSupport: java.lang.Object getBlocker(java.lang.Thread)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()> -> _SINK_
<android.preference.PreferenceActivity: android.widget.Button getNextButton()> -> _SINK_
<java.util.Locale: java.lang.String getVariant()> -> _SINK_
<java.nio.CharArrayBuffer: char get(int)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: int getVisiblePanes()> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: int getSPIServer()> -> _SINK_
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()> -> _SINK_
<android.app.LoaderManagerImpl: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn query(android.view.accessibility.AccessibilityNodeInfo,java.util.List)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<android.widget.RemoteViews$ReflectionAction: java.lang.String getActionName()> -> _SINK_
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getPreviousSibling()> -> _SINK_
<android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)> -> _SINK_
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: int getVersion()> -> _SINK_
<android.util.ReflectiveProperty: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.security.IKeyChainAliasCallback$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SINK_
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Insets getLayoutInsets()> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(int)> -> _SINK_
<org.json.JSONArray: int getInt(int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)> -> _SINK_
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification getNotification()> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getViaHost()> -> _SINK_
<android.view.IWindowManager$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.security.IKeyChainAliasCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SINK_
<android.view.ViewGroup$ChildListForAccessibility: int getChildIndex(android.view.View)> -> _SINK_
<android.view.InputDevice: int getId()> -> _SINK_
<android.os.Debug: int getThreadAllocSize()> -> _SINK_
<gov.nist.javax.sip.header.RetryAfter: int getRetryAfter()> -> _SINK_
<android.preference.VolumePreference$SeekBarVolumizer: android.widget.SeekBar getSeekBar()> -> _SINK_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.os.Looper)> -> _SINK_
<android.app.BackStackRecord: int getId()> -> _SINK_
<android.os.Bundle: float getFloat(java.lang.String)> -> _SINK_
<android.os.Debug: int getGlobalFreedSize()> -> _SINK_
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)> -> _SINK_
<android.speech.IRecognitionListener$Stub: android.os.IBinder asBinder()> -> _SINK_
<com.android.providers.userdictionary.UserDictionaryProvider: java.lang.String getType(android.net.Uri)> -> _SINK_
<android.app.ListFragment: android.widget.ListView getListView()> -> _SINK_
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: int getCount()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl$HttpsEngine: java.net.HttpURLConnection getHttpConnectionToCache()> -> _SINK_
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SINK_
<android.gesture.Gesture: long getID()> -> _SINK_
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SINK_
<android.widget.SearchView: int getImeOptions()> -> _SINK_
<android.widget.LinearLayout: int getDividerWidth()> -> _SINK_
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()> -> _SINK_
<android.mtp.MtpStorage: java.lang.String getDescription()> -> _SINK_
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()> -> _SINK_
<com.android.internal.app.ResolverActivity$ResolveListAdapter: int getCount()> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: java.io.FileDescriptor getFileDescriptor$()> -> _SINK_
<gov.nist.javax.sip.message.ListMap: gov.nist.javax.sip.header.SIPHeaderList getList(gov.nist.javax.sip.header.SIPHeader)> -> _SINK_
<java.util.Currency: java.lang.String getSymbol()> -> _SINK_
<android.renderscript.Type: int getX()> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPhoneNumber()> -> _SINK_
<android.view.Surface$CompatibleCanvas: int getHeight()> -> _SINK_
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$DayStats[] getDayStatistics()> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelHolder: int getPanelIndex(com.android.systemui.statusbar.phone.PanelView)> -> _SINK_
<android.widget.TextView: int getShadowColor()> -> _SINK_
<com.google.common.collect.ImmutableSortedAsList: java.lang.Object get(int)> -> _SINK_
<com.android.ex.variablespeed.EngineParameters: float getWindowOverlapDuration()> -> _SINK_
<android.text.Layout: int getLineBottom(int)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getPackageName(int)> -> _SINK_
<android.renderscript.Type: int getZ()> -> _SINK_
<android.renderscript.Type: int getY()> -> _SINK_
<android.graphics.Paint: int getTextGlyphs(java.lang.String,int,int,int,int,int,char[])> -> _SINK_
<org.kxml2.io.KXmlParser: java.lang.String getPositionDescription()> -> _SINK_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)> -> _SINK_
<android.webkit.WebSettings: int getMinimumFontSize()> -> _SINK_
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)> -> _SINK_
<android.content.ContextWrapper: java.lang.String getPackageName()> -> _SINK_
<android.text.Layout: int getOffsetForHorizontal(int,float)> -> _SINK_
<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)> -> _SINK_
<android.os.Environment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: int getMinimumHeight()> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustManagerImpl: java.security.cert.X509Certificate[] getAcceptedIssuers()> -> _SINK_
<android.webkit.WebViewClassic: float getDefaultZoomScale()> -> _SINK_
<com.android.internal.app.AlertController: android.widget.Button getButton(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: long getLockoutAttemptDeadline()> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: long getResponseCount()> -> _SINK_
<android.graphics.Paint: int getBidiFlags()> -> _SINK_
<android.mtp.MtpDevice: java.lang.String getDeviceName()> -> _SINK_
<com.google.common.collect.Lists$StringAsImmutableList: java.lang.Character get(int)> -> _SINK_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SINK_
<com.android.mms.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()> -> _SINK_
<android.content.Intent: java.lang.String getScheme()> -> _SINK_
<com.android.deskclock.worldclock.WorldClockAdapter: long getItemId(int)> -> _SINK_
<java.lang.RuntimePermission: java.lang.String getActions()> -> _SINK_
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getLoadingView()> -> _SINK_
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> -> _SINK_
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectPath()> -> _SINK_
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)> -> _SINK_
<dalvik.system.profiler.HprofData: java.util.Set getSamples()> -> _SINK_
<android.widget.GridLayout$Axis: int[] getLeadingMargins()> -> _SINK_
<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getCurrentFailedPasswordAttempts(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getScheme()> -> _SINK_
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()> -> _SINK_
<com.android.emailcommon.internet.MimeHeader: java.lang.String getFirstHeader(java.lang.String)> -> _SINK_
<android.app.ActivityThread: java.lang.String getProcessName()> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: int getParameterAsHexInt(java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isActivePasswordSufficient(int)> -> _SINK_
<android.hardware.Sensor: float getPower()> -> _SINK_
<android.graphics.drawable.InsetDrawable$InsetState: int getChangingConfigurations()> -> _SINK_
<java.nio.PipeImpl$PipeSourceChannel: java.io.FileDescriptor getFD()> -> _SINK_
<com.android.internal.util.TypedProperties: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> -> _SINK_
<com.android.internal.util.TypedProperties: short getShort(java.lang.String)> -> _SINK_
<java.security.MessageDigest: java.lang.String toString()> -> _SINK_
<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> -> _SINK_
<android.os.DropBoxManager$Entry: int getFlags()> -> _SINK_
<com.android.internal.os.AtomicFile: java.io.File getBaseFile()> -> _SINK_
<com.android.internal.widget.SizeAdaptiveLayout: android.animation.Animator getTransitionAnimation()> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createPrack(javax.sip.message.Response)> -> _SINK_
<java.security.Signature: java.lang.String getAlgorithm()> -> _SINK_
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()> -> _SINK_
<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)> -> _SINK_
<com.android.uiautomator.core.UiSelector: boolean getBoolean(int)> -> _SINK_
<android.widget.AbsSpinner: int getChildWidth(android.view.View)> -> _SINK_
<com.android.emailcommon.provider.Policy: android.net.Uri save(android.content.Context)> -> _SINK_
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags()> -> _SINK_
<android.view.HardwareRenderer: boolean initializeIfNeeded(int,int,android.view.Surface)> -> _SINK_
<android.os.Debug: int getGlobalExternalFreedCount()> -> _SINK_
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getCharset()> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: java.math.BigInteger getUserCertificate()> -> _SINK_
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> -> _SINK_
<org.apache.james.mime4j.field.DateTimeField: java.util.Date getDate()> -> _SINK_
<android.media.MediaRouter: int getRouteCount()> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicHeight()> -> _SINK_
<java.net.URLConnection: boolean getDoOutput()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()> -> _SINK_
<javax.crypto.spec.PBEKeySpec: int getIterationCount()> -> _SINK_
<com.android.launcher2.PagedViewGridLayout: int getCellCountY()> -> _SINK_
<com.android.launcher2.PagedViewGridLayout: int getCellCountX()> -> _SINK_
<java.util.MissingResourceException: java.lang.String getKey()> -> _SINK_
<java.security.Security: java.security.Provider getProvider(java.lang.String)> -> _SINK_
<com.android.internal.widget.DrawableHolder: float getScaleY()> -> _SINK_
<com.android.internal.widget.DrawableHolder: float getScaleX()> -> _SINK_
<com.android.launcher2.FocusOnlyTabWidget: android.view.View getSelectedTab()> -> _SINK_
<org.apache.harmony.security.x509.GeneralSubtree$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> -> _SINK_
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> -> _SINK_
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapRangeValues(java.lang.String)> -> _SINK_
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object getKey()> -> _SINK_
<android.view.ViewConfiguration: int getScaledEdgeSlop()> -> _SINK_
<android.text.DynamicLayout: int getLineDescent(int)> -> _SINK_
<org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int)> -> _SINK_
<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long getDuration(com.googlecode.mp4parser.authoring.Track)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub: android.os.IBinder asBinder()> -> _SINK_
<android.widget.AbsSpinner$RecycleBin: android.view.View get(int)> -> _SINK_
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodManager getInputMethodManager(android.content.Context)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator interpolator(android.animation.TimeInterpolator,android.animation.Animator)> -> _SINK_
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)> -> _SINK_
<android.filterpacks.imageproc.FlipFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.launcher2.LauncherAppWidgetHostView: android.view.View getErrorView()> -> _SINK_
<gov.nist.javax.sip.header.CallID: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageProcessor,javax.sip.address.Hop)> -> _SINK_
<com.android.email.activity.setup.SetupData: int getFlowMode()> -> _SINK_
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMaxFieldOfViewDegrees()> -> _SINK_
<com.android.launcher2.Launcher: com.android.launcher2.SearchDropTargetBar getSearchBar()> -> _SINK_
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocolName()> -> _SINK_
<android.app.ExpandableListActivity: long getSelectedId()> -> _SINK_
<android.app.NotificationManager: android.app.INotificationManager getService()> -> _SINK_
<com.google.common.collect.BstPath: com.google.common.collect.BstPath getPrefix()> -> _SINK_
<android.os.Debug$MemoryInfo: int getOtherPss(int)> -> _SINK_
<com.android.mms.transaction.TransactionState: android.net.Uri getContentUri()> -> _SINK_
<com.android.videoeditor.service.VideoEditorProject: int getMediaItemCount()> -> _SINK_
<android.renderscript.Program: java.lang.String getTextureName(int)> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetName(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.text.style.CharacterStyle$Passthrough: android.text.style.CharacterStyle getUnderlying()> -> _SINK_
<android.speech.tts.SynthesisRequest: java.lang.String getText()> -> _SINK_
<java.text.ChoiceFormat: double[] getLimits()> -> _SINK_
<android.widget.HeaderViewListAdapter: int getHeadersCount()> -> _SINK_
<com.google.common.collect.AbstractMultiset: java.util.Set createEntrySet()> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: long getReceivedBytesCount()> -> _SINK_
<org.apache.http.impl.client.DefaultUserTokenHandler: java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: float maxOverScroll()> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$1: java.lang.Float get(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout)> -> _SINK_
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)> -> _SINK_
<gov.nist.javax.sip.header.Challenge: java.lang.String getSignature()> -> _SINK_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getSearchHint()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getComment()> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.Menu getMenu()> -> _SINK_
<java.lang.reflect.Array: char getChar(java.lang.Object,int)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String)> -> _SINK_
<android.widget.Switch: java.lang.CharSequence getTextOff()> -> _SINK_
<android.graphics.drawable.GradientDrawable: int getChangingConfigurations()> -> _SINK_
<android.webkit.CallbackProxy$UploadFileMessageData: android.webkit.CallbackProxy$UploadFile getUploadFile()> -> _SINK_
<java.nio.HeapByteBuffer: long getLong()> -> _SINK_
<android.graphics.drawable.shapes.Shape: float getHeight()> -> _SINK_
<com.android.launcher2.CellLayout$ViewCluster: int[] getBottomEdge()> -> _SINK_
<com.android.internal.view.ActionBarPolicy: int getStackedTabMaxWidth()> -> _SINK_
<org.apache.http.impl.cookie.RFC2965Spec: int getVersion()> -> _SINK_
<android.view.MotionEvent: int getPointerIdBits()> -> _SINK_
<android.net.sip.SipProfile: int getCallingUid()> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: int getBandwidth(java.lang.String)> -> _SINK_
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap scaleImage(java.lang.String,int,int,int)> -> _SINK_
<android.widget.HorizontalScrollView: float getRightFadingEdgeStrength()> -> _SINK_
<com.google.android.picasasync.PicasaFacade: com.google.android.picasasync.PicasaFacade get(android.content.Context)> -> _SINK_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> -> _SINK_
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()> -> _SINK_
<gov.nist.javax.sip.address.SipUri: java.lang.String getTransportParam()> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipStack getSipStack()> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String getName()> -> _SINK_
<android.widget.HeaderViewListAdapter: int getViewTypeCount()> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub: android.os.IBinder asBinder()> -> _SINK_
<gov.nist.javax.sip.header.SIPDate: int getSecond()> -> _SINK_
<android.filterfw.core.AsyncRunner: java.lang.Exception getError()> -> _SINK_
<android.widget.RemoteViews$SetDrawableParameters: java.lang.String getActionName()> -> _SINK_
<android.webkit.ZoomManager: android.view.View getExternalZoomPicker()> -> _SINK_
<com.google.common.collect.RegularImmutableMap$Values$1: java.lang.Object get(int)> -> _SINK_
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()> -> _SINK_
<java.util.zip.Deflater: long getBytesRead()> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: int getChangingConfigurations()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> -> _SINK_
<libcore.net.http.HttpEngine: libcore.net.http.ResponseHeaders getResponseHeaders()> -> _SINK_
<android.app.ContextImpl: android.content.Context getOuterContext()> -> _SINK_
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)> -> _SINK_
<java.lang.reflect.Array: short getShort(java.lang.Object,int)> -> _SINK_
<android.widget.ExpandableListView: int getFlatListPosition(long)> -> _SINK_
<android.view.DragEvent: float getY()> -> _SINK_
<android.view.DragEvent: float getX()> -> _SINK_
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()> -> _SINK_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleSizeBox getSampleSizeBox()> -> _SINK_
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityContainer: com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper getFlipper()> -> _SINK_
<java.nio.LongToByteBufferAdapter: long get(int)> -> _SINK_
<org.apache.http.impl.cookie.BestMatchSpec: int getVersion()> -> _SINK_
<android.webkit.WebSyncManager: java.lang.Object clone()> -> _SINK_
<com.android.internal.database.SortCursor: int getCount()> -> _SINK_
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()> -> _SINK_
<java.net.NetworkInterface: int getIndex()> -> _SINK_
<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getHeight()> -> _SINK_
<org.apache.http.client.methods.HttpOptions: java.util.Set getAllowedMethods(org.apache.http.HttpResponse)> -> _SINK_
<java.text.AttributedString$AttributedIterator: int getRunStart()> -> _SINK_
<android.widget.Toast: int getDuration()> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: int getLength()> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getEnterFadeDuration()> -> _SINK_
<android.hardware.usb.UsbDevice: int getInterfaceCount()> -> _SINK_
<android.text.StaticLayout: int getEllipsisStart(int)> -> _SINK_
<android.drm.DrmUtils: byte[] readBytes(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient getClient()> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> -> _SINK_
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutManager getInstance()> -> _SINK_
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(int,float)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: int getRequestInterceptorCount()> -> _SINK_
<android.view.MotionEvent: float getHistoricalSize(int,int)> -> _SINK_
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> -> _SINK_
<com.android.internal.view.ActionBarPolicy: int getTabContainerHeight()> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int getDataState()> -> _SINK_
<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map getParameters()> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitle()> -> _SINK_
<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()> -> _SINK_
<android.webkit.WebSettingsClassic: boolean getAllowFileAccessFromFileURLs()> -> _SINK_
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair[] getParameters()> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()> -> _SINK_
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent restoreContentWithId(android.content.Context,java.lang.Class,android.net.Uri,java.lang.String[],long)> -> _SINK_
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String)> -> _SINK_
<com.google.common.collect.ForwardingIterator: java.lang.Object next()> -> _SINK_
<android.app.SearchableInfo: int getSearchButtonText()> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View getStatusBarView()> -> _SINK_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)> -> _SINK_
<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)> -> _SINK_
<android.provider.Settings$Global: java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String)> -> _SINK_
<android.widget.SuggestionsAdapter: int getQueryRefinement()> -> _SINK_
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray()> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: boolean[] getBooleanArray()> -> _SINK_
<com.android.email.NotificationController: int getRingerMode()> -> _SINK_
<android.security.Credentials: android.security.Credentials getInstance()> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguageList: gov.nist.javax.sip.header.AcceptLanguage getFirst()> -> _SINK_
<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()> -> _SINK_
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getOIDs()> -> _SINK_
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()> -> _SINK_
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()> -> _SINK_
<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()> -> _SINK_
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> -> _SINK_
<com.android.inputmethod.keyboard.Key: int getMoreKeysColumn()> -> _SINK_
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster$CullMode getCullMode()> -> _SINK_
<android.filterfw.core.VertexFrame: float[] getFloats()> -> _SINK_
<java.util.Collections$CheckedList: java.lang.Object get(int)> -> _SINK_
<com.google.common.collect.MapMaker: com.google.common.base.Equivalence getValueEquivalence()> -> _SINK_
<android.preference.VolumePreference$SavedState: android.preference.VolumePreference$VolumeStore getVolumeStore()> -> _SINK_
<gov.nist.javax.sip.header.Via: java.lang.String getSentByField()> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: int[] getDisplayIds()> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.Display getDisplay()> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentDispositionHeader getContentDisposition()> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Browser: android.net.Uri BOOKMARKS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Browser: android.net.Uri SEARCHES_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Attendees: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$CalendarAlerts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$CalendarAlerts: android.net.Uri CONTENT_URI_BY_INSTANCE,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Calendars: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$EventDays: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Events: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Events: android.net.Uri DELETED_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$EventsEntity: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$ExtendedProperties: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Instances: android.net.Uri CONTENT_BY_DAY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Instances: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Reminders: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$SyncState: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.CallLog$Calls: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.CallLog$Calls: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.CallLog: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$ContactMethods: android.net.Uri CONTENT_EMAIL_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$ContactMethods: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Extensions: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$GroupMembership: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$GroupMembership: android.net.Uri RAW_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Groups: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Groups: android.net.Uri DELETED_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Organizations: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$People: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$People: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$People: android.net.Uri DELETED_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$People: android.net.Uri WITH_EMAIL_OR_IM_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Phones: android.net.Uri CONTENT_FILTER_URL,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Phones: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Photos: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Presence: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts$Settings: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Contacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$AggregationExceptions: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_LOOKUP_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$CommonDataKinds$StructuredPostal: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_GROUP_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_LOOKUP_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_MULTI_VCARD_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_VCARD_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Data: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Groups: android.net.Uri CONTENT_SUMMARY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Groups: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$PhoneLookup: android.net.Uri CONTENT_FILTER_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$ProviderStatus: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$RawContacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$RawContactsEntity: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$Settings: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$StatusUpdates: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract$SyncState: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.ContactsContract: android.net.Uri AUTHORITY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Downloads$Impl: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Downloads: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$Bookmarks: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$Secure: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$System: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.SocialContract$Activities: android.net.Uri CONTENT_AUTHORED_BY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.SocialContract$Activities: android.net.Uri CONTENT_CONTACT_STATUS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.SocialContract$Activities: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.SocialContract: android.net.Uri AUTHORITY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Carriers: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$Draft: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$Inbox: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$Outbox: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$Rate: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$ScrapSpace: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms$Sent: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms: android.net.Uri REPORT_REQUEST_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Mms: android.net.Uri REPORT_STATUS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms$PendingMessages: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_CONVERSATIONS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_DRAFT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_FILTER_BYPHONE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_LOCKED_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_UNDELIVERED_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$MmsSms: android.net.Uri SEARCH_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms$Conversations: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms$Draft: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms$Inbox: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms$Outbox: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms$Sent: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Sms: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Threads: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Threads: android.net.Uri OBSOLETE_THREADS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.Telephony$Threads: android.net.Uri THREAD_ID_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.UserDictionary$Words: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.provider.UserDictionary: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.bluetooth.opp.BluetoothShare: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.calendar.EventInfoActivity: android.net.Uri CONTACT_DATA_WITH_PRESENCE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.contacts.ContactsLiveFolders$AllContacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.contacts.ContactsLiveFolders$PhoneContacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.contacts.ContactsLiveFolders$StarredContacts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.email.provider.AttachmentProvider: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.email.provider.EmailContent: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.email.provider.EmailProvider: android.net.Uri INTEGRITY_CHECK_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.exchange.provider.ExchangeProvider: android.net.Uri GAL_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.Uri PREFERAPN_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherProvider: android.net.Uri CONTENT_APPWIDGET_RESET_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherSettings$Favorites: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherSettings$Favorites: android.net.Uri CONTENT_URI_NO_NOTIFICATION,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.data.Contact$ContactsCache: android.net.Uri EMAIL_WITH_PRESENCE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.data.Contact$ContactsCache: android.net.Uri PHONES_WITH_PRESENCE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.data.Conversation: android.net.Uri sAllThreadsUri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.data.RecipientIdCache: android.net.Uri sAllCanonical,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.data.RecipientIdCache: android.net.Uri sSingleCanonicalAddressUri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.drm.DrmUtils: android.net.Uri DRM_TEMP_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.transaction.MessageStatusReceiver: android.net.Uri STATUS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.transaction.MessagingNotification: android.net.Uri UNDELIVERED_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.mms.ui.ManageSimMessages: android.net.Uri ICC_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.calendar.CalendarProvider2: android.net.Uri SCHEDULE_ALARM_REMOVE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.calendar.CalendarProvider2: android.net.Uri SCHEDULE_ALARM_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.contacts.LegacyApiSupport: android.net.Uri LIVE_FOLDERS_CONTACTS_FAVORITES_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.contacts.LegacyApiSupport: android.net.Uri LIVE_FOLDERS_CONTACTS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.contacts.LegacyApiSupport: android.net.Uri LIVE_FOLDERS_CONTACTS_WITH_PHONES_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.telephony.SmsProvider: android.net.Uri ICC_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.telephony.SmsProvider: android.net.Uri NOTIFICATION_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.settings.ApnSettings: android.net.Uri DEFAULTAPN_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.android.settings.ApnSettings: android.net.Uri PREFERAPN_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.cooliris.picasa.PicasaContentProvider: android.net.Uri ALBUMS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.cooliris.picasa.PicasaContentProvider: android.net.Uri BASE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(com.cooliris.picasa.PicasaContentProvider: android.net.Uri PHOTOS_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> -> _SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> -> _SINK_
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void notifyTetheredOfNewUpstreamIface(java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void notify(int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> -> _SINK_
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> -> _SINK_
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)> -> _SINK_
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)> -> _SINK_
<com.android.phone.sip.SipProfileDb: void saveProfile(android.net.sip.SipProfile)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.android.emailcommon.internet.MimeHeader: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void setLogging(int)> -> _SINK_
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> -> _SINK_
<com.android.email.mail.transport.EOLConvertingOutputStream: void write(int)> -> _SINK_
<com.android.email.NotificationController: void showPasswordExpiredNotification(long)> -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> -> _SINK_
<com.android.email.activity.MessageViewFragment: com.android.email.activity.MessageViewFragment newInstance(long)> -> _SINK_
<com.android.email.RefreshManager: boolean refreshMailboxList(long)> -> _SINK_
<com.android.email.provider.ContentCache$CounterMap: void add(java.lang.Object)> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.Controller: boolean isMessagingController(long)> -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment newInstance(android.content.Context,com.android.emailcommon.provider.Account,java.lang.Integer)> -> _SINK_
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)> -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.app.Activity,int,int)> -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesStarted(long,long)> -> _SINK_
<com.android.email.activity.setup.AccountSettings: void onEditQuickResponses(com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> -> _SINK_
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,long,boolean)> -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)> -> _SINK_
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginFailed(long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean deleteFolder(long,java.lang.String)> -> _SINK_
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)> -> _SINK_
<com.android.email.activity.MailboxListItem: void setDropTargetBackground(boolean,long)> -> _SINK_
<com.android.email.mail.store.ImapConnection: java.lang.String sendComplexCommand(java.util.List,boolean)> -> _SINK_
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment newInstance(java.lang.String)> -> _SINK_
<com.android.email.Controller$LegacyListener: void listFoldersFailed(long,java.lang.String)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> -> _SINK_
<com.android.emailcommon.provider.EmailContent$Message: android.net.Uri save(android.content.Context)> -> _SINK_
<com.android.email.activity.setup.AccountSettings: android.content.Intent createAccountSettingsIntent(android.content.Context,long,java.lang.String)> -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginSucceeded(long)> -> _SINK_
<com.android.email.activity.MessageListItem: void setTimestamp(long)> -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(android.content.Context,long,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean renameFolder(long,java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.activity.MessageListFragment: void setLayout(com.android.email.activity.ThreePaneLayout)> -> _SINK_
<com.android.email.activity.setup.MailboxSettings: void start(android.app.Activity,long)> -> _SINK_
<com.android.email.activity.UIControllerTwoPane: void openInternal(com.android.email.MessageListContext,long)> -> _SINK_
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: com.android.email.activity.setup.AccountSettings$LoginWarningDialog newInstance(java.lang.String)> -> _SINK_
<com.android.email.activity.EmailActivity$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> -> _SINK_
<com.android.email.MessagingController$8: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)> -> _SINK_
<com.android.email.MessagingController$9: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)> -> _SINK_
<com.android.email.activity.MessageCompose: boolean actionCompose(android.content.Context,java.lang.String,long)> -> _SINK_
<com.android.email.Preferences: void setEnableStrictMode(boolean)> -> _SINK_
<com.android.email.Preferences: void setLastUsedAccountId(long)> -> _SINK_
<com.android.email.MessagingController: void listFolders(long,com.android.email.MessagingListener)> -> _SINK_
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> -> _SINK_
<com.android.email.activity.ActivityHelper: boolean openUrlInMessage(android.app.Activity,java.lang.String,long)> -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void processDevicePolicyMessage(android.content.Context,int)> -> _SINK_
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)> -> _SINK_
<com.android.email.Preferences: void setTextZoom(int)> -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMeetingResponse(long,int)> -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginFailed(long)> -> _SINK_
<com.android.email.activity.setup.MailboxSettings: void setupLookbackPreferenceOptions(android.content.Context,android.preference.ListPreference,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setCallback(com.android.emailcommon.service.IEmailServiceCallback)> -> _SINK_
<com.android.email.activity.MessageCompose: void setFocusShifter(int,int)> -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void sendMeetingResponse(long,int)> -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void setLogging(int)> -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void sendMail(long)> -> _SINK_
<com.android.email.service.PolicyService$1: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.activity.DeleteMessageConfirmationDialog: com.android.email.activity.DeleteMessageConfirmationDialog newInstance(int,android.app.Fragment)> -> _SINK_
<com.android.email.Preferences: void setAutoAdvanceDirection(int)> -> _SINK_
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)> -> _SINK_
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> -> _SINK_
<com.android.email.activity.setup.AccountSetupActivity: void onSaveInstanceState(android.os.Bundle)> -> _SINK_
<com.android.email.activity.MessageListFragment: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.email.view.CertificateSelector$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.email.Email: boolean setServicesEnabledSync(android.content.Context)> -> _SINK_
<com.android.email.mail.store.ImapFolder: void fetchInternal(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> -> _SINK_
<com.android.email.mail.store.imap.ImapList: boolean is(int,java.lang.String,boolean)> -> _SINK_
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)> -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int,int)> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadMessageStatus(long,int,int)> -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesCompleted(long)> -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesStarted(long,long)> -> _SINK_
<com.android.emailcommon.provider.Account: void refresh(android.content.Context)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean createFolder(long,java.lang.String)> -> _SINK_
<com.android.email.activity.MessageViewFragment: void onMessageShown(long,com.android.emailcommon.provider.Mailbox)> -> _SINK_
<com.android.email.activity.ThreePaneLayout: void setMessageListWidthAnim(int)> -> _SINK_
<com.android.email.Preferences: void setEnableExchangeLogging(boolean)> -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.activity.InsertQuickResponseDialog: com.android.email.activity.InsertQuickResponseDialog newInstance(android.app.Fragment,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(java.lang.String)> -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlagInternal(com.android.emailcommon.mail.Flag,boolean)> -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void processBroadcastIntent(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.email.activity.Welcome: void startActivity(android.content.Intent)> -> _SINK_
<com.android.email.mail.store.ImapFolder: void copyMessages(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Folder,com.android.emailcommon.mail.Folder$MessageUpdateCallbacks)> -> _SINK_
<com.android.email.LegacyConversions: void saveAttachmentBody(android.content.Context,com.android.emailcommon.mail.Part,com.android.emailcommon.provider.EmailContent$Attachment,long)> -> _SINK_
<com.android.emailcommon.mail.PackedString$Builder: void put(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<com.android.emailcommon.internet.Rfc822Output: void writeTo(android.content.Context,long,java.io.OutputStream,boolean,boolean)> -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.activity.MoveMessageToDialog: com.android.email.activity.MoveMessageToDialog newInstance(long[],android.app.Fragment)> -> _SINK_
<com.android.email.GroupMessagingListener: void addListener(com.android.email.MessagingListener)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)> -> _SINK_
<com.android.emailcommon.mail.Message: boolean isMimeType(java.lang.String)> -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesCompleted(long)> -> _SINK_
<com.android.email.activity.UIControllerBase: void onSearchSubmit(java.lang.String)> -> _SINK_
<com.android.email.Preferences: void setEnableDebugLogging(boolean)> -> _SINK_
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)> -> _SINK_
<com.android.email.NotificationController: void setupSoundAndVibration(android.app.Notification$Builder,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionDevicePasswordExpirationIntent(android.content.Context,long,boolean)> -> _SINK_
<com.android.email.activity.MailboxListItem: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment: android.os.Bundle buildArguments(long,java.lang.String)> -> _SINK_
<com.android.email.ControllerResultUiThreadWrapper: void setRegistered(boolean)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(java.lang.String,boolean)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> -> _SINK_
<com.android.email.activity.setup.DuplicateAccountDialogFragment: com.android.email.activity.setup.DuplicateAccountDialogFragment newInstance(java.lang.String)> -> _SINK_
<com.android.email.LegacyConversions: int inferMailboxTypeFromName(android.content.Context,java.lang.String)> -> _SINK_
<com.android.email.Preferences: void setSenderAsTrusted(java.lang.String)> -> _SINK_
<com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment: com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment newInstanceForHeader(int)> -> _SINK_
<com.android.emailcommon.provider.Mailbox: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)> -> _SINK_
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginSucceeded(long)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Message: void setSize(int)> -> _SINK_
<com.android.email.Preferences: void setEnableExchangeFileLogging(boolean)> -> _SINK_
<com.android.email.activity.setup.AccountSetupExchangeFragment: boolean setHostAuthFromAutodiscover(com.android.emailcommon.provider.HostAuth)> -> _SINK_
<com.android.email.Controller: void sendMeetingResponse(long,int)> -> _SINK_
<com.android.email.Preferences: void setForceOneMinuteRefresh(boolean)> -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setSize(int)> -> _SINK_
<com.android.email.provider.EmailProvider: void restoreIfNeeded(android.content.Context,android.database.sqlite.SQLiteDatabase)> -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(long,boolean)> -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: com.android.email.activity.MessageListItemCoordinates forWidth(android.content.Context,int,boolean)> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> -> _SINK_
<com.android.email.activity.setup.AccountSettings$AccountServerSettingsFragmentCallback: void onProceedNext(int,com.android.email.activity.setup.AccountServerBaseFragment)> -> _SINK_
<com.android.email.MessageListContext: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.email.activity.ThreePaneLayout$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlag(com.android.emailcommon.mail.Flag,boolean)> -> _SINK_
<com.android.email.Controller: void setMessageFavoriteSync(long,boolean)> -> _SINK_
<com.android.email.ControllerResultUiThreadWrapper: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> -> _SINK_
<com.android.email.activity.UIControllerOnePane: boolean onUrlInMessageClicked(java.lang.String)> -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.email.activity.MessageListFragment newInstance(com.android.email.MessageListContext)> -> _SINK_
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountHoldFlag(long,boolean)> -> _SINK_
<com.android.email.activity.MessagesAdapter: void toggleSelected(com.android.email.activity.MessageListItem)> -> _SINK_
<com.android.emailcommon.provider.Account: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int)> -> _SINK_
<com.android.emailcommon.provider.Policy: void setAttachmentFlagsForNewPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy)> -> _SINK_
<com.android.email.MessagingController: void sendPendingMessages(com.android.emailcommon.provider.Account,long,com.android.email.MessagingListener)> -> _SINK_
<com.android.email.activity.setup.AccountSettings: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMail(long)> -> _SINK_
<com.android.email.Preferences: void setOneTimeInitializationProgress(int)> -> _SINK_
<com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.service.EmailServiceUtils: void startService(android.content.Context,java.lang.String)> -> _SINK_
<com.android.email.activity.AttachmentInfoDialog: com.android.email.activity.AttachmentInfoDialog newInstance(android.content.Context,int)> -> _SINK_
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionUpdateSecurityIntent(android.content.Context,long,boolean)> -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment newInstance(com.android.emailcommon.provider.Account,android.app.Fragment)> -> _SINK_
<com.android.email.MessagingController: void processPendingActions(long)> -> _SINK_
<com.android.emailcommon.mail.Address: void setAddress(java.lang.String)> -> _SINK_
<com.android.email.mail.store.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)> -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesCompleted(long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> -> _SINK_
<com.android.email.activity.UIControllerOnePane: void onSaveInstanceState(android.os.Bundle)> -> _SINK_
<com.android.email.Preferences: void setHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account,boolean)> -> _SINK_
<com.android.email.Controller: void sendPendingMessages(long)> -> _SINK_
<com.android.email.activity.MessageListFragment: void onActivityCreated(android.os.Bundle)> -> _SINK_
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageFavorite(long,boolean)> -> _SINK_
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.NotificationController: void showPasswordExpiringNotification(long)> -> _SINK_
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> -> _SINK_
<com.android.email.service.MailService: void actionSendPendingMail(android.content.Context,long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> -> _SINK_
<com.android.email.activity.MessageViewFragment: com.android.emailcommon.provider.EmailContent$Message openMessageSync(android.app.Activity)> -> _SINK_
<com.android.email.activity.EmailActivity: android.content.Intent createSearchIntent(android.app.Activity,long,long,java.lang.String)> -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.email.service.PolicyService$1: void setAccountHoldFlag(long,boolean)> -> _SINK_
<com.android.email.Preferences: void setInhibitGraphicsAcceleration(boolean)> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> -> _SINK_
<com.android.email.VendorPolicyLoader: com.android.email.activity.setup.AccountSettingsUtils$Provider findProviderForDomain(java.lang.String)> -> _SINK_
<com.android.email.Controller: void loadAttachment(long,long,long)> -> _SINK_
<com.android.email.RecipientAdapter: void setAccount(android.accounts.Account)> -> _SINK_
<com.android.email.mail.store.ImapFolder: void save(android.content.Context)> -> _SINK_
<com.android.email.Controller: void updateMailbox(long,long,boolean)> -> _SINK_
<com.android.email.MessagingController: void sendPendingMessagesSynchronous(com.android.emailcommon.provider.Account,long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> -> _SINK_
<com.android.email.SecurityPolicy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> -> _SINK_
<com.android.email.activity.setup.EditQuickResponseDialog: com.android.email.activity.setup.EditQuickResponseDialog newInstance(com.android.emailcommon.provider.QuickResponse,long)> -> _SINK_
<com.android.email.Controller$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.email.SecurityPolicy: void policiesRequired(long)> -> _SINK_
<com.android.emailcommon.internet.MimeMessage: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<com.android.email.mail.transport.MailTransport: void setSoTimeout(int)> -> _SINK_
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.email.activity.UIControllerTwoPane: boolean onUrlInMessageClicked(java.lang.String)> -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)> -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesStarted(long,long)> -> _SINK_
<com.android.emailcommon.provider.EmailContent: int update(android.content.Context,android.content.ContentValues)> -> _SINK_
<com.android.email.mail.store.ImapFolder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setLogging(int)> -> _SINK_
<com.android.email.Email: void enableStrictMode(boolean)> -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog newInstance(android.content.Context,com.android.email.activity.setup.AccountCheckSettingsFragment,com.android.emailcommon.mail.MessagingException)> -> _SINK_
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> -> _SINK_
<com.android.email.MessagingController$4: void messageRetrieved(com.android.emailcommon.mail.Message)> -> _SINK_
<com.android.email.activity.MessageCompose: void setMessageContentSelection(java.lang.String)> -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void setImapDeletePolicy(android.content.Context)> -> _SINK_
<com.android.email.activity.MessageListFragment$1: void setField(long,boolean)> -> _SINK_
<com.android.email.activity.MessageListFragment$2: void setField(long,boolean)> -> _SINK_
<com.android.email.Controller: void setMessageReadSync(long,boolean)> -> _SINK_
<com.android.email.activity.MailboxListFragment: com.android.email.activity.MailboxListFragment newInstance(long,long,boolean)> -> _SINK_
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageRead(long,boolean)> -> _SINK_
<com.android.email.service.AttachmentDownloadService: void addServiceIntentForTest(long,android.content.Intent)> -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog newInstance(com.android.email.activity.setup.AccountCheckSettingsFragment,java.lang.String)> -> _SINK_
<com.android.email.Controller$ServiceCallback: void syncMailboxListStatus(long,int,int)> -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMail(long)> -> _SINK_
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Message: void setFlag(com.android.emailcommon.mail.Flag,boolean)> -> _SINK_
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)> -> _SINK_
<com.android.email.MessagingController: void copyOneMessageToProvider(com.android.emailcommon.mail.Message,com.android.emailcommon.provider.EmailContent$Message,int,android.content.Context)> -> _SINK_
<com.android.email.NotificationController: void showDownloadForwardFailedNotification(com.android.emailcommon.provider.EmailContent$Attachment)> -> _SINK_
<com.android.email.activity.MailboxListFragment: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.email.activity.MessageCompose: void setIntent(android.content.Intent)> -> _SINK_
<com.android.email.Controller: void setMessageAnsweredOrForwarded(long,int)> -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadMore(long)> -> _SINK_
<com.android.email.NotificationController: void showLoginFailedNotification(long)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.AdapterState$OffState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void unregisterCallback(android.bluetooth.IBluetoothCallback)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean sendDtmf(int)> -> _SINK_
<com.android.bluetooth.Utils: byte[] uuidsToByteArray(android.os.ParcelUuid[])> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)> -> _SINK_
<com.android.bluetooth.Utils: void copyStream(java.io.InputStream,java.io.OutputStream,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.util.ArrayList,boolean)> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: void openReceivedFile(android.content.Context,java.lang.String,java.lang.String,java.lang.Long,android.net.Uri)> -> _SINK_
<com.android.bluetooth.opp.Constants: void updateShareStatus(android.content.Context,int,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setDiscoverableTimeout(int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterState$OnState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.ProfileService: void notifyProfileServiceStateChanged(int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setName(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void pinRequestCallback(byte[],byte[],int)> -> _SINK_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.BondStateMachine$StableState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void devicePropertyChangedCallback(byte[],int[],byte[][])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.Utils: byte[] uuidToByteArray(android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setUuids(android.os.ParcelUuid[])> -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> -> _SINK_
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: void setChannel(android.bluetooth.BluetoothDevice,int,int)> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)> -> _SINK_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: void onBluetoothServiceUp(android.bluetooth.IBluetooth)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void phoneStateChanged(int,int,int,java.lang.String,int)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void deviceFoundCallback(byte[])> -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.bluetooth.Utils: byte[] intToByteArray(int)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppService$2: void handleMessage(android.os.Message)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager$HandlerForStringBuffer: boolean onEntryCreated(java.lang.String)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<android.bluetooth.BluetoothServerSocket: void setServiceName(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties addDeviceProperties(byte[])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: void setAlias(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void registerCallback(android.bluetooth.IBluetoothCallback)> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> -> _SINK_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void aclStateChangeCallback(int,byte[],int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.bluetooth.opp.TestTcpServer: int onPut(javax.obex.Operation)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: void retryTransfer(android.content.Context,com.android.bluetooth.opp.BluetoothOppTransferInfo)> -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void sspRequestCallback(byte[],byte[],int,int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)> -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: void setName(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setScanMode(int)> -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: boolean access$1100(android.accounts.AccountManagerService,android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)> -> _SINK_
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void sendResult()> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)> -> _SINK_
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)> -> _SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: void onError(int,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SINK_
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService$TestFeaturesSession: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(java.lang.Object)> -> _SINK_
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readUserDataInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> -> _SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> -> _SINK_
<android.accounts.AccountManagerService$RemoveAccountSession: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$3: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$4: void onResult(android.os.Bundle)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)> -> _SINK_
<android.media.AudioManager: void setRingerMode(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpOn(boolean)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],int[])> -> _SINK_
<android.media.AudioService$AudioHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)> -> _SINK_
<android.media.AudioManager: void setMasterVolume(int,int)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,short)> -> _SINK_
<android.media.AudioService: void setRemoteStreamVolume(int)> -> _SINK_
<android.media.AudioTrack: int setPositionNotificationPeriod(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)> -> _SINK_
<android.media.audiofx.AudioEffect: byte[] intToByteArray(int)> -> _SINK_
<android.media.AudioService: void setStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioService: void setRingerMode(int)> -> _SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)> -> _SINK_
<android.media.AudioManager: void setRouting(int,int,int)> -> _SINK_
<android.media.AudioService: void setMasterMute(boolean,int,android.os.IBinder)> -> _SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.media.AudioService: void setVibrateSetting(int,int)> -> _SINK_
<android.media.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)> -> _SINK_
<android.media.AudioService$VolumeStreamState: boolean setIndex(int,int,boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioManager: void setMode(int)> -> _SINK_
<android.media.AudioService: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> -> _SINK_
<android.media.AudioService: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],byte[])> -> _SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)> -> _SINK_
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.media.AudioService: void setPlaybackInfoForRcc(int,int,int)> -> _SINK_
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)> -> _SINK_
<android.media.AudioTrack: int setPlaybackRate(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],short[])> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRemoteSubmixOn(boolean,int)> -> _SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)> -> _SINK_
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer$Settings)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.media.audiofx.Virtualizer: void setStrength(short)> -> _SINK_
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)> -> _SINK_
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer$Settings)> -> _SINK_
<android.media.audiofx.AudioEffect: int setEnabled(boolean)> -> _SINK_
<android.media.AudioManager: void setRemoteSubmixOn(boolean,int)> -> _SINK_
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String)> -> _SINK_
<android.media.audiofx.Equalizer: void setBandLevel(short,short)> -> _SINK_
<android.media.AudioTrack: int setStereoVolume(float,float)> -> _SINK_
<android.media.AudioService: void adjustStreamVolume(int,int,int)> -> _SINK_
<android.media.audiofx.BassBoost: void setStrength(short)> -> _SINK_
<android.media.AudioService$VolumeStreamState: void setLastAudibleIndex(int,int)> -> _SINK_
<android.media.AudioManager: void setParameters(java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> -> _SINK_
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost$Settings)> -> _SINK_
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb$Settings)> -> _SINK_
<android.media.AudioService: void setBluetoothScoOn(boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,int)> -> _SINK_
<android.media.AudioTrack: int setNotificationMarkerPosition(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustLocalOrRemoteStreamVolume(int,int)> -> _SINK_
<android.media.AudioManager: void setMasterMute(boolean,int)> -> _SINK_
<android.media.AudioManager: void setMasterMute(boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)> -> _SINK_
<android.media.AudioTrack: int setAuxEffectSendLevel(float)> -> _SINK_
<android.media.AudioRoutesInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.AudioService: void playSoundEffect(int)> -> _SINK_
<android.media.AudioRecord: int setNotificationMarkerPosition(int)> -> _SINK_
<android.media.AudioService: void setMasterVolume(int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustMasterVolume(int,int)> -> _SINK_
<android.media.AudioService: void setRemoteSubmixOn(boolean,int)> -> _SINK_
<android.media.AudioService: void setMode(int,android.os.IBinder)> -> _SINK_
<android.media.audiofx.AudioEffect: byte[] shortToByteArray(short)> -> _SINK_
<android.media.AudioManager: void setBluetoothScoOn(boolean)> -> _SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)> -> _SINK_
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setPlaybackInfoForRcc(int,int,int)> -> _SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)> -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])> -> _SINK_
<android.media.AudioTrack: int setLoopPoints(int,int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRemoteStreamVolume(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMasterVolume(int,int)> -> _SINK_
<android.media.AudioRecord: int setPositionNotificationPeriod(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)> -> _SINK_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)> -> _SINK_
<android.media.AudioService: void playSoundEffectVolume(int,float)> -> _SINK_
<android.media.AudioTrack: int setPlaybackHeadPosition(int)> -> _SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)> -> _SINK_
<android.media.audiofx.PresetReverb: void setPreset(short)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,android.os.IBinder)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)> -> _SINK_
<android.media.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> -> _SINK_
<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState,boolean)> -> _SINK_
<android.content.SyncStorageEngine: void addPeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle,long)> -> _SINK_
<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)> -> _SINK_
<com.google.android.picasasync.SyncState: boolean onSyncRequested(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SINK_
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> -> _SINK_
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)> -> _SINK_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.app.Instrumentation: void sendCharacterSync(int)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbum(long)> -> _SINK_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> -> _SINK_
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> -> _SINK_
<com.android.camera.MosaicPreviewRenderer$EGLHandler: void sendMessageSync(int)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: boolean bindToSyncAdapter(android.content.pm.RegisteredServicesCache$ServiceInfo,int)> -> _SINK_
<android.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> -> _SINK_
<com.android.exchange.adapter.AccountSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> -> _SINK_
<com.google.android.picasasync.MetadataSync$MetadataSyncTask: void performSync(android.content.SyncResult)> -> _SINK_
<android.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> -> _SINK_
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchFullImage: void performSync(android.content.SyncResult)> -> _SINK_
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> -> _SINK_
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)> -> _SINK_
<android.app.Instrumentation: void sendKeyDownUpSync(int)> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setParametersAsync(android.hardware.Camera$Parameters)> -> _SINK_
<android.app.Instrumentation: void sendStringSync(java.lang.String)> -> _SINK_
<com.android.providers.contacts.TransactionContext: void syncStateUpdated(long,java.lang.Object)> -> _SINK_
<android.os.CommonTimeConfig: int setClientSyncInterval(int)> -> _SINK_
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> -> _SINK_
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> -> _SINK_
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchAlbumCover: void performSync(android.content.SyncResult)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)> -> _SINK_
<android.os.Message: void setAsynchronous(boolean)> -> _SINK_
<com.google.android.picasasync.PicasaSyncManager: void performSync(com.google.android.picasasync.PicasaSyncManager$SyncSession)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.SyncStorageEngine: void removePeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> -> _SINK_
<com.android.exchange.adapter.AbstractSyncAdapter: void setPimSyncOptions(java.lang.Double,java.lang.String,com.android.exchange.adapter.Serializer)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SINK_
<com.android.providers.calendar.CalendarDatabaseHelper: void scheduleSync(android.accounts.Account,boolean,java.lang.String)> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setPreviewTextureAsync(android.graphics.SurfaceTexture)> -> _SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)> -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbumList(java.lang.String)> -> _SINK_
<android.media.IRingtonePlayer$Stub$Proxy: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchScreenNail: void performSync(android.content.SyncResult)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)> -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> -> _SINK_
<com.google.android.picasasync.UploadsManager$UploadTask: void performSync(android.content.SyncResult)> -> _SINK_
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)> -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromDevice(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter: void write(java.io.OutputStream)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)> -> _SINK_
<android.net.SntpClient: boolean requestTime(java.lang.String,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)> -> _SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)> -> _SINK_
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setScanResultHandling(int)> -> _SINK_
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pSsidPostfix(java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ObtainingIpState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDialogListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DialogListener)> -> _SINK_
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<android.net.wifi.WifiSsid$1: android.net.wifi.WifiSsid createFromParcel(android.os.Parcel)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallUidRule(int,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSink(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiApConfigStore$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)> -> _SINK_
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setSoWriteTimeout(java.net.Socket,int)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pGroupIdle(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)> -> _SINK_
<com.android.server.WifiService: void startScan(boolean)> -> _SINK_
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SINK_
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void advisePersistThreshold(long)> -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdDeviceInfo(java.lang.String)> -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean selectNetwork(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)> -> _SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)> -> _SINK_
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)> -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)> -> _SINK_
<com.android.server.net.NetworkIdentitySet: void writeToStream(java.io.DataOutputStream)> -> _SINK_
<android.net.BaseNetworkStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> -> _SINK_
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager$ServiceHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)> -> _SINK_
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingJoinState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> -> _SINK_
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void startReverseTethering(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> -> _SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setSerialNumber(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.EthernetDataTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkStatsSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$BssidStatistics: void updateLoss(int,double,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSource(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])> -> _SINK_
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> -> _SINK_
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> -> _SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.net.nsd.NsdManager: void setEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiApConfigStore$ActiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _SINK_
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void add(android.net.wifi.p2p.WifiP2pGroup)> -> _SINK_
<android.net.CaptivePortalTracker$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void write(java.io.OutputStream)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)> -> _SINK_
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)> -> _SINK_
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStateChanged(java.lang.String,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setTxtRecord(android.net.nsd.DnsSdTxtRecord)> -> _SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.BaseNetworkStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanType(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setConfigMethods(java.lang.String)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void limitReached(java.lang.String,java.lang.String)> -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.net.wifi.WifiNative: boolean setModelNumber(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: void setIpConfiguration(int,android.net.DhcpInfoInternal)> -> _SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager$WpsListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.BaseNetworkStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)> -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: void setScanInterval(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> -> _SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.AndroidHttpClient$LoggingConfiguration: void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)> -> _SINK_
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setConcurrencyPriority(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: void write(java.io.DataOutputStream)> -> _SINK_
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> -> _SINK_
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)> -> _SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> -> _SINK_
<android.net.BaseNetworkStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceRemoved(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setCountryCode(java.lang.String)> -> _SINK_
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiApConfigStore$InactiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.DhcpStateMachine$StoppedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> -> _SINK_
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> -> _SINK_
<android.net.DhcpStateMachine$WaitBeforeStartState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setModelName(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceStatusChanged(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pPowerSave(java.lang.String,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.EthernetDataTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromHex(java.lang.String)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdEnable(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)> -> _SINK_
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.providers.settings.SettingsBackupAgent$WifiNetworkSettings: void write(java.io.Writer)> -> _SINK_
<android.net.DummyDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> -> _SINK_
<android.net.wifi.WifiNative: boolean setBand(int)> -> _SINK_
<android.net.wifi.WifiNative: void setPowerSave(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.net.wifi.WifiNative: boolean setScanMode(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceClassDataActivityChanged(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverFailedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setManufacturer(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanMode(boolean)> -> _SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> -> _SINK_
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.BatteryStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<com.android.server.am.ActiveServices: boolean dumpService(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<android.service.wallpaper.WallpaperService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<android.util.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.NsdService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])> -> _SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)> -> _SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> -> _SINK_
<com.android.browser.BrowserBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.NotificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)> -> _SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.uiautomator.core.UiDevice: void dumpWindowHierarchy(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> -> _SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<com.android.server.am.ProviderMap: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)> -> _SINK_
<com.android.server.NetworkManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> -> _SINK_
<com.android.internal.telephony.RIL: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.pm.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpGraphicsHardwareUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.screenshot.SaveImageInBackgroundTask: com.android.systemui.screenshot.SaveImageInBackgroundData doInBackground(com.android.systemui.screenshot.SaveImageInBackgroundData[])> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.power.PowerManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<com.android.systemui.media.RingtonePlayer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActiveServices: boolean dumpServicesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpDbInfo(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.dreams.DreamManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.phone.TelephonyDebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService$CpuBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbDebuggingManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpBroadcastsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> -> _SINK_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)> -> _SINK_
<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.CallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.display.DisplayManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivitiesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<com.android.providers.media.MediaProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> -> _SINK_
<com.android.server.LocationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.pm.UserManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)> -> _SINK_
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.ActivityManagerService$MemBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.power.PowerUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.camera.EffectsRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProvidersLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)> -> _SINK_
<com.android.server.TextServicesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.io.RandomAccessFile: void setLength(long)> -> _SINK_
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)> -> _SINK_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> -> _SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)> -> _SINK_
<com.android.server.WifiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> -> _SINK_
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.DeviceStorageMonitorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.videoeditor.service.ApiService: void onIntentProcessed(android.content.Intent,android.media.videoeditor.VideoEditor,java.lang.Object,java.lang.Object,java.lang.Exception,boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesToGc(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<com.android.email.widget.WidgetManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.location.PassiveProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)> -> _SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.location.MockProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.DiskStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.MountService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.internal.telephony.DebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.AppWidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.email.service.AttachmentDownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.wm.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.media.videoeditor.OverlayFrame: void generateOverlayWithRenderingMode(android.media.videoeditor.MediaItem,android.media.videoeditor.OverlayFrame,int,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)> -> _SINK_
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)> -> _SINK_
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])> -> _SINK_
<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.google.android.apps.lightcycle.util.MetadataUtils: void writeMetadataIntoJpegFile(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpOomLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)> -> _SINK_
<com.android.server.UpdateLockService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)> -> _SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)> -> _SINK_
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.DataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.email.provider.WidgetProvider$WidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.inputmethod.latin.LatinIME: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: boolean writeStateToFileLocked(java.io.FileOutputStream)> -> _SINK_
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.BackupManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)> -> _SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> -> _SINK_
<com.android.server.SamplingProfilerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.CommonTimeManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.launcher2.Launcher: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.DropBoxManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)> -> _SINK_
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.CountryDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.AlarmManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)> -> _SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> -> _SINK_
<com.android.systemui.SystemUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_
<com.android.server.NativeDaemonConnector$ResponseQueue: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> -> _SINK_
<android.content.ContentService$ObserverNode: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,int[],android.util.SparseIntArray)> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)> -> _SINK_
<com.android.server.am.UsageStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)> -> _SINK_
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)> -> _SINK_
<android.os.SELinux: boolean restorecon(java.io.File)> -> _SINK_
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.server.search.Searchables: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> -> _SINK_
<com.android.providers.downloads.DownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService$DbBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)> -> _SINK_
<com.android.server.UiModeManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)> -> _SINK_
<com.android.server.am.ActivityManagerService$GraphicsBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.StatusBarManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpApplicationMemoryUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],boolean,java.io.PrintWriter,java.lang.StringBuilder,java.lang.StringBuilder)> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.soundrecorder.RemainingTimeCalculator: void setFileSizeLimit(java.io.File,long)> -> _SINK_
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)> -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.BroadcastQueue: boolean dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String,boolean)> -> _SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)> -> _SINK_
<android.net.LocalSocketImpl: void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)> -> _SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> -> _SINK_
<com.android.server.location.LocationProviderProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)> -> _SINK_
<com.android.contacts.interactions.TestLoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> -> _SINK_
<android.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.ContentService$ObserverNode$ObserverEntry: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,android.util.SparseIntArray)> -> _SINK_
<com.android.server.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.statusbar.policy.NetworkController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.ApnContext: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.systemui.SystemUIService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)> -> _SINK_
<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)> -> _SINK_
<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)> -> _SINK_
<com.android.server.input.InputManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpPendingIntentsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivity(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.DhcpStateMachine$WaitBeforeRenewalState: boolean processMessage(android.os.Message)> -> _SINK_
<android.hardware.SerialManager: android.hardware.SerialPort openSerialPort(java.lang.String,int)> -> _SINK_
<com.android.launcher2.Launcher: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)> -> _SINK_
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)> -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)> -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: void saveBitmap(android.graphics.Bitmap,java.io.File,java.lang.Object)> -> _SINK_
<android.net.EthernetDataTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void setWaveformExtractionComplete(java.lang.String)> -> _SINK_
<com.android.providers.media.MediaThumbRequest: android.net.Uri updateDatabase(android.graphics.Bitmap)> -> _SINK_
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> -> _SINK_
<com.android.inputmethod.latin.LatinImeLogger: void logOnManualSuggestion(java.lang.String,java.lang.String,int,com.android.inputmethod.latin.SuggestedWords)> -> _SINK_
<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)> -> _SINK_
<com.android.browser.PreloadedTabControl: void setQuery(java.lang.String)> -> _SINK_
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)> -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void performInstanceExpansion(long,long,java.lang.String,android.database.Cursor)> -> _SINK_
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<com.android.gallery3d.filtershow.FilterShowActivity: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.DhcpStateMachine$RunningState: boolean processMessage(android.os.Message)> -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.phone.OtaUtils: boolean maybeDoOtaCall(android.content.Context,android.os.Handler,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeData(java.lang.String,java.lang.String)> -> _SINK_
<android.app.WallpaperManager: void setResource(int)> -> _SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)> -> _SINK_
<com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper: void onPanoramaInfoLoaded(com.google.android.gms.common.ConnectionResult,int,android.content.Intent)> -> _SINK_
<android.widget.Spinner$DialogPopup: void setHorizontalOffset(int)> -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnError(java.lang.Object,java.lang.String)> -> _SINK_
<android.net.DhcpStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)> -> _SINK_
<com.android.uiautomator.core.InteractionController: boolean sendKey(int,int)> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictIOUtils: void writeDictionaryBinary(java.io.OutputStream,com.android.inputmethod.latin.UserHistoryDictIOUtils$BigramDictionaryInterface,com.android.inputmethod.latin.UserHistoryDictionaryBigramList,com.android.inputmethod.latin.makedict.FormatSpec$FormatOptions)> -> _SINK_
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)> -> _SINK_
<android.util.Slog: int println(int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherModel: void moveItemInDatabase(android.content.Context,com.android.launcher2.ItemInfo,long,int,int,int)> -> _SINK_
<android.speech.tts.FileSynthesisCallback: int audioAvailable(byte[],int,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)> -> _SINK_
<com.android.server.location.LocationProviderProxy: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)> -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)> -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<android.app.UiModeManager: void setNightMode(int)> -> _SINK_
<android.widget.Spinner$DialogPopup: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> -> _SINK_
<com.android.internal.backup.LocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> -> _SINK_
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void setRequiresReload(boolean)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: void openSession(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.browser.search.DefaultSearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<android.webkit.WebViewDatabaseClassic: void setFormData(java.lang.String,java.util.HashMap)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.sip.SipService$AutoRegistrationProcess: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> -> _SINK_
<android.os.UserManager: void setGuestEnabled(boolean)> -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)> -> _SINK_
<android.os.UserManager: void setUserIcon(int,android.graphics.Bitmap)> -> _SINK_
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<android.filterfw.core.Filter: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneInstances(java.lang.String)> -> _SINK_
<android.os.UserManager: void setUserName(int,java.lang.String)> -> _SINK_
<com.android.phone.OtaUtils: void setupOtaspCall(android.content.Intent)> -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer text(java.lang.String)> -> _SINK_
<com.android.exchange.provider.MailboxUtilities: void checkMailboxConsistency(android.content.Context,long)> -> _SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void setWaveformExtractionProgress(java.lang.String,int)> -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: void setParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int,int)> -> _SINK_
<com.android.server.location.MockProvider: void setLocation(android.location.Location)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: void setParameterBoolean(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,boolean)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setLightsOn(boolean)> -> _SINK_
<android.util.Log: int println(int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MtpContext: boolean copyFile(java.lang.String,android.mtp.MtpObjectInfo)> -> _SINK_
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void expandInstanceRangeLocked(long,long,java.lang.String)> -> _SINK_
<com.android.browser.XLargeUi: void setActiveTab(com.android.browser.Tab)> -> _SINK_
<android.webkit.CookieManagerClassic: void setCookie(java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.filterfw.core.Filter: void addProgramPort(java.lang.String,java.lang.String,java.lang.reflect.Field,java.lang.Class,boolean)> -> _SINK_
<com.android.browser.PhoneUi: void setActiveTab(com.android.browser.Tab)> -> _SINK_
<com.android.providers.downloads.DownloadProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnDone(java.lang.Object,java.lang.String)> -> _SINK_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])> -> _SINK_
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)> -> _SINK_
<com.android.launcher2.Launcher: boolean startActivitySafely(android.view.View,android.content.Intent,java.lang.Object)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<com.android.providers.media.MediaProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.camera.Util: void setGpsParameters(android.hardware.Camera$Parameters,android.location.Location)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setVibratePattern(int)> -> _SINK_
<com.android.camera.Storage: boolean updateImage(android.content.ContentResolver,android.net.Uri,java.lang.String,android.location.Location,int,byte[],int,int)> -> _SINK_
<android.filterfw.core.Filter: void addOutputBasedOnInput(java.lang.String,java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: void moveToState(android.app.Fragment,int,int,int,boolean)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: void initEffectsPreferences(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void updateInstancesLocked(android.content.ContentValues,long,boolean,android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)> -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)> -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: boolean setPanoramaDestination(java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.MediaItemView: boolean setBitmap(android.graphics.Bitmap,int,int)> -> _SINK_
<com.android.launcher2.Launcher: void openFolder(com.android.launcher2.FolderIcon)> -> _SINK_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$BaseProgramBuilder setShader(android.content.res.Resources,int)> -> _SINK_
<com.android.launcher2.LauncherModel: void modifyItemInDatabase(android.content.Context,com.android.launcher2.ItemInfo,long,int,int,int,int,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnStart(java.lang.Object,java.lang.String)> -> _SINK_
<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.uiautomator.core.InteractionController: boolean sendText(java.lang.String)> -> _SINK_
<android.app.UiModeManager: void enableCarMode(int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)> -> _SINK_
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.google.android.apps.lightcycle.util.FileUtil: void storeFile(java.io.InputStream,java.io.File)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,java.lang.String,int)> -> _SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackInformation(int,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)> -> _SINK_
<android.app.Service: void setForeground(boolean)> -> _SINK_
<com.android.videoeditor.KenBurnsActivity: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.launcher2.Launcher: boolean startActivity(android.view.View,android.content.Intent,java.lang.Object)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: void launchActivityWithAnimation(android.content.Intent,boolean,android.os.Bundle,android.os.Handler,java.lang.Runnable)> -> _SINK_
<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: void uncaughtException(java.lang.Thread,java.lang.Throwable)> -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolation(android.os.StrictMode$ViolationInfo)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.Spinner$DialogPopup: void setVerticalOffset(int)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)> -> _SINK_
<android.util.LogPrinter: void println(java.lang.String)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneInstancesPrevious(java.lang.String)> -> _SINK_
<com.android.providers.calendar.CalendarAlarmManager: void scheduleNextAlarm(boolean)> -> _SINK_
<com.android.camera.Storage: void writeFile(java.lang.String,byte[])> -> _SINK_
<android.filterfw.core.Filter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)> -> _SINK_
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])> -> _SINK_
<com.android.providers.downloads.DownloadReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> -> _SINK_
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)> -> _SINK_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)> -> _SINK_
<android.net.EthernetDataTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.view.ViewRootImpl$ViewRootHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.systemui.usb.UsbResolverActivity: void onIntentSelected(android.content.pm.ResolveInfo,android.content.Intent,boolean)> -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer data(int,java.lang.String)> -> _SINK_
<com.android.deskclock.timer.TimerReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: android.view.View addTransition(com.android.videoeditor.service.MovieTransition,java.lang.String)> -> _SINK_
<com.android.camera.CameraSettings: void initialCameraPictureSize(android.content.Context,android.hardware.Camera$Parameters)> -> _SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)> -> _SINK_
<com.android.exchange.EasSyncService: void setupProtocolVersion(com.android.exchange.EasSyncService,org.apache.http.Header)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: boolean process(java.util.EventObject)> -> _SINK_
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)> -> _SINK_
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SINK_
<com.android.exchange.provider.MailboxUtilities: void setFlagsAndChildrensParentKey(android.content.Context,android.database.Cursor,java.lang.String)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: void acquireInstanceRangeLocked(long,long,boolean,boolean,java.lang.String,boolean)> -> _SINK_
<android.view.View: void setHasTransientState(boolean)> -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_
<com.android.phone.sip.SipEditor$PreferenceKey: void setValue(java.lang.String)> -> _SINK_
<android.media.MediaScanner: void scanMtpFile(java.lang.String,java.lang.String,int,int)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.google.android.apps.lightcycle.xmp.XmpUtil: boolean writeXMPMeta(java.lang.String,com.adobe.xmp.XMPMeta)> -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: android.net.Uri doInBackground(com.android.gallery3d.filtershow.presets.ImagePreset[])> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setTransactionId(byte[])> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.mms.dom.smil.SmilElementImpl: void setId(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentDisposition(byte[])> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void setPremiumSmsPermission(java.lang.String,int)> -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideoVisibility(boolean)> -> _SINK_
<com.android.mms.ui.SlideView: void setVideoRegion(int,int,int,int)> -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.mms.dom.DocumentImpl: void setDocumentURI(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setDate(long)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setTextVisibility(boolean)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentId(byte[])> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setTextVisibility(boolean)> -> _SINK_
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: void setTransactionId(byte[])> -> _SINK_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> -> _SINK_
<com.android.providers.telephony.MmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setTop(int)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImageVisibility(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setReadReport(int)> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setPriority(int)> -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> -> _SINK_
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.mms.ui.MessageUtils: void recordSound(android.app.Activity,int,long)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setTextVisibility(boolean)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setContentLocation(byte[])> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setTransactionId(byte[])> -> _SINK_
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setReadStatus(int)> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setStatus(int)> -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> -> _SINK_
<com.android.mms.ui.ComposeMessageActivity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setBackgroundColor(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendConf: void setResponseStatus(int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setHeight(int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: void setSrc(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendConf: void setTransactionId(byte[])> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setDeliveryReport(int)> -> _SINK_
<com.android.mms.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setReadReport(int)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentLocation(byte[])> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.data.WorkingMessage: void setHasMultipleRecipients(boolean,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setMessageClass(byte[])> -> _SINK_
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.mms.data.WorkingMessage: void setHasEmail(boolean,boolean)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setBackgroundColor(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.PduParser: void parseContentTypeParams(java.io.ByteArrayInputStream,java.util.HashMap,java.lang.Integer)> -> _SINK_
<com.android.mms.util.SimpleCache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> -> _SINK_
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> -> _SINK_
<com.android.mms.ui.SlideView: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setContentClass(int)> -> _SINK_
<com.android.mms.data.WorkingMessage: void setLengthRequiresMms(boolean,boolean)> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setMessageId(byte[])> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.data.Conversation: void setDraftState(boolean)> -> _SINK_
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setReadStatus(int)> -> _SINK_
<com.android.mms.dom.AttrImpl: void setNodeValue(java.lang.String)> -> _SINK_
<com.android.mms.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.mms.util.SendingProgressTokenManager: void put(java.lang.Object,long)> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setDate(long)> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setTransactionId(byte[])> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentType(byte[])> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setDeliveryReport(int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setOctet(int,int)> -> _SINK_
<com.android.mms.ui.MessageUtils: void selectAudio(android.app.Activity,int)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideoVisibility(boolean)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setFit(java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImageVisibility(boolean)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.dom.DocumentImpl: void setStrictErrorChecking(boolean)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.ui.SlideView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.util.BackgroundLoaderManager: boolean addCallback(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: void updateParts(android.net.Uri,com.google.android.mms.pdu.PduBody,java.util.HashMap)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.google.android.mms.pdu.PduComposer: void arraycopy(byte[],int,int)> -> _SINK_
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: void setDur(float)> -> _SINK_
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: void setDur(float)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setMessageId(byte[])> -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setLongInteger(long,int)> -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: void setDur(float)> -> _SINK_
<com.android.mms.dom.DocumentImpl: void setXmlVersion(java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideView: void setTextRegion(int,int,int,int)> -> _SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setText(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setWidth(int)> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setTextString(byte[],int)> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.android.mms.util.Recycler$SmsRecycler: void setMessageLimit(android.content.Context,int)> -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setReportAllowed(int)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void appendEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)> -> _SINK_
<android.telephony.SmsCbMessage: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.data.RecipientIdCache: void updateNumbers(long,com.android.mms.data.ContactList)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImageRegionFit(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> -> _SINK_
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setWidth(int)> -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: void setTextString(byte[])> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void setPremiumSmsPermission(java.lang.String,int)> -> _SINK_
<com.android.mms.data.Conversation: void startDeleteAll(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean)> -> _SINK_
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.mms.ui.MessageListItem: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setLeft(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.data.Conversation: void startDelete(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean,java.util.Collection)> -> _SINK_
<com.android.mms.ui.SlideView: void setTextVisibility(boolean)> -> _SINK_
<com.android.mms.ui.MessagingPreferenceActivity: void enableNotifications(boolean,android.content.Context)> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setStatus(int)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendConf: void setMessageId(byte[])> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setContentType(byte[])> -> _SINK_
<com.android.mms.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideoVisibility(boolean)> -> _SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.mms.ui.SlideView: void setImageVisibility(boolean)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setTextVisibility(boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)> -> _SINK_
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> -> _SINK_
<com.android.mms.dom.NodeImpl: void setNodeValue(java.lang.String)> -> _SINK_
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setMessageSize(long)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setVideoVisibility(boolean)> -> _SINK_
<com.android.mms.ui.SlideView: void setImageRegion(int,int,int,int)> -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: void appendTextString(byte[])> -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setExpiry(long)> -> _SINK_
<com.google.android.mms.pdu.PduBody: void addPart(int,com.google.android.mms.pdu.PduPart)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setName(byte[])> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.mms.util.Recycler$MmsRecycler: void setMessageLimit(android.content.Context,int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setCharset(int)> -> _SINK_
<com.google.android.mms.pdu.QuotedPrintable: byte[] decodeQuotedPrintable(byte[])> -> _SINK_
<com.android.mms.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: void setReportAllowed(int)> -> _SINK_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> -> _SINK_
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setBcc(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.mms.ui.MessageListItem: void setImageVisibility(boolean)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideoVisibility(boolean)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveStatus(int)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setTextVisibility(boolean)> -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setMmsVersion(int)> -> _SINK_
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context,long)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setTextVisibility(boolean)> -> _SINK_
<com.android.mms.data.WorkingMessage: void send(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImageVisibility(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImageRegionFit(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setDeliveryReport(int)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setExpiry(long)> -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel set(int,com.android.mms.model.MediaModel)> -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setSubject(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: void setEndSync(java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.mms.ui.ComposeMessageActivity$43: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideView: void enableMMSConformanceMode(int,int,int,int)> -> _SINK_
<com.android.mms.data.Conversation: void startQuery(android.content.AsyncQueryHandler,int,java.lang.String)> -> _SINK_
<com.android.mms.util.NullItemLoadedFuture: void setIsDone(boolean)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setFilename(byte[])> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setTransactionId(byte[])> -> _SINK_
<com.android.mms.dom.NodeImpl: void setTextContent(java.lang.String)> -> _SINK_
<com.android.mms.ui.MessageListItem: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)> -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setSubject(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.mms.ui.ConversationList: android.content.Intent createAddContactIntent(java.lang.String)> -> _SINK_
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setHeight(int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImageVisibility(boolean)> -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setId(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.providers.telephony.SmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImageVisibility(boolean)> -> _SINK_
<com.android.mms.dom.NodeImpl: void setPrefix(java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setMessageSize(long)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> -> _SINK_
<com.android.mms.model.SlideshowModel: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.google.android.mms.pdu.PduComposer: void append(int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setContentType(byte[])> -> _SINK_
<com.google.android.mms.pdu.PduBody: boolean addPart(com.google.android.mms.pdu.PduPart)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setMessageClass(byte[])> -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: void setDur(float)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.mms.ui.SlideView: void setVideoVisibility(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setCc(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void setPremiumSmsPermission(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.mms.ui.ComposeMessageActivity: void onSaveInstanceState(android.os.Bundle)> -> _SINK_
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setMessageId(byte[])> -> _SINK_
<com.android.mms.model.SlideshowModel: java.util.HashMap openPartFiles(android.content.ContentResolver)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setDate(long)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> -> _SINK_
<com.android.mms.model.SlideModel: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.mms.ui.ConversationListItem: void setChecked(boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> -> _SINK_
<com.google.android.mms.pdu.SendReq: void setMessageClass(byte[])> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> -> _SINK_
<com.android.mms.ui.ConversationList$4: boolean onQueryTextSubmit(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri persistPart(com.google.android.mms.pdu.PduPart,long,java.util.HashMap)> -> _SINK_
<com.android.mms.ui.SlideView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveText(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setMessageId(byte[])> -> _SINK_
<com.android.mms.dom.DocumentImpl: void setXmlStandalone(boolean)> -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri move(android.net.Uri,android.net.Uri)> -> _SINK_
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideoVisibility(boolean)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setText(java.lang.String,java.lang.String)> -> _SINK_
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)> -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel set(int,com.android.mms.model.SlideModel)> -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setData(byte[])> -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.android.mms.ui.MessageListItem: void setImage(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setDate(long)> -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> -> _SINK_
<com.android.mms.util.ImageCacheService: void putImageData(java.lang.String,int,byte[])> -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setMessageType(int)> -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentTransferEncoding(byte[])> -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValues(com.google.android.mms.pdu.EncodedStringValue[],int)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,long,java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountWithDataSet: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: void setDefaultFilterHeaderText(int)> -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)> -> _SINK_
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForCommonDataKind: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.contacts.interactions.ImportExportDialogFragment: void show(android.app.FragmentManager,boolean)> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithNicknameMatch(long)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createGroupDeletionIntent(android.content.Context,long)> -> _SINK_
<com.android.contacts.calllog.CallLogListItemHelper: void setPhoneCallDetails(com.android.contacts.calllog.CallLogListItemViews,com.android.contacts.PhoneCallDetails,boolean)> -> _SINK_
<com.android.contacts.detail.ContactDetailTabCarousel: void restoreCurrentTab(int)> -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updatePhotoId(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void newContact(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: void setHeaderInvisible(int,boolean)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateHasPhoneNumber(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setVolumeControlStream(int)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithPhoneNumberMatch(long)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForRawContact(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.contacts.editor.SelectAccountDialogFragment: void show(android.app.FragmentManager,android.app.Fragment,int,com.android.contacts.util.AccountsListAdapter$AccountListFilter,android.os.Bundle)> -> _SINK_
<com.android.contacts.list.ContactListFilterView: void setActivated(boolean)> -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> -> _SINK_
<com.android.contacts.list.ContactListPinnedHeaderView: void setCountView(java.lang.String)> -> _SINK_
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPhone(android.view.View,com.android.contacts.list.ContactListFilter,boolean)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void markForAggregation(long,int,boolean)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void sendFetchVoicemailRequest(android.net.Uri)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setPermanentText(java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setSuperPrimary(boolean)> -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> -> _SINK_
<com.android.contacts.editor.KindSectionView: void setEnabled(boolean)> -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: void onPackageChanged(java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void restoreSavedState(android.os.Bundle)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void copyLongValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: void setSortOrder(int)> -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: void setPinnedSectionTitle(android.view.View,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> -> _SINK_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: void addComputedValues(android.content.ContentValues)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> -> _SINK_
<com.android.contacts.group.GroupEditorFragment: void loadMemberToAddToGroup(long,java.lang.String)> -> _SINK_
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onItemClicked(android.content.Intent)> -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setCallDetailsHeader(android.widget.TextView,com.android.contacts.PhoneCallDetails)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> -> _SINK_
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)> -> _SINK_
<com.android.contacts.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void copyStringFrom(com.android.contacts.model.RawContactDelta$ValuesDelta,java.lang.String)> -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction: void onLoadComplete(android.content.Loader,android.database.Cursor)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void updateContactVisible(com.android.providers.contacts.TransactionContext,long)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticFamilyName(java.lang.String)> -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl: void cacheBitmap(android.net.Uri,android.graphics.Bitmap,byte[])> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openDataFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setPositionSeekListener(android.widget.SeekBar$OnSeekBarChangeListener)> -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean,boolean)> -> _SINK_
<android.widget.QuickContactBadge: void setMode(int)> -> _SINK_
<com.android.email.activity.MessageViewFragmentBase$ContactStatusLoaderCallbacks: android.os.Bundle createArguments(java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)> -> _SINK_
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SINK_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateLookupKeyForRawContact(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> -> _SINK_
<com.android.providers.contacts.ProfileAwareUriMatcher: void addURI(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsPrimary(long,long,long)> -> _SINK_
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createNewRawContactIntent(android.content.Context,java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet,java.lang.Class,java.lang.String)> -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: void setFadingHeader(int,int,boolean)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void replaceStatusUpdate(java.lang.Long,long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)> -> _SINK_
<com.android.contacts.list.LegacyContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.providers.contacts.PhotoStore: long insert(com.android.providers.contacts.PhotoProcessor,boolean)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void saveValue(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createJoinContactsIntent(android.content.Context,long,long,boolean,java.lang.Class,java.lang.String)> -> _SINK_
<com.android.contacts.dialpad.DialpadImageButton: void setPressed(boolean)> -> _SINK_
<com.android.contacts.group.GroupDetailFragment: void setQuickContact(boolean)> -> _SINK_
<com.android.contacts.model.RawContact: void setAccount(com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setDisplayName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)> -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: long insert(android.content.ContentValues)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void markNewForAggregation(long,int)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateAggregateData(com.android.providers.contacts.TransactionContext,long)> -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateGenericWithTypeColumn(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<com.android.contacts.activities.ContactSelectionActivity: void startActivityAndForwardResult(android.content.Intent)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void insertNameLookup(long,long,int,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> -> _SINK_
<com.android.contacts.list.ContactListItemView: void setSectionHeader(java.lang.String)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticGivenName(java.lang.String)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForStructuredName: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.contacts.interactions.GroupDeletionDialogFragment: void show(android.app.FragmentManager,long,java.lang.String,boolean)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setClipPosition(int,int)> -> _SINK_
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSdCard(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDisplay(float,int)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)> -> _SINK_
<com.android.contacts.format.PrefixHighlighter: void setText(android.widget.TextView,java.lang.String,char[])> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: void setRawContactId(long)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: void notifyChange(boolean)> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForGroupMembership: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void updateRawContactDisplayName(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.contacts.list.JoinContactListFragment: void restoreSavedState(android.os.Bundle)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticMiddleName(java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactListItemView: void setData(char[],int)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayer(android.view.View)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> -> _SINK_
<com.android.contacts.interactions.GroupCreationDialogFragment: void onCompleted(java.lang.String)> -> _SINK_
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> -> _SINK_
<com.android.providers.contacts.aggregation.ProfileAggregator: void aggregateContact(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticGivenName(java.lang.String)> -> _SINK_
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle buildExtraBundle(java.lang.String[],int[])> -> _SINK_
<com.android.contacts.list.ContactListPinnedHeaderView: void setSectionHeader(java.lang.String)> -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setSuperPrimary(boolean)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisible(com.android.providers.contacts.TransactionContext,long,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSim(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoto: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setStartStopListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateEvent(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,java.lang.Integer)> -> _SINK_
<com.android.contacts.list.ContactListItemView: void setPresence(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment newInstance(int,int)> -> _SINK_
<com.android.contacts.SpecialCharSequenceMgr: boolean handleAdnEntry(android.content.Context,java.lang.String,android.widget.EditText)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void insertStatusUpdate(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)> -> _SINK_
<com.android.contacts.test.InjectedServices: void setSystemService(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Activity,int,com.android.contacts.list.ContactListFilter)> -> _SINK_
<com.android.contacts.editor.KindSectionView: void setTitleVisible(boolean)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createNewGroupIntent(android.content.Context,com.android.contacts.model.account.AccountWithDataSet,java.lang.String,long[],java.lang.Class,java.lang.String)> -> _SINK_
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> -> _SINK_
<com.android.contacts.util.ImageViewDrawableSetter: void setupContactPhoto(com.android.contacts.model.Contact,android.widget.ImageView)> -> _SINK_
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onCreateRawContactRequested(java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.contacts.socialwidget.SocialWidgetSettings: void setContactUri(android.content.Context,int,android.net.Uri)> -> _SINK_
<com.android.contacts.activities.DialtactsActivity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForIdentity: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: void toValues(android.content.ContentValues)> -> _SINK_
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.editor.GroupMembershipView: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setOverlayClickable(boolean)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)> -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)> -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsSuperPrimary(long,long,long)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticMiddleName(java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisibleOnlyIfChanged(com.android.providers.contacts.TransactionContext,long)> -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: void saveDefaultAndAllAccounts(com.android.contacts.model.account.AccountWithDataSet)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> -> _SINK_
<com.android.contacts.list.ContactPickerFragment: void restoreSavedState(android.os.Bundle)> -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void putNull(java.lang.String)> -> _SINK_
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPeople(android.view.View,com.android.contacts.list.ContactListFilter,boolean)> -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: void show(android.app.FragmentManager,java.util.ArrayList,com.android.contacts.interactions.PhoneNumberInteraction$InteractionType,java.lang.String)> -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setDeletable(boolean)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setAggregationSuggestionViewEnabled(boolean)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean)> -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onEditOtherContactRequested(android.net.Uri,java.util.ArrayList)> -> _SINK_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.providers.contacts.ContactsProvider2: boolean isWritableAccountWithDataSet(java.lang.String)> -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void setDeleteButtonVisible(boolean)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticFamilyName(java.lang.String)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createGroupUpdateIntent(android.content.Context,long,java.lang.String,long[],long[],java.lang.Class,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactListItemView: void setPhoneticName(char[],int)> -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.ContactsTransaction: void startTransactionForDb(android.database.sqlite.SQLiteDatabase,java.lang.String,android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)> -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomEditContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.net.Uri,android.os.Bundle,boolean)> -> _SINK_
<com.android.providers.contacts.TransactionContext: void rawContactInserted(long,long)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> -> _SINK_
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask: void onPostExecute(com.android.contacts.PhoneCallDetails[])> -> _SINK_
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackground(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateStarred(long)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForStructuredPostal: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithEmailMatch(long)> -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void matchName(long,int,java.lang.String,int,java.lang.String,int)> -> _SINK_
<com.android.contacts.quickcontact.ActionMultiMap: void put(java.lang.String,com.android.contacts.quickcontact.Action,boolean)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void copyStringValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addNameRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.preference.ContactsPreferences: void setDisplayOrder(int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setGroupRowId(long)> -> _SINK_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomCreateContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.os.Bundle)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.contacts.widget.TransitionAnimationView: void setMaskVisibility(boolean)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSetSuperPrimaryIntent(android.content.Context,long)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setCompanyName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setLocale(com.android.providers.contacts.ContactsProvider2,java.util.Locale)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerphoneListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: int markAllVisibleForAggregation(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void injectContactInfoForTest(java.lang.String,java.lang.String,com.android.contacts.calllog.ContactInfo)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSetRingtone(android.content.Context,android.net.Uri,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,byte[])> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsBuffering()> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createClearPrimaryIntent(android.content.Context,long)> -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayerValue(float)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator$MatchCandidateList: void add(java.lang.String,int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setDisplayName(java.lang.String)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: long onRawContactInsert(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.util.ExpirableCache: void put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.contacts.list.JoinContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.widget.AlphaTouchInterceptorOverlay: void setOverlayClickable(boolean)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateIncreaseButtonListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.contacts.group.GroupBrowseListFragment: void setAddAccountsVisibility(boolean)> -> _SINK_
<com.android.contacts.model.RawContactModifier: void migratePostal(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addEmailAddress(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactListItemView: void setSnippet(java.lang.String)> -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void setEnabled(boolean)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void setContactId(long,long)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerPhoneOn(boolean)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForGroupMembership: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addPhoneRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setFetchContentTimeout()> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: void loadDirectoryPartition(int,com.android.contacts.list.DirectoryPartition)> -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setDisplayName(java.lang.String)> -> _SINK_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind addKind(com.android.contacts.model.dataitem.DataKind)> -> _SINK_
<com.android.contacts.datepicker.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta insertChild(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)> -> _SINK_
<com.android.contacts.model.RawContactDeltaList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setPhoneCallDetails(com.android.contacts.PhoneCallDetailsViews,com.android.contacts.PhoneCallDetails,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)> -> _SINK_
<com.android.contacts.editor.StructuredNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForContact(android.database.sqlite.SQLiteDatabase,long)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,long)> -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(boolean)> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Fragment,int,com.android.contacts.list.ContactListFilter)> -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)> -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: void put(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta parseExtras(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,android.os.Bundle,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: void checkAndAddSourcePackageIntoValues(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> -> _SINK_
<com.android.contacts.list.PostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoto(byte[])> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> -> _SINK_
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setState(com.android.contacts.model.RawContactDelta,com.android.contacts.model.account.AccountType,com.android.contacts.editor.ViewIdGenerator,boolean)> -> _SINK_
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> -> _SINK_
<com.android.contacts.list.ContactTileView: void setHorizontalDividerVisibility(int)> -> _SINK_
<com.android.contacts.datepicker.DatePicker: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackgroundColorAlpha(int)> -> _SINK_
<com.android.contacts.interactions.GroupCreationDialogFragment: void show(android.app.FragmentManager,java.lang.String,java.lang.String,java.lang.String,com.android.contacts.interactions.GroupCreationDialogFragment$OnGroupCreatedListener)> -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoto: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> -> _SINK_
<com.android.contacts.editor.RawContactEditorView: void setEnabled(boolean)> -> _SINK_
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.contacts.model.dataitem.PhoneDataItem: void computeFormattedPhoneNumber(java.lang.String)> -> _SINK_
<com.android.contacts.list.PhoneNumberPickerFragment: void restoreSavedState(android.os.Bundle)> -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,int)> -> _SINK_
<com.android.contacts.list.ContactsSectionIndexer: void setProfileHeader(java.lang.String)> -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void put(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.contacts.detail.CarouselTab: void setLabel(java.lang.String)> -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setSocialSnippet(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView,android.widget.ImageView)> -> _SINK_
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> -> _SINK_
<com.android.contacts.model.RawContactDelta: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])> -> _SINK_
<com.android.contacts.list.AccountFilterActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.contacts.list.ContactTileListFragment: void enableQuickContact(boolean)> -> _SINK_
<com.android.contacts.detail.ActionsViewContainer: void setPosition(int)> -> _SINK_
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setTemporaryText(java.lang.String,long,java.util.concurrent.TimeUnit)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDecreaseButtonListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.contacts.util.DialogManager: void showDialogInView(android.view.View,android.os.Bundle)> -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setCurrentTimeForTest(long)> -> _SINK_
<com.android.contacts.list.EmailAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> -> _SINK_
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils: void setLocale(java.util.Locale)> -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsFetchingContent()> -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.contacts.model.dataitem.DataItem: void setMimeType(java.lang.String)> -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: void setWeekParams(java.util.HashMap,java.lang.String)> -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> -> _SINK_
<com.android.calendar.CalendarEventModel: void addAttendees(java.lang.String,com.android.common.Rfc822Validator)> -> _SINK_
<com.android.calendar.CalendarEventModel: void addAttendee(com.android.calendar.CalendarEventModel$Attendee)> -> _SINK_
<com.android.calendar.EventGeometry: void setHourHeight(float)> -> _SINK_
<com.android.calendar.Utils: android.content.Intent createEmailAttendeesIntent(android.content.res.Resources,java.lang.String,java.lang.String,java.util.List,java.util.List,java.lang.String)> -> _SINK_
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> -> _SINK_
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,java.lang.String)> -> _SINK_
<com.android.calendar.month.MonthByWeekAdapter: void setSelectedDay(android.text.format.Time)> -> _SINK_
<com.android.calendar.DayView: void setMoreAllDayEventsTextAlpha(int)> -> _SINK_
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> -> _SINK_
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.calendar.EventLoader: void loadEventsInBackground(int,java.util.ArrayList,int,java.lang.Runnable,java.lang.Runnable)> -> _SINK_
<com.android.calendar.Utils: void setTodayIcon(android.graphics.drawable.LayerDrawable,android.content.Context,java.lang.String)> -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: void setAsFirstDayAfterYesterday(int)> -> _SINK_
<com.android.calendar.ExpandableTextView: void setText(java.lang.String)> -> _SINK_
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setAlpha(int)> -> _SINK_
<com.android.calendar.CalendarController: void setTime(long)> -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> -> _SINK_
<com.android.calendar.event.AttendeesView: void setEnabled(boolean)> -> _SINK_
<com.android.calendar.CalendarController: void launchViewEvent(long,long,long,int)> -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$AsyncCalendarsUpdater: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> -> _SINK_
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> -> _SINK_
<com.android.calendar.AllInOneActivity: void setControlsOffset(int)> -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,boolean)> -> _SINK_
<com.android.calendar.Utils: void setDefaultView(android.content.Context,int)> -> _SINK_
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,boolean)> -> _SINK_
<com.android.calendar.alerts.AlertUtils: void setAlertFiredInSharedPrefs(android.content.Context,long,long,long)> -> _SINK_
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)> -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setDayOfMonth(int)> -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.calendar.alerts.AlertUtils$1: void set(int,long,android.app.PendingIntent)> -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void onClick(android.view.View)> -> _SINK_
<com.android.calendar.GeneralPreferences: void setDefaultValues(android.content.Context)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void setVisible(int,int)> -> _SINK_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> -> _SINK_
<com.android.calendar.agenda.AgendaListView: void setSelectedInstanceId(long)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> -> _SINK_
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> -> _SINK_
<com.android.calendar.Utils: void setUpSearchView(android.widget.SearchView,android.app.Activity)> -> _SINK_
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> -> _SINK_
<com.android.calendar.alerts.AlertUtils: android.content.Intent buildEventViewIntent(android.content.Context,long,long,long)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: void setSelectedView(android.view.View)> -> _SINK_
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> -> _SINK_
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> -> _SINK_
<com.android.calendar.agenda.AgendaListView: void setHideDeclinedEvents(boolean)> -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: void setClickedDay(float)> -> _SINK_
<com.android.calendar.alerts.AlertService$NotificationMgrWrapper: void notify(int,com.android.calendar.alerts.AlertService$NotificationWrapper)> -> _SINK_
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> -> _SINK_
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> -> _SINK_
<com.android.calendar.alerts.AlertUtils: android.content.ContentValues makeContentValues(long,long,long,long,int)> -> _SINK_
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> -> _SINK_
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: void setSelectedDay(android.text.format.Time)> -> _SINK_
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void print(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.CallManager: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)> -> _SINK_
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextCallFailCause(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setUseMock()> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaSubscriptionSource(int,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)> -> _SINK_
<com.android.server.DeviceStorageMonitorService$CacheFileDeletedObserver: void onEvent(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dispatchUserSwitch(com.android.server.am.UserStartedState,int,int)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallManager$1: void handleMessage(android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setCardState(int)> -> _SINK_
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setMute(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void putRecoveryAction(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)> -> _SINK_
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.CallManager: void setAudioMode()> -> _SINK_
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendTerminalResponse(java.lang.String,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setAutoProgressConnectingCall(boolean)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)> -> _SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> -> _SINK_
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void sendUnsolicited(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean switchUser(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setState(com.android.internal.telephony.DctConstants$State)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)> -> _SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendCdmaSms(byte[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void println(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnection: void setRetryCount(int)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCallWaiting(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)> -> _SINK_
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForNetworkLocked(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)> -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setPreferredVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)> -> _SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextDialFailImmediately(boolean)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForReady(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void saveClirSetting(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)> -> _SINK_
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery: void addQueryListener(int,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.app.IActivityManager$WaitResult,android.content.res.Configuration,android.os.Bundle,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.CallManager: boolean canConference(com.android.internal.telephony.Call)> -> _SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)> -> _SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)> -> _SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> -> _SINK_
<com.android.internal.telephony.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccCardStatus)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)> -> _SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> -> _SINK_
<android.telephony.ServiceState: void setStateOff()> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.CallManager: boolean startDtmf(char)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setVoiceRadioTech(int)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCellInfoChanged(java.util.List)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendDtmf(char,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> -> _SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCLIR(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> -> _SINK_
<android.telephony.ServiceState: void setStateOutOfService()> -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)> -> _SINK_
<android.telephony.ServiceState: void setCssIndicator(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)> -> _SINK_
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setAutoProgressConnectingCall(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setLocationUpdates(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setPhoneType(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)> -> _SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNextDialFailImmediately(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)> -> _SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> -> _SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)> -> _SINK_
<android.telephony.CellSignalStrengthCdma: void setDefaultValues()> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.CallManager: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setRetryCount(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)> -> _SINK_
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendUSSD(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DctConstants$State)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)> -> _SINK_
<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])> -> _SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForLocked(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int,int)> -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelope(java.lang.String,android.os.Message)> -> _SINK_
<com.android.browser.TabBar$TabView: void setDisplayTitle(java.lang.String)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.browser.Tab: void setParent(com.android.browser.Tab)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> -> _SINK_
<com.android.browser.Tab$3: void setupAutoFill(android.os.Message)> -> _SINK_
<com.android.browser.provider.SnapshotProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> -> _SINK_
<com.android.browser.NavTabScroller: void setScrollValue(int)> -> _SINK_
<com.android.browser.SnapshotTab: boolean saveViewState(android.content.ContentValues)> -> _SINK_
<com.android.browser.TabScrollView: void setScroll(int)> -> _SINK_
<com.android.browser.Controller: void start(android.content.Intent)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> -> _SINK_
<com.android.browser.TabBar$TabView: void setFavicon(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.browser.NavTabScroller: void setOrientation(int)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: int updateBookmarksInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> -> _SINK_
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> -> _SINK_
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> -> _SINK_
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> -> _SINK_
<com.android.browser.NavigationBarTablet: void setFocusState(boolean)> -> _SINK_
<com.android.browser.TabBar$TabView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> -> _SINK_
<com.android.browser.NavigationBarTablet: void setCurrentUrlIsBookmark(boolean)> -> _SINK_
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> -> _SINK_
<com.android.browser.DataController: void updateVisitedHistory(java.lang.String)> -> _SINK_
<com.android.browser.NavigationBarTablet: void setFavicon(android.graphics.Bitmap)> -> _SINK_
<com.android.browser.provider.BrowserProvider2: android.content.ContentValues extractImageValues(android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.browser.Tab: void setWebView(android.webkit.WebView)> -> _SINK_
<com.android.browser.homepages.Template$HashMapEntityData: void writeValue(java.io.OutputStream,java.lang.String)> -> _SINK_
<com.android.browser.NavigationBarTablet: void setTitleBar(com.android.browser.TitleBar)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)> -> _SINK_
<com.android.nfc.NfcService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.nfc.ndefpush.NdefPushClient: boolean push(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)> -> _SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SINK_
<com.android.nfc.NfcService$NfcServiceHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.nfc.handover.HandoverTransfer: void whitelistOppDevice(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.nfc.NfcDispatcher$DispatchInfo: boolean tryStartActivity(android.content.Intent)> -> _SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)> -> _SINK_
<com.android.nfc.NfcService$TagService: android.nfc.Tag rediscover(int)> -> _SINK_
<android.nfc.tech.MifareClassic: void decrement(int,int)> -> _SINK_
<com.android.nfc.NfcService: void onSeApduReceived(byte[])> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: void send(int,byte[])> -> _SINK_
<com.android.nfc.P2pLinkManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.nfc.P2pLinkManager: void onSendComplete(android.nfc.NdefMessage,long)> -> _SINK_
<com.android.nfc.NfceeAccessControl: boolean check(android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.nfc.NfcDispatcher: boolean tryTech(com.android.nfc.NfcDispatcher$DispatchInfo,android.nfc.Tag)> -> _SINK_
<com.android.nfc.handover.HandoverClient: android.nfc.NdefMessage sendHandoverRequest(android.nfc.NdefMessage)> -> _SINK_
<com.android.nfc.NfcService: void onCardEmulationAidSelected(byte[])> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.nfc.NfcService: void onSeMifareAccess(byte[])> -> _SINK_
<com.android.nfc.handover.HandoverService: void createHandoverTransfer(com.android.nfc.handover.PendingHandoverTransfer)> -> _SINK_
<android.nfc.tech.NfcF: void setTimeout(int)> -> _SINK_
<com.android.nfc.P2pLinkManager: boolean handleMessage(android.os.Message)> -> _SINK_
<android.nfc.tech.NfcA: void setTimeout(int)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pInitiatorModes(int)> -> _SINK_
<com.android.nfc.NfcService: void saveNfcOnSetting(boolean)> -> _SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)> -> _SINK_
<android.nfc.tech.MifareClassic: void setTimeout(int)> -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])> -> _SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setNdefPushCallback(android.nfc.INdefPushCallback)> -> _SINK_
<com.android.nfc.NfcDispatcher: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: void addNdefTechnology(android.nfc.NdefMessage,int,int,int,int,int)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SINK_
<com.android.nfc.NfcService: void sendMockNdefTag(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)> -> _SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setNdefPushCallback(android.nfc.INdefPushCallback)> -> _SINK_
<android.nfc.NfcActivityManager: void setOnNdefPushCompleteCallback(android.app.Activity,android.nfc.NfcAdapter$OnNdefPushCompleteCallback)> -> _SINK_
<android.nfc.tech.MifareUltralight: void setTimeout(int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setP2pModes(int,int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)> -> _SINK_
<com.android.nfc.NfceeAccessControl: boolean check(int,java.lang.String)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessageCallback(android.app.Activity,android.nfc.NfcAdapter$CreateNdefMessageCallback)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pTargetModes(int)> -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: boolean setTimeout(int,int)> -> _SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.nfc.handover.HandoverService$1: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.nfc.handover.HandoverService: void onTransferComplete(com.android.nfc.handover.HandoverTransfer,boolean)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setP2pModes(int,int)> -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void dispatch(android.nfc.Tag)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])> -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: void send(byte[])> -> _SINK_
<com.android.nfc.NfcService$TagService: int ndefWrite(int,android.nfc.NdefMessage)> -> _SINK_
<com.android.nfc.P2pLinkManager: void onReceiveComplete(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushContentUriCallback(android.app.Activity,android.nfc.NfcAdapter$CreateBeamUrisCallback)> -> _SINK_
<com.android.nfc.snep.SnepMessenger: void sendMessage(com.android.nfc.snep.SnepMessage)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.MifareClassic: void increment(int,int)> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> -> _SINK_
<com.android.nfc.NfceeAccessControl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushContentUri(android.app.Activity,android.net.Uri[])> -> _SINK_
<android.nfc.NfcAdapter: void setP2pModes(int,int)> -> _SINK_
<com.android.nfc.handover.HandoverManager: void whitelistOppDevice(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.android.nfc.NfcService$TagService: int setTimeout(int,int)> -> _SINK_
<com.android.nfc.handover.HandoverTransfer: void onScanCompleted(java.lang.String,android.net.Uri)> -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: boolean send(byte[])> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<android.webkit.WebView: void setScrollBarStyle(int)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler,java.lang.String)> -> _SINK_
<android.graphics.Matrix: void setTranslate(float,float)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)> -> _SINK_
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void startInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(int,short)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<com.android.server.NotificationManagerService: void setNotificationsEnabledForPackage(java.lang.String,boolean)> -> _SINK_
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void registerListener(android.os.storage.IMountServiceListener)> -> _SINK_
<android.os.storage.StorageManager$ObbListenerDelegate: void sendObbStateChanged(java.lang.String,int)> -> _SINK_
<com.android.deskclock.Alarms: void enableAlarm(android.content.Context,int,boolean)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void appPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.graphics.Picture$RecordingCanvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> -> _SINK_
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)> -> _SINK_
<gov.nist.javax.sip.address.Authority: void setUser(java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(int,char)> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<java.lang.System: void setErr(java.io.PrintStream)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> -> _SINK_
<android.view.GLES20DisplayList: void setTranslationY(float)> -> _SINK_
<android.view.GLES20DisplayList: void setTranslationX(float)> -> _SINK_
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.server.LightsService$Light: void pulse(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setMode(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setOOBInline(boolean)> -> _SINK_
<android.app.Activity: void openContextMenu(android.view.View)> -> _SINK_
<libcore.net.http.RequestHeaders: void setIfModifiedSince(java.util.Date)> -> _SINK_
<android.util.PrintWriterPrinter: void println(java.lang.String)> -> _SINK_
<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponents(android.content.ComponentName[])> -> _SINK_
<android.app.ActivityManagerProxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> -> _SINK_
<android.animation.Keyframe$FloatKeyframe: void setValue(java.lang.Object)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setIsdnSubaddress(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void backupAgentCreated(java.lang.String,android.os.IBinder)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> -> _SINK_
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortClient(int)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setCurrentClientId(int,android.app.PendingIntent,boolean)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> -> _SINK_
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> -> _SINK_
<android.os.Parcel: void writeFloatArray(float[])> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: boolean onTransitionThumbnails(java.lang.String,java.lang.String,android.graphics.Bitmap[],java.lang.Exception)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(gov.nist.core.NameValue)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: void setActionDown(float,float)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])> -> _SINK_
<java.net.PlainDatagramSocketImpl: void setTimeToLive(int)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchService: int onStartCommand(android.content.Intent,int,int)> -> _SINK_
<android.widget.TextView$Drawables: void resolveWithLayoutDirection(int)> -> _SINK_
<com.android.videoeditor.VideoEditorActivity: void setAspectRatio(int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean outOfMemory(android.view.IWindow)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)> -> _SINK_
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setClearsOutput(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpMemItems(java.io.PrintWriter,java.lang.String,java.util.ArrayList,boolean)> -> _SINK_
<android.location.INetInitiatedListener$Stub$Proxy: boolean sendNiResponse(int,int)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void tryPointerSpeed(int)> -> _SINK_
<java.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> -> _SINK_
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> -> _SINK_
<com.android.gallery3d.ui.PhotoView: void setSwipingEnabled(boolean)> -> _SINK_
<java.util.logging.Logger: void setParent(java.util.logging.Logger)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setPrefix(java.lang.String)> -> _SINK_
<android.preference.Preference: void setTitle(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> -> _SINK_
<android.view.View: void setBackground(android.graphics.drawable.Drawable)> -> _SINK_
<java.lang.reflect.Field: void setLong(java.lang.Object,long)> -> _SINK_
<java.text.DecimalFormat: void setMultiplier(int)> -> _SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)> -> _SINK_
<android.app.Dialog: void setFeatureDrawableResource(int,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.power.DisplayPowerState$1: void setValue(java.lang.Object,float)> -> _SINK_
<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)> -> _SINK_
<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAlwaysVisible(boolean)> -> _SINK_
<android.webkit.WebSettingsClassic: void setDefaultFontSize(int)> -> _SINK_
<com.android.camera.CameraSettings: boolean setCameraPictureSize(java.lang.String,java.util.List,android.hardware.Camera$Parameters)> -> _SINK_
<android.webkit.WebViewCore: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<gov.nist.javax.sip.header.CSeq: void setSequenceNumber(int)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setGlobal(boolean)> -> _SINK_
<com.android.server.display.DisplayManagerService: void setDisplayHasContent(int,boolean,boolean)> -> _SINK_
<com.android.deskclock.worldclock.Cities: void saveCitiesToSharedPrefs(android.content.SharedPreferences,java.util.HashMap)> -> _SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(byte[],int,int)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: void setDrawable(android.content.res.Resources,int)> -> _SINK_
<android.preference.ListPreference: void setEntryValues(int)> -> _SINK_
<org.apache.harmony.xml.ExpatParser$EntityParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void wifiFirmwareReload(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShowAsActionFlags(int)> -> _SINK_
<junit.runner.BaseTestRunner: void setPreference(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setClassName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: void setLocalStraighten(float)> -> _SINK_
<android.media.AsyncPlayer: void setUsesWakeLock(android.content.Context)> -> _SINK_
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)> -> _SINK_
<java.security.SecureRandom: void setSeed(long)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setInts(int[])> -> _SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void startAnimation(android.view.animation.Animation,android.view.animation.Animation)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setSelection(int,int)> -> _SINK_
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)> -> _SINK_
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: void setActive(boolean,boolean,java.lang.Runnable)> -> _SINK_
<javax.xml.validation.Validator: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker: void setKeyDetector(com.android.inputmethod.keyboard.KeyDetector)> -> _SINK_
<java.io.PrintStream: void println(double)> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setDisplayOrientation(int)> -> _SINK_
<com.google.common.collect.ForwardingMapEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<android.hardware.Camera$Parameters: void setZoom(int)> -> _SINK_
<android.widget.GridLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientExited(android.view.IWindow)> -> _SINK_
<android.view.View: void setHapticFeedbackEnabled(boolean)> -> _SINK_
<com.android.browser.PhoneUi$AnimScreen: void set(android.graphics.Bitmap)> -> _SINK_
<android.app.ActivityManagerProxy: void activityResumed(android.os.IBinder)> -> _SINK_
<android.widget.RemoteViews: void setLabelFor(int,int)> -> _SINK_
<android.filterfw.core.NativeFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.view.View: void setLongClickable(boolean)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: void setImagePreset(com.android.gallery3d.filtershow.presets.ImagePreset)> -> _SINK_
<android.os.CommonTimeConfig: int setMasterElectionGroupId(long)> -> _SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateDrawState(android.text.TextPaint)> -> _SINK_
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: void setFrameRate(android.hardware.Camera$Parameters)> -> _SINK_
<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setText(int)> -> _SINK_
<java.lang.ThreadGroup: void setMaxPriority(int)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void createSession(com.android.internal.view.IInputMethodCallback)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void toggleSoftInput(int,int)> -> _SINK_
<android.content.Intent: void setAllowFds(boolean)> -> _SINK_
<com.android.server.power.PowerManagerService: void setButtonBrightnessOverrideFromWindowManager(int)> -> _SINK_
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)> -> _SINK_
<com.android.server.am.ActivityManagerService: void publishContentProviders(android.app.IApplicationThread,java.util.List)> -> _SINK_
<com.android.server.wm.WindowStateAnimator$SurfaceTrace: void setPosition(float,float)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<org.apache.harmony.security.x509.CRLDistributionPoints: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: void setAlpha(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Implicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Explicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<gov.nist.core.InternalErrorHandler: void handleException(java.lang.String)> -> _SINK_
<android.renderscript.RenderScript: void setupDiskCache(java.io.File)> -> _SINK_
<android.view.animation.AnimationSet: void setFillAfter(boolean)> -> _SINK_
<android.app.Activity: void setProgress(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)> -> _SINK_
<java.util.EnumMap$Entry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<com.android.server.dreams.DreamManagerService: void setDreamComponents(android.content.ComponentName[])> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> -> _SINK_
<com.android.phone.DTMFTwelveKeyDialer: void startTone(char,boolean)> -> _SINK_
<android.widget.TextView: void setInputType(int)> -> _SINK_
<android.widget.TableRow$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setIfModifiedSince(long)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable: void setState(int[])> -> _SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setPictureSize(int,int)> -> _SINK_
<android.media.MediaRecorder: void setAudioSamplingRate(int)> -> _SINK_
<java.util.Date: void setHours(int)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$MainHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void focusSearch(long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<android.webkit.WebView$PrivateAccess: void setMeasuredDimension(int,int)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setMetadata(int,android.os.Bundle)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchSystemUiVisibilityChanged(int,int,int,int)> -> _SINK_
<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.PinFailureLogger: void log(java.lang.String,boolean,boolean,java.util.List)> -> _SINK_
<com.android.videoeditor.service.ApiService: void insertAlphaTransition(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,int,int,int,boolean)> -> _SINK_
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManager(int)> -> _SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setRefresher(java.lang.String)> -> _SINK_
<java.text.MessageFormat: void setFormats(java.text.Format[])> -> _SINK_
<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()> -> _SINK_
<android.webkit.ZoomManager: void setInitialScaleInPercent(int)> -> _SINK_
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)> -> _SINK_
<com.android.server.power.DisplayPowerState$1: void setValue(com.android.server.power.DisplayPowerState,float)> -> _SINK_
<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])> -> _SINK_
<android.app.ActivityManagerProxy: boolean refContentProvider(android.os.IBinder,int,int)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)> -> _SINK_
<com.google.common.collect.Lists$ReverseList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)> -> _SINK_
<android.preference.Preference: boolean persistLong(long)> -> _SINK_
<android.filterfw.io.GraphReader: void addReferencesByMap(android.filterfw.core.KeyValueMap)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void disableNat(java.lang.String,java.lang.String)> -> _SINK_
<java.net.Socks4Message: void setCommandOrResult(int)> -> _SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int)> -> _SINK_
<java.text.DecimalFormat: void setGroupingSize(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void detachPppd(java.lang.String)> -> _SINK_
<java.security.SecureRandom: void setSeed(byte[])> -> _SINK_
<com.google.android.picasasync.PrefetchHelper: void setAlbumCachingFlag(long,int)> -> _SINK_
<com.android.server.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic: void sendBatchableInputMessage(int,int,int,java.lang.Object)> -> _SINK_
<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)> -> _SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.AppWidgetService: int allocateAppWidgetId(java.lang.String,int)> -> _SINK_
<android.app.Activity: void setVolumeControlStream(int)> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: void putSelectedSpellChecker(java.lang.String)> -> _SINK_
<com.android.server.display.OverlayDisplayWindow: void dump(java.io.PrintWriter)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> -> _SINK_
<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService: void readPermission(org.xmlpull.v1.XmlPullParser,java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: void setAutoFillable(int)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)> -> _SINK_
<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)> -> _SINK_
<com.google.android.picasastore.PicasaStoreFacade: void broadcastOperationReport(java.lang.String,long,long,int,long,long)> -> _SINK_
<java.util.BitSet: void set(int,int,boolean)> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: void setLayoutTransition(android.animation.LayoutTransition)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean checkPassword(byte[],int)> -> _SINK_
<android.webkit.WebViewClassic: void setNetworkAvailable(boolean)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.gallery3d.app.Bookmarker: void setBookmark(android.net.Uri,int,int)> -> _SINK_
<com.android.server.IntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setDomain(java.lang.String)> -> _SINK_
<android.database.BulkCursorProxy: void onMove(int)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean hasGrant(int,java.lang.String)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)> -> _SINK_
<com.android.launcher2.Launcher: void processShortcut(android.content.Intent)> -> _SINK_
<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)> -> _SINK_
<com.android.server.location.MockProvider: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> -> _SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.text.style.CharacterStyle$Passthrough: void updateDrawState(android.text.TextPaint)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean dumpWindows(java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: void setMetric(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl$GLState: void setColorMode(int,float)> -> _SINK_
<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<com.android.systemui.statusbar.policy.ToggleSlider: void setMax(int)> -> _SINK_
<android.app.ContextImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemFeature(java.lang.String)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: boolean onMediaItemThumbnail(java.lang.String,java.lang.String,android.graphics.Bitmap,int,int,java.lang.Exception)> -> _SINK_
<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.View,int,java.lang.Object)> -> _SINK_
<android.util.Property: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.widget.TextView: void setTextSize(int,float)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.EventLogTags: void writePowerScreenBroadcastSend(int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardView: boolean setShifted(boolean)> -> _SINK_
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<com.android.camera.VideoController: void setCameraId(int)> -> _SINK_
<android.os.storage.IMountServiceListener$Stub$Proxy: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void startKeepAliveProcess(int,com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)> -> _SINK_
<com.android.phone.NotificationMgr: void notifyMissedCall(java.lang.String,java.lang.String,java.lang.String,android.graphics.drawable.Drawable,android.graphics.Bitmap,long)> -> _SINK_
<android.webkit.WebView: void saveWebArchive(java.lang.String)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: void setLocalFlip(com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)> -> _SINK_
<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void writeAppData(byte[],int,int)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setHost(gov.nist.core.Host)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: boolean dismiss(android.view.SurfaceSession,long,float,int,int)> -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)> -> _SINK_
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int)> -> _SINK_
<com.android.server.NsdService$NsdStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.os.Registrant: void notifyResult(java.lang.Object)> -> _SINK_
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)> -> _SINK_
<android.graphics.Matrix: void setRotate(float,float,float)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIServer(int)> -> _SINK_
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: void setLocalRotation(float)> -> _SINK_
<com.android.server.TextServicesManagerService: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> -> _SINK_
<android.widget.TextView: void setCursorPosition_internal(int,int)> -> _SINK_
<android.widget.TextView: void setAllCaps(boolean)> -> _SINK_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onUsbMassStorageConnectionChanged(boolean)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatJellyBean: boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle)> -> _SINK_
<com.android.deskclock.DigitalClock$AmPm: void setShowAmPm(boolean)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)> -> _SINK_
<com.android.commands.bmgr.Bmgr$RestoreObserver: void restoreFinished(int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquired(int)> -> _SINK_
<android.mtp.MtpDatabase: void addStorage(android.mtp.MtpStorage)> -> _SINK_
<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)> -> _SINK_
<android.content.SyncStorageEngine: void setBackoff(android.accounts.Account,int,java.lang.String,long,long)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<com.android.server.power.PowerManagerService: void setStayOnSetting(int)> -> _SINK_
<com.android.launcher2.Launcher: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> -> _SINK_
<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<com.android.wallpaper.fall.ScriptC_fall: void bind_g_Constants(com.android.wallpaper.fall.ScriptField_Constants)> -> _SINK_
<android.widget.AbsListView: void setItemChecked(int,boolean)> -> _SINK_
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<java.text.DateFormatSymbols: void setMonths(java.lang.String[])> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: void setCropBounds(android.graphics.RectF)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: void setPressed(boolean)> -> _SINK_
<android.webkit.WebSettingsClassic: void setPluginsPath(java.lang.String)> -> _SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.camera.ListPreference: void setValueIndex(int)> -> _SINK_
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String copyResourceToContainer(android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showMySoftInput(android.os.IBinder,int)> -> _SINK_
<android.app.ActivityManagerProxy: void setProcessLimit(int)> -> _SINK_
<com.android.musicfx.Compatibility$Receiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.view.View: void setVisibility(int)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setTTL(int)> -> _SINK_
<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)> -> _SINK_
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> -> _SINK_
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.gallery3d.ui.RelativePosition: void setReferencePosition(int,int)> -> _SINK_
<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)> -> _SINK_
<android.view.VelocityTracker: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.graphics.RectF: void set(android.graphics.RectF)> -> _SINK_
<android.widget.HorizontalScrollView: void setOverScrollMode(int)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: boolean setRotationInTransaction(int,android.view.SurfaceSession,long,float,int,int)> -> _SINK_
<android.widget.ExpandableListView: void setSelectedGroup(int)> -> _SINK_
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setUserParam(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void forceStopPackage(java.lang.String,int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void insertCrossfadeTransition(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,int)> -> _SINK_
<android.filterfw.core.GLFrame: void setTextureParameter(int,int)> -> _SINK_
<android.media.effect.effects.BackDropperEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.gallery3d.util.InterruptableOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setSchema(javax.xml.validation.Schema)> -> _SINK_
<com.android.launcher2.Launcher: void addWidgetToAutoAdvanceIfNeeded(android.view.View,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setTargetRect(float,float,float,float)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<com.android.gallery3d.filtershow.ui.FramedTextButton: void setTextFrom(int)> -> _SINK_
<android.app.ActivityThread$EventLoggingReporter: void report(int,java.lang.Object[])> -> _SINK_
<android.widget.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: void connectWifiDisplay(java.lang.String)> -> _SINK_
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<android.app.IUiModeManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor remove(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.wm.WindowState,float,float,float,float)> -> _SINK_
<android.graphics.Matrix: void setScale(float,float,float,float)> -> _SINK_
<com.android.launcher2.Workspace: void onDrop(com.android.launcher2.DropTarget$DragObject)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)> -> _SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.graphics.Paint: void setBidiFlags(int)> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void sessionCreated(com.android.internal.view.IInputMethodSession)> -> _SINK_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceQuota(java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)> -> _SINK_
<android.widget.ToggleButton: void setChecked(boolean)> -> _SINK_
<com.android.commands.monkey.MonkeySourceNetwork: void setVerbose(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)> -> _SINK_
<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)> -> _SINK_
<com.android.server.am.ReceiverList: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.vcard.VCardUtils$QuotedPrintableCodecPort: byte[] decodeQuotedPrintable(byte[])> -> _SINK_
<org.apache.harmony.security.x509.Extensions: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<com.android.server.EventLogTags: void writeUnknownSourcesEnabled(int)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: boolean hasKeys(int,int,int[],boolean[])> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$1: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBarView: void setDelegateView(android.view.View)> -> _SINK_
<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)> -> _SINK_
<android.accessibilityservice.AccessibilityService: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> -> _SINK_
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> -> _SINK_
<android.filterpacks.imageproc.SimpleImageFilter: void process(android.filterfw.core.FilterContext)> -> _SINK_
<android.app.ActivityManagerProxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)> -> _SINK_
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setMaximumScreenOffTimeoutFromDeviceAdmin(int)> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_
<com.android.videoeditor.service.ApiService: void insertSlidingTransition(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,int,int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void deviceDetached(android.hardware.usb.UsbDevice)> -> _SINK_
<com.android.videoeditor.service.ApiService: void removeAudioTrack(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsDataScanStart(long)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionaryBigramList: void updateBigram(java.lang.String,java.lang.String,byte)> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: void bindView(android.view.View,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCGI3GPP(java.lang.String)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> -> _SINK_
<android.webkit.ViewStateSerializer: boolean serializeViewState(java.io.OutputStream,android.webkit.WebViewCore$DrawData)> -> _SINK_
<android.content.SyncStorageEngine: void setDelayUntilTime(android.accounts.Account,int,java.lang.String,long)> -> _SINK_
<com.android.browser.ComboViewActivity: void openSnapshot(long)> -> _SINK_
<com.android.server.pm.PackageVerificationState: void addSufficientVerifier(int)> -> _SINK_
<android.webkit.WebViewClassic$PrivateHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setUp(boolean)> -> _SINK_
<com.android.deskclock.timer.CountingTimerView: void setTextColor(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float[],int,int)> -> _SINK_
<android.filterfw.core.FieldPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setUriParameter(gov.nist.core.NameValue)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)> -> _SINK_
<com.android.server.input.InputManagerService: void setDisplayViewports(com.android.server.display.DisplayViewport,com.android.server.display.DisplayViewport)> -> _SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler)> -> _SINK_
<android.os.Messenger: void send(android.os.Message)> -> _SINK_
<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)> -> _SINK_
<com.android.camera.PieController: void addItem(java.lang.String,float,float)> -> _SINK_
<android.os.IMessenger$Stub$Proxy: void send(android.os.Message)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int loadLanguage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.widget.AbsListView: void setFriction(float)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)> -> _SINK_
<com.android.gallery3d.util.ReverseGeocoder: android.location.Address lookupAddress(double,double,boolean)> -> _SINK_
<com.android.gallery3d.app.PhotoPageProgressBar: void setProgress(int)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean installApk(com.android.server.BackupManagerService$FileMetadata,java.lang.String,java.io.InputStream)> -> _SINK_
<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$WallpaperDrawable: void setAlpha(int)> -> _SINK_
<com.android.inputmethod.latin.ImfUtils: void setAdditionalInputMethodSubtypes(android.content.Context,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<com.android.systemui.statusbar.NotificationData$Entry: boolean setUserExpanded(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService$ServiceMediaProcessingProgressListener: void onProgress(java.lang.Object,int,int)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)> -> _SINK_
<android.widget.DatePicker: void setMaxDate(long)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransition(java.lang.String,int,int,android.os.IRemoteCallback)> -> _SINK_
<android.widget.LinearLayout: void setHorizontalGravity(int)> -> _SINK_
<android.text.HtmlToSpannedConverter: void processingInstruction(java.lang.String,java.lang.String)> -> _SINK_
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,int)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> -> _SINK_
<com.android.videoeditor.LoadPreviewBitmapTask: void onPostExecute(android.graphics.Bitmap)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleNative: void setProgressCallback(int,com.google.android.apps.lightcycle.panorama.LightCycleView$ProgressCallback)> -> _SINK_
<com.android.internal.view.menu.ActionMenuView: boolean invokeItem(com.android.internal.view.menu.MenuItemImpl)> -> _SINK_
<android.view.Surface: void setLayerStack(int)> -> _SINK_
<com.android.org.bouncycastle.util.io.Streams: void pipeAll(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)> -> _SINK_
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)> -> _SINK_
<com.android.camera.ui.Switch: void setChecked(boolean)> -> _SINK_
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setCurrentUser(int)> -> _SINK_
<android.view.animation.Transformation: void set(android.view.animation.Transformation)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int)> -> _SINK_
<javax.obex.ClientSession: javax.obex.HeaderSet delete(javax.obex.HeaderSet)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: void setVibrateEnabled(boolean)> -> _SINK_
<gov.nist.javax.sip.header.extensions.ReferredBy: void setValue(java.lang.String)> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])> -> _SINK_
<android.view.GLES20DisplayList: void setStaticMatrix(android.graphics.Matrix)> -> _SINK_
<com.android.inputmethod.latin.ExpandableDictionary: int setBigramAndGetFrequency(java.lang.String,java.lang.String,com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams)> -> _SINK_
<android.service.dreams.IDreamManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph: void add(android.view.View)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)> -> _SINK_
<com.android.gallery3d.ui.SlotView: boolean setSlotCount(int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClassName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.os.WorkSource: void set(int)> -> _SINK_
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> -> _SINK_
<android.os.Parcel: void writeException(java.lang.Exception)> -> _SINK_
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)> -> _SINK_
<com.android.deskclock.DigitalClock$AmPm: void setIsMorning(boolean)> -> _SINK_
<android.view.View: void setSaveEnabled(boolean)> -> _SINK_
<android.webkit.ZoomManager: boolean onNewPicture(android.webkit.WebViewCore$DrawData)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: boolean removeUser(int)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setHintText(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void removeAppToken(android.os.IBinder)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.util.SparseArray: void append(int,java.lang.Object)> -> _SINK_
<android.filterfw.core.GLFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(float)> -> _SINK_
<java.net.Socket: void setReuseAddress(boolean)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: void setUtilityPanel(android.content.Context,android.view.View,android.view.View,android.view.View,android.view.View)> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: void setPictureWidth(android.hardware.Camera$Parameters,int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.Pano2dPreviewOverlay: void setTextureId(int)> -> _SINK_
<android.content.Intent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.gesture.GestureStore: void addGesture(java.lang.String,android.gesture.Gesture)> -> _SINK_
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.view.GLES20DisplayList: void setCaching(boolean)> -> _SINK_
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: void setCurrentFilter(com.android.gallery3d.filtershow.filters.ImageFilter)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: void engineShown(android.service.wallpaper.IWallpaperEngine)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void freezeRotation(int)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onAudioTrackBoundariesSet(java.lang.String,java.lang.String,long,long,java.lang.Exception)> -> _SINK_
<android.widget.CompoundButton$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: void doProcessEventRawTimes(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.IUpdateLock$Stub$Proxy: void releaseUpdateLock(android.os.IBinder)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setIntegrityProtected(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)> -> _SINK_
<java.net.MulticastSocket: void setLoopbackMode(boolean)> -> _SINK_
<android.graphics.Paint: void set(android.graphics.Paint)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> -> _SINK_
<gov.nist.javax.sip.header.ContentDisposition: void setHandling(java.lang.String)> -> _SINK_
<android.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ProgressBar: void setVisibility(int)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.google.common.io.ByteStreams: void write(byte[],com.google.common.io.OutputSupplier)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void setCurrentUser(int)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)> -> _SINK_
<com.android.camera.ActivityBase: void setContentView(int)> -> _SINK_
<android.filterfw.core.Frame: void setGenericObjectValue(java.lang.Object)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> -> _SINK_
<android.webkit.HTML5VideoView: void setVideoURI(java.lang.String,android.webkit.HTML5VideoViewProxy)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void notifyScreenOn(boolean)> -> _SINK_
<android.widget.AbsListView: void setFilterText(java.lang.String)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setGroupingUsed(boolean)> -> _SINK_
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> -> _SINK_
<android.view.View: void setClickable(boolean)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendInvite(android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String,java.lang.String,gov.nist.javax.sip.header.extensions.ReferredByHeader,java.lang.String)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.database.ContentObservable: void notifyChange(boolean)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setUseCaches(boolean)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: void <init>(java.util.Properties)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1UTCTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskToBack(int)> -> _SINK_
<android.app.Fragment: void startActivity(android.content.Intent)> -> _SINK_
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> -> _SINK_
<com.android.server.am.ActivityStack: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String,int)> -> _SINK_
<android.graphics.drawable.StateListDrawable: void setLayoutDirection(int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void hideSoftInput(int,android.os.ResultReceiver)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateRotation(boolean,boolean)> -> _SINK_
<java.util.zip.Adler32: void update(byte[],int,int)> -> _SINK_
<com.android.camera.ui.ZoomRenderer: void setZoom(int)> -> _SINK_
<android.telephony.CellSignalStrengthLte: void setDefaultValues()> -> _SINK_
<com.android.server.AppWidgetService: int[] startListeningAsUser(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List,int)> -> _SINK_
<java.util.BitSet: void set(int)> -> _SINK_
<android.app.Notification: void setUser(android.os.UserHandle)> -> _SINK_
<com.android.server.wm.WindowStateAnimator: void setWallpaperOffset(int,int)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUtf8String(java.nio.ByteBuffer,java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void disableIpv6(java.lang.String)> -> _SINK_
<android.widget.TabWidget: void setDividerDrawable(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -> _SINK_
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> -> _SINK_
<android.preference.DialogPreference: void setDialogIcon(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void readFromParcelLocked(android.os.Parcel)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfosResult(java.util.List,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupStart(java.lang.String)> -> _SINK_
<android.view.View: void setTextDirection(int)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setPreviewDisplay(android.view.SurfaceHolder)> -> _SINK_
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void disableCarMode(int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setUserPassword(java.lang.String)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void setDesiredSize(int,int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setContentDescription(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.google.android.picasastore.HttpUtils: java.io.InputStream openInputStream(java.lang.String)> -> _SINK_
<com.android.launcher2.Launcher: void bindFolders(java.util.HashMap)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _SINK_
<com.android.server.power.DisplayPowerState$2: void setValue(java.lang.Object,int)> -> _SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short[],int,int)> -> _SINK_
<com.android.launcher2.PagedView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<com.android.server.wm.Session: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidSignatures(int,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void clearInterfaceAddresses(java.lang.String)> -> _SINK_
<com.android.server.am.EventLogTags: void writeConfigurationChanged(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleWindowVisibility(android.os.IBinder,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchKeyEvent(int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic: void setSelection(int,int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<gov.nist.core.DuplicateNameValueList: void set(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void setSelection(int,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$2: void setNeedsInput(boolean)> -> _SINK_
<java.text.DecimalFormat: void setParseIntegerOnly(boolean)> -> _SINK_
<android.widget.AdapterViewAnimator: void setInAnimation(android.content.Context,int)> -> _SINK_
<android.graphics.Matrix: void setSkew(float,float)> -> _SINK_
<android.app.ActivityManagerProxy: int stopUser(int,android.app.IStopUserCallback)> -> _SINK_
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: void setAlpha(int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setAlpha(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppWillBeHidden(android.os.IBinder)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: void setActionDown(float,float)> -> _SINK_
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)> -> _SINK_
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)> -> _SINK_
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setMediaItemBoundaries(android.content.Context,java.lang.String,java.lang.String,long,long)> -> _SINK_
<android.support.v4.view.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<com.android.commands.am.Am$MyActivityController: int appNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.internal.widget.RotarySelector: void setLeftHandleResource(int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setDropdownSelectedPosition(int)> -> _SINK_
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)> -> _SINK_
<android.view.Surface: void setPosition(float,float)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: void clearDirectory(java.lang.String)> -> _SINK_
<java.util.HashSet: boolean add(java.lang.Object)> -> _SINK_
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendPing(byte[],int)> -> _SINK_
<android.content.SyncAdaptersCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setChunkedStreamingMode(int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void clearDefaults(java.lang.String,int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int)> -> _SINK_
<android.app.DownloadManager: void setAccessAllDownloads(boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setQop(java.lang.String)> -> _SINK_
<com.android.commands.monkey.Monkey$ActivityController: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)> -> _SINK_
<android.content.SyncContext: void setStatusText(java.lang.String)> -> _SINK_
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)> -> _SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_
<java.net.Socket: void setSoLinger(boolean,int)> -> _SINK_
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)> -> _SINK_
<com.beetstra.jutf7.UTF7StyleCharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1StringType: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setColor(int)> -> _SINK_
<com.android.gallery3d.filtershow.presets.ImagePreset: void setGeometry(com.android.gallery3d.filtershow.imageshow.GeometryMetadata)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)> -> _SINK_
<com.android.server.NotificationManagerService: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void moved(int,int)> -> _SINK_
<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodFileManager: void addInputMethodSubtypes(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void unbindRemoteViewsService(int,android.content.Intent,int)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,float)> -> _SINK_
<com.google.common.collect.Lists$AbstractListWrapper: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SINK_
<com.android.server.ClipboardService: void setPrimaryClip(android.content.ClipData)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setBiometricWeakLivelinessEnabled(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)> -> _SINK_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.Path: void setValue(java.lang.String)> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction: void bindConstants(android.renderscript.ProgramVertexFixedFunction$Constants)> -> _SINK_
<com.android.gallery3d.app.PhotoPage: void setSwipingEnabled(boolean)> -> _SINK_
<android.widget.EditText: void setSelection(int,int)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)> -> _SINK_
<android.graphics.ColorMatrix: void setRotate(int,float)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void writeLength(int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setUser(java.lang.String)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: void setPanelController(com.android.gallery3d.filtershow.PanelController)> -> _SINK_
<android.filterfw.core.VertexFrame: void setInts(int[])> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void userActivity(long,int,int)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void add(int,android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchAppVisibility(boolean)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void set(android.widget.RemoteViewsAdapter$RemoteViewsMetaData)> -> _SINK_
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void addActivity(android.content.pm.PackageParser$Activity,java.lang.String)> -> _SINK_
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)> -> _SINK_
<gov.nist.core.MultiValueMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.GLES20DisplayList: void setTransformationInfo(float,float,float,float,float,float,float,float)> -> _SINK_
<android.app.ActivityManagerProxy: void registerProcessObserver(android.app.IProcessObserver)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientEntered(android.view.IWindow)> -> _SINK_
<android.content.pm.PackageInfoLite: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.ContentValues: void putNull(java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.preference.PreferenceActivity: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)> -> _SINK_
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)> -> _SINK_
<java.util.MiniEnumSet: void setRange(java.lang.Enum,java.lang.Enum)> -> _SINK_
<android.webkit.WebViewClassic: boolean savePicture(android.os.Bundle,java.io.File)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setFeature(java.lang.String,boolean)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)> -> _SINK_
<com.android.server.dreams.DreamController: void dump(java.io.PrintWriter)> -> _SINK_
<com.android.exchange.adapter.Serializer: void writeLiteralString(java.io.OutputStream,java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setBlendEnabled(boolean)> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: void onForegroundActivitiesChanged(int,int,boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void signalPersistentProcesses(int)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: void setGravity(int)> -> _SINK_
<android.graphics.drawable.RotateDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<javax.obex.PrivateOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setMaximumIntegerDigits(int)> -> _SINK_
<android.filterfw.core.FilterContext: void storeFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<android.app.ApplicationThreadProxy: void requestThumbnail(android.os.IBinder)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)> -> _SINK_
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: void setupGestureDetector(android.content.Context)> -> _SINK_
<android.database.BulkCursorDescriptor: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.Spinner: void setEnabled(boolean)> -> _SINK_
<com.android.browser.BookmarkItem: void setFavicon(android.graphics.Bitmap)> -> _SINK_
<com.android.videoeditor.service.ApiService: void removeEffect(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaRouter$Static: void onDisplayAdded(int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName startServiceInPackage(int,android.content.Intent,java.lang.String,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceAlert(java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setDisplayOrientation(int)> -> _SINK_
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)> -> _SINK_
<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)> -> _SINK_
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.gallery3d.exif.ExifParser: void registerForTagValue(com.android.gallery3d.exif.ExifTag)> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)> -> _SINK_
<android.view.SurfaceView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl: void drawTexture(com.android.gallery3d.ui.BasicTexture,float[],int,int,int,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<android.view.View: void draw(android.graphics.Canvas)> -> _SINK_
<android.widget.AbsListView: void sendAccessibilityEvent(int)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchScreenState(boolean)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performContextMenuAction(int)> -> _SINK_
<com.android.camera.ui.InLineSettingItem: void setTitle(com.android.camera.ListPreference)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SINK_
<com.android.gallery3d.ui.PhotoView$FullPicture: void setScreenNail(com.android.gallery3d.ui.ScreenNail)> -> _SINK_
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClear(java.lang.String,java.lang.String,int)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertificate: void dumpValue(java.lang.StringBuilder)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -> _SINK_
<java.lang.reflect.Field: void setShort(java.lang.Object,short)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void accessoryDetached(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: void setActionDown(float,float)> -> _SINK_
<org.apache.james.mime4j.field.DelegatingFieldParser: void setFieldParser(java.lang.String,org.apache.james.mime4j.field.FieldParser)> -> _SINK_
<java.lang.ProcessManager$ProcessImpl: void setExitValue(int)> -> _SINK_
<com.android.launcher2.Launcher: void bindAppsUpdated(java.util.ArrayList)> -> _SINK_
<java.lang.AbstractStringBuilder: void setCharAt(int,char)> -> _SINK_
<android.widget.AbsSpinner: void setSelection(int)> -> _SINK_
<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[])> -> _SINK_
<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)> -> _SINK_
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> -> _SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)> -> _SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.widget.PopupWindow$PopupViewContainer: void sendAccessibilityEvent(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setValue(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)> -> _SINK_
<com.android.wallpaper.galaxy.ScriptC_galaxy: void bind_vpConstants(com.android.wallpaper.galaxy.ScriptField_VpConsts)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: void setPhotoBounds(android.graphics.RectF)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setState(javax.sip.TransactionState)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void sendEnableIntentLocked(com.android.server.AppWidgetServiceImpl$Provider)> -> _SINK_
<android.support.v4.view.ViewPager: void draw(android.graphics.Canvas)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void dataChanged(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.CallInfo: void setPurpose(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setReceived(java.lang.String)> -> _SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)> -> _SINK_
<com.android.ex.chips.RecipientEditTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs$1: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performEditorAction(int)> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: void putSelectedSpellCheckerSubtype(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setChecked(boolean)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnCompletionListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.view.ViewRootImpl: boolean performHapticFeedback(int,boolean)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToNextInputMethod(android.os.IBinder,boolean)> -> _SINK_
<android.widget.ListPopupWindow: void setModal(boolean)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SINK_
<android.widget.OverScroller: void setFinalX(int)> -> _SINK_
<android.widget.OverScroller: void setFinalY(int)> -> _SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationStart(android.animation.Animator)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(int)> -> _SINK_
<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setUidNetworkRules(int,boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)> -> _SINK_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendReliableProvisionalResponse(javax.sip.message.Response)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long calculateDirectorySize(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleNewIntent(java.util.List,android.os.IBinder)> -> _SINK_
<android.webkit.WebViewClassic: void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> -> _SINK_
<android.text.PackedIntVector: void setValue(int,int,int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedInputMethod(java.lang.String)> -> _SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.makedict.FusionDictionary: void setBigram(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.launcher2.CellLayout: void setChildrenDrawnWithCacheEnabled(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void removeContentProvider(android.os.IBinder,boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void extractMediaItemAudioWaveform(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setDisabledFlags(int)> -> _SINK_
<com.android.exchange.ExchangeService: void sendMessageRequest(com.android.exchange.Request)> -> _SINK_
<org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)> -> _SINK_
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)> -> _SINK_
<java.net.Socket: void setSoTimeout(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setVertexCount(int)> -> _SINK_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void nap(long)> -> _SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<android.widget.GridLayout: void setRowOrderPreserved(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)> -> _SINK_
<android.widget.TimePicker$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void getTransitionThumbnails(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void createVideoEditor(android.content.Context,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.String)> -> _SINK_
<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.GLES20DisplayList: void setRotation(float)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void setCurrentClientGenerationId(int)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pitarget(char[],int,int)> -> _SINK_
<gov.nist.core.Host: void setHostname(java.lang.String)> -> _SINK_
<libcore.io.Streams: java.lang.String readFully(java.io.Reader)> -> _SINK_
<android.os.RegistrantList: void notifyResult(java.lang.Object)> -> _SINK_
<com.android.providers.calendar.CalendarProviderBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.org.bouncycastle.asn1.LimitedInputStream: void setParentEofDetect(boolean)> -> _SINK_
<libcore.net.http.HttpConnection: void setupSecureSocket(javax.net.ssl.SSLSocketFactory,boolean)> -> _SINK_
<android.webkit.WebViewClassic: void setWebChromeClient(android.webkit.WebChromeClient)> -> _SINK_
<com.android.server.sip.SipHelper: void sendReferNotify(javax.sip.Dialog,java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallUidRule(int,boolean)> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,int)> -> _SINK_
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)> -> _SINK_
<android.os.Bundle: android.os.Bundle forPair(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)> -> _SINK_
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> -> _SINK_
<com.android.server.am.CompatModePackages: void setFrontActivityScreenCompatModeLocked(int)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: void setHeadingDegrees(double)> -> _SINK_
<android.app.ActivityManagerProxy: boolean killProcessesBelowForeground(java.lang.String)> -> _SINK_
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.Registrant: void notifyRegistrant(android.os.AsyncResult)> -> _SINK_
<com.android.server.ConnectivityService: boolean setRadios(boolean)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedError(int,java.lang.String,java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setState(int)> -> _SINK_
<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)> -> _SINK_
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SINK_
<android.widget.RemoteViews: void setImageViewResource(int,int)> -> _SINK_
<com.google.common.collect.ForwardingMultiset: boolean setCount(java.lang.Object,int,int)> -> _SINK_
<android.webkit.WebViewClassic$FocusTransitionDrawable: void setAlpha(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Sequence: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.camera.PhotoModule: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<android.widget.HorizontalScrollView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<com.android.browser.BrowserSettings: void setLastRecovered(long)> -> _SINK_
<java.text.DateFormatSymbols: void setShortMonths(java.lang.String[])> -> _SINK_
<com.android.videoeditor.service.ApiService: void setMediaItemMute(android.content.Context,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)> -> _SINK_
<com.android.server.IntentResolver: boolean dumpMap(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.String,boolean)> -> _SINK_
<java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)> -> _SINK_
<com.android.launcher2.SearchDropTargetBar: void setup(com.android.launcher2.Launcher,com.android.launcher2.DragController)> -> _SINK_
<com.android.launcher2.BubbleTextView: void setTag(java.lang.Object)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)> -> _SINK_
<android.location.Address$1: android.location.Address createFromParcel(android.os.Parcel)> -> _SINK_
<android.os.CommonTimeConfig: int setMasterAnnounceInterval(int)> -> _SINK_
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> -> _SINK_
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.wm.AppWindowToken: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bindNull(int)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onStart(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService: void grantPermission(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.ViewGroup)> -> _SINK_
<android.animation.ValueAnimator: void setFrameDelay(long)> -> _SINK_
<android.view.KeyEvent: void setTainted(boolean)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction sendInviteOk(javax.sip.RequestEvent,android.net.sip.SipProfile,java.lang.String,javax.sip.ServerTransaction,java.lang.String,int)> -> _SINK_
<com.android.internal.util.StateMachine$SmHandler$HaltingState: boolean processMessage(android.os.Message)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setUtranCellID3GPP(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClick(java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.Parcel: void setDataCapacity(int)> -> _SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)> -> _SINK_
<com.google.common.collect.Multisets$UnmodifiableMultiset: int setCount(java.lang.Object,int)> -> _SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void saveVideoEditor(android.content.Context,java.lang.String)> -> _SINK_
<com.android.server.IntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: void setActionMove(float,float)> -> _SINK_
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<com.android.browser.Controller: void updateMenuState(com.android.browser.Tab,android.view.Menu)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)> -> _SINK_
<android.os.RegistrantList: void notifyException(java.lang.Throwable)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
<com.android.server.NotificationManagerService$ToastRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<gov.nist.javax.sip.header.extensions.MinSE: void setValue(java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)> -> _SINK_
<android.webkit.GeolocationPermissionsClassic: void getAllowed(java.lang.String,android.webkit.ValueCallback)> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: void setFastShutter(boolean)> -> _SINK_
<android.widget.Editor: void sendOnTextChanged(int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setHost(java.lang.String)> -> _SINK_
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: void attachEngine(android.service.wallpaper.IWallpaperEngine)> -> _SINK_
<com.android.browser.BrowserSettings: void setAutofillEnabled(boolean)> -> _SINK_
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter,java.lang.String,int,int)> -> _SINK_
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node addChild(java.lang.String)> -> _SINK_
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDesiredSize(int,int)> -> _SINK_
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.app.ActivityManagerProxy: void setLockScreenShown(boolean)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityClient: void setValue(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPermissionEnforced(java.lang.String)> -> _SINK_
<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)> -> _SINK_
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Boolean: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.server.power.ElectronBeam: void dump(java.io.PrintWriter)> -> _SINK_
<com.android.browser.BaseUi: void setFullscreen(boolean)> -> _SINK_
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
<android.app.IServiceConnection$Stub$Proxy: void connected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<java.util.Calendar: void set(int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.browser.BaseUi: void setUrlTitle(com.android.browser.Tab)> -> _SINK_
<android.app.ActionBar: void setHomeButtonEnabled(boolean)> -> _SINK_
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> -> _SINK_
<android.view.View: void setScrollBarStyle(int)> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: void draw(android.graphics.Canvas)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onOverlayUserAttributesSet(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,java.lang.Exception)> -> _SINK_
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<android.app.ListFragment: void setSelection(int)> -> _SINK_
<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> -> _SINK_
<android.content.ClipboardManager: void setText(java.lang.CharSequence)> -> _SINK_
<android.webkit.WebViewClassic: void setJsFlags(java.lang.String)> -> _SINK_
<android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl: void setSize(java.lang.Object,int,int)> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onStatusChanged(java.lang.String,int,android.os.Bundle)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)> -> _SINK_
<android.webkit.WebViewCore: void setMockGeolocationPosition(double,double,double)> -> _SINK_
<android.view.View: void setImportantForAccessibility(int)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])> -> _SINK_
<android.app.ActivityManagerProxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.Path: void setObject(com.android.gallery3d.data.MediaObject)> -> _SINK_
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTrafficClass(int)> -> _SINK_
<android.location.Location: void setExtraLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean,boolean)> -> _SINK_
<android.app.AlarmManager: void setTime(long)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.browser.Controller: void sharePage(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setRotationLw(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void addWidget(android.view.View,int)> -> _SINK_
<android.app.Dialog: void setContentView(int)> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: void setCurrentTabFromContent(com.android.launcher2.AppsCustomizePagedView$ContentType)> -> _SINK_
<android.content.pm.IPackageInstallObserver$Stub$Proxy: void packageInstalled(java.lang.String,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)> -> _SINK_
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyDate(java.lang.String,java.lang.String,com.adobe.xmp.XMPDateTime)> -> _SINK_
<com.android.browser.NavigationBarBase: void setLock(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<java.text.DecimalFormat: void setGroupingUsed(boolean)> -> _SINK_
<android.util.SparseLongArray: void append(int,long)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceUp(java.lang.String)> -> _SINK_
<com.android.server.AlarmManagerService: void set(int,long,android.app.PendingIntent)> -> _SINK_
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int,int,int,boolean)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void writeToParcel(android.os.Parcel,long)> -> _SINK_
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setShowRunningNotification(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: void set(double,double,double,double,double,double,double,double,double)> -> _SINK_
<com.android.camera.ComboPreferences$MyEditor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.NotificationData: boolean setUserLocked(android.view.View,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
<com.google.android.picasasync.UploadsManager: boolean access$1300(com.google.android.picasasync.UploadsManager,com.google.android.picasasync.UploadTaskEntry,com.google.android.picasasync.UploadedEntry,android.content.SyncResult)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setCNonce(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,java.lang.String,byte[])> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setParent(java.lang.Object,android.view.View)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleActivityConfigurationChanged(android.os.IBinder)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeNotification(android.os.IBinder)> -> _SINK_
<android.app.ContextImpl: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)> -> _SINK_
<com.android.server.pm.PreferredIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,com.android.server.pm.PreferredActivity)> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)> -> _SINK_
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdmin(int)> -> _SINK_
<android.os.CommonTimeUtils: int transactSetLong(int,long)> -> _SINK_
<android.util.TypedValue: void setTo(android.util.TypedValue)> -> _SINK_
<android.renderscript.Script: void setVar(int,long)> -> _SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setUseClientMode(boolean)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)> -> _SINK_
<com.google.common.collect.Sets$SetFromMap: boolean add(java.lang.Object)> -> _SINK_
<com.android.exchange.EasSyncService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setNeedClientAuth(boolean)> -> _SINK_
<com.android.phone.CallNotifier: void sendMwiChangedDelayed(long)> -> _SINK_
<android.widget.HorizontalScrollView: void draw(android.graphics.Canvas)> -> _SINK_
<com.android.server.usb.UsbService: boolean hasDevicePermission(android.hardware.usb.UsbDevice)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,char)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int,int)> -> _SINK_
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelHolder: void setSelectedPanel(com.android.systemui.statusbar.phone.PanelView)> -> _SINK_
<com.android.server.LightsService$Light: void setBrightness(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setHardKeyboardEnabled(boolean)> -> _SINK_
<javax.xml.validation.ValidatorHandler: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher)> -> _SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype)> -> _SINK_
<android.app.LocalActivityManager: void dispatchPause(boolean)> -> _SINK_
<com.android.browser.NavigationBarBase: void setDisplayTitle(java.lang.String)> -> _SINK_
<java.net.Socket: void setPerformancePreferences(int,int,int)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfoByAccessibilityId(long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,int)> -> _SINK_
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.GridLayout: void setRowCount(int)> -> _SINK_
<com.android.org.bouncycastle.util.io.Streams: long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream)> -> _SINK_
<com.android.camera.PreviewGestures: boolean dispatchTouch(android.view.MotionEvent)> -> _SINK_
<android.widget.CalendarView: void setDate(long,boolean,boolean)> -> _SINK_
<android.app.NotificationManager: void notify(int,android.app.Notification)> -> _SINK_
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)> -> _SINK_
<gov.nist.javax.sip.header.NameMap: void addExtensionHeader(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void setDebugApp(java.lang.String,boolean,boolean)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: int appNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> -> _SINK_
<com.android.deskclock.timer.TimerFragment: void onSaveInstanceState(android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setRegistrationState(java.lang.String)> -> _SINK_
<com.android.deskclock.timer.TimerFragment: void setLabel(com.android.deskclock.timer.TimerObj,java.lang.String)> -> _SINK_
<android.webkit.WebSettingsClassic: void setMinimumLogicalFontSize(int)> -> _SINK_
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: void setPictureWidth(android.hardware.Camera$Parameters,int)> -> _SINK_
<com.android.phone.CallFeaturesSetting: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<com.android.deskclock.Alarms: long setAlarm(android.content.Context,com.android.deskclock.Alarm)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> -> _SINK_
<com.android.exchange.provider.MailboxUtilities: void setFlagsAndChildrensParentKey(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)> -> _SINK_
<java.util.Calendar: void set(int,int,int,int,int)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(java.lang.Object)> -> _SINK_
<com.android.server.location.MockProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ScriptC_convolve3x3: void bind_gPixels(android.renderscript.Allocation)> -> _SINK_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class,int)> -> _SINK_
<android.widget.AbsSpinner$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ViewRootImpl: void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo,long)> -> _SINK_
<java.util.zip.CRC32: void update(byte[])> -> _SINK_
<android.app.IThumbnailReceiver$Stub$Proxy: void newThumbnail(int,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)> -> _SINK_
<android.os.IUpdateLock$Stub$Proxy: void acquireUpdateLock(android.os.IBinder,java.lang.String)> -> _SINK_
<android.app.Activity: boolean navigateUpTo(android.content.Intent)> -> _SINK_
<com.android.camera.CaptureAnimManager: void setOrientation(int)> -> _SINK_
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfoByViewId(long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<com.android.server.pm.PackageManagerService: int installExistingPackage(java.lang.String)> -> _SINK_
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_
<java.net.Socket: void setKeepAlive(boolean)> -> _SINK_
<java.util.Calendar: void set(int,int,int,int,int,int)> -> _SINK_
<android.view.View: void setLayerPaint(android.graphics.Paint)> -> _SINK_
<com.google.android.picasasync.PicasaApi: void setAuthToken(java.lang.String)> -> _SINK_
<android.renderscript.AllocationAdapter: void setLOD(int)> -> _SINK_
<com.android.server.connectivity.Tethering: void interfaceStatusChanged(java.lang.String,boolean)> -> _SINK_
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)> -> _SINK_
<android.opengl.GLSurfaceView: void setRenderMode(int)> -> _SINK_
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)> -> _SINK_
<android.support.v13.app.FragmentCompatICS: void setMenuVisibility(android.app.Fragment,boolean)> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: void elementType(java.lang.String,int,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int,int)> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl$ConfigState: void restore(com.android.gallery3d.ui.GLCanvasImpl)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setShape(int)> -> _SINK_
<android.webkit.WebViewClassic: boolean restorePicture(android.os.Bundle,java.io.File)> -> _SINK_
<gov.nist.javax.sip.header.ContentLanguage: void setLanguageTag(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setMagnifiedRegionCenter(float,float,boolean)> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: void setFastShutter(boolean)> -> _SINK_
<android.app.Activity: void setTitle(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)> -> _SINK_
<java.io.Reader: int read(java.nio.CharBuffer)> -> _SINK_
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setWallpaperPosition(android.os.IBinder,float,float,float,float)> -> _SINK_
<com.android.server.am.ActiveServices$ServiceMap: void putServiceByIntent(android.content.Intent$FilterComparison,int,com.android.server.am.ServiceRecord)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<org.apache.harmony.xml.ExpatParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: void requestPhoto(float[],int,int)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: void printTo(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)> -> _SINK_
<android.widget.TabWidget: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.webkit.WebSettingsClassic: void setPluginsEnabled(boolean)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void writeTag(int,int)> -> _SINK_
<com.android.camera.PanoProgressBar: void setMaxProgress(int)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.filters.ImageFilter setImagePreset(com.android.gallery3d.filtershow.filters.ImageFilter,java.lang.String)> -> _SINK_
<android.widget.TableLayout: void setColumnStretchable(int,boolean)> -> _SINK_
<com.android.inputmethodcommon.InputMethodSettingsFragment: void setInputMethodSettingsCategoryTitle(int)> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress)> -> _SINK_
<com.android.gallery3d.exif.ExifData: void setStripBytes(int,byte[])> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void writeSummaryFromParcelLocked(android.os.Parcel,long)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setLocalizedText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)> -> _SINK_
<javax.xml.validation.Validator: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,float)> -> _SINK_
<android.app.ActivityManagerProxy: boolean isIntentSenderAnActivity(android.content.IIntentSender)> -> _SINK_
<com.android.commands.monkey.Monkey$ActivityController: int appNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleNative$NativeUpdatePhotoRenderingCallback: void updateTransforms(float[])> -> _SINK_
<android.app.ActivityManagerProxy: boolean profileControl(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SINK_
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<com.android.browser.XLargeUi: void setFavicon(com.android.browser.Tab)> -> _SINK_
<com.android.internal.util.IndentingPrintWriter: void write(char[],int,int)> -> _SINK_
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.GLES20TextureLayer: void setOpaque(boolean)> -> _SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)> -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: void setIconForUsage(android.widget.ImageView,long)> -> _SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,java.lang.Object,long)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setValue(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setWantClientAuth(boolean)> -> _SINK_
<android.preference.DialogPreference: void setNegativeButtonText(int)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedLoginRequest(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void setNewAlarm(int)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboard: boolean setShifted(boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.graphics.ColorMatrix: void setSaturation(float)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: void renameWifiDisplay(java.lang.String,java.lang.String)> -> _SINK_
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void setKeyPreviewPopupEnabled(boolean,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setTransparentRegionHint(com.android.server.wm.WindowStateAnimator,android.graphics.Region)> -> _SINK_
<com.android.server.input.InputManagerService: void setFocusedApplication(com.android.server.input.InputApplicationHandle)> -> _SINK_
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUser(java.lang.String,int)> -> _SINK_
<android.webkit.WebViewClassic$Factory: void setPlatformNotificationsEnabled(boolean)> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionaryBigramList: void addBigram(java.lang.String,java.lang.String,byte)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)> -> _SINK_
<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void setAlpha(int)> -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)> -> _SINK_
<com.android.server.am.ActivityManagerService$2: void handleMessage(android.os.Message)> -> _SINK_
<android.os.IUserManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerProxy: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService: void setupWidgetState(android.content.Context,int,long)> -> _SINK_
<com.android.server.dreams.DreamController: void startDream(android.os.Binder,android.content.ComponentName,boolean,int)> -> _SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setBar(com.android.systemui.statusbar.BaseStatusBar)> -> _SINK_
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> -> _SINK_
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)> -> _SINK_
<android.util.LongSparseArray: void append(long,java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void setEnabledComponentsCopy(java.util.HashSet,int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(int,double)> -> _SINK_
<gov.nist.core.ParserCore: void peekLine(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void removeOverlay(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void write(byte[])> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setHardKeyboardStatus(boolean,boolean)> -> _SINK_
<com.google.common.collect.AbstractMapEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<android.view.View: void sendAccessibilityEventInternal(int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(int)> -> _SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)> -> _SINK_
<android.graphics.drawable.InsetDrawable: void setAlpha(int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardTextsSet: void setLanguage(java.lang.String)> -> _SINK_
<org.apache.http.conn.BasicManagedEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setIcon(int)> -> _SINK_
<org.apache.harmony.xml.ExpatParser: void startNamespace(java.lang.String,java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void setSelected(boolean)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)> -> _SINK_
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> -> _SINK_
<com.android.browser.BookmarkItem: void setFaviconBackground(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void resumeKeyDispatching(android.os.IBinder)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.SlotView: void setCenterIndex(int)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean havePattern(int)> -> _SINK_
<java.lang.StringBuilder: void setCharAt(int,char)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: void declarePrefix(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> -> _SINK_
<android.view.View: void setIsRootNamespace(boolean)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void attachHeader(gov.nist.javax.sip.header.SIPHeader,boolean,boolean)> -> _SINK_
<android.util.SparseArray: void setValueAt(int,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setToTag(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setMAddr(java.lang.String)> -> _SINK_
<com.android.launcher2.CellLayout: void setShortcutAndWidgetAlpha(float)> -> _SINK_
<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)> -> _SINK_
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SINK_
<com.android.videoeditor.service.ApiService$8: void onProgress(int)> -> _SINK_
<com.android.videoeditor.service.ApiService$9: void onProgress(int)> -> _SINK_
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: void addBigram(java.lang.String,int)> -> _SINK_
<android.location.Address: void setAddressLine(int,java.lang.String)> -> _SINK_
<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void magnifyDisplay(int,float,float,float)> -> _SINK_
<android.view.GLES20DisplayList: void setRotationY(float)> -> _SINK_
<android.view.GLES20DisplayList: void setRotationX(float)> -> _SINK_
<libcore.io.ForwardingOs: void seteuid(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean willActivityBeVisible(android.os.IBinder)> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder with(android.animation.Animator)> -> _SINK_
<android.view.View: void setWillNotCacheDrawing(boolean)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: void setAlpha(int)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ServiceIntentInfo)> -> _SINK_
<android.animation.AnimatorSet: android.animation.Animator setDuration(long)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppOrientation(android.view.IApplicationToken,int)> -> _SINK_
<java.util.Formatter$FormatToken: boolean setFlag(int)> -> _SINK_
<com.android.systemui.statusbar.CommandQueue$H: void handleMessage(android.os.Message)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setQHeader(gov.nist.core.NameValue)> -> _SINK_
<com.android.exchange.adapter.AttachmentLoader: void readChunked(java.io.InputStream,java.io.OutputStream,int)> -> _SINK_
<android.graphics.ColorMatrix: void set(float[])> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void dispatchMessage(android.os.Message)> -> _SINK_
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)> -> _SINK_
<android.webkit.WebView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)> -> _SINK_
<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setHardKeyboardStatus(boolean,boolean)> -> _SINK_
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<java.util.zip.CRC32: void update(int)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: void setValue(java.lang.String)> -> _SINK_
<android.webkit.WebView: void setBackgroundColor(int)> -> _SINK_
<android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)> -> _SINK_
<com.android.ex.variablespeed.MediaPlayerDataSource: void setAsSourceFor(android.media.MediaPlayer)> -> _SINK_
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)> -> _SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void gi(char[],int,int)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pi(char[],int,int)> -> _SINK_
<com.android.gallery3d.exif.ExifOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)> -> _SINK_
<android.webkit.WebViewClassic: void setMockGeolocationPosition(double,double,double)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _SINK_
<android.location.ICountryDetector$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void setSchedulingGroup(int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onRestorePackage(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,int[],java.util.List)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<java.net.Socks4Message: void setUserId(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> -> _SINK_
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setRealm(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.ResourceTexture: void setOpaque(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setParseIntegerOnly(boolean)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: void readFromParcelLocked(java.util.ArrayList,android.os.Parcel)> -> _SINK_
<android.app.Dialog: void setVolumeControlStream(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void viewDataChanged(int,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: void setShowAsAction(int)> -> _SINK_
<gov.nist.javax.sip.header.Event: void setEventId(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> -> _SINK_
<android.view.WindowManagerGlobal: void startTrimMemory(int)> -> _SINK_
<android.graphics.Path: void set(android.graphics.Path)> -> _SINK_
<com.android.server.MountService: int decryptStorage(java.lang.String)> -> _SINK_
<android.webkit.AccessibilityInjector: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.exchange.ExchangeService: void setWatchdogAlarm(long,long)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitleOptionalHint(boolean)> -> _SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void writeToParcelLocked(android.os.Parcel)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setTransportControlFlags(int,int)> -> _SINK_
<android.webkit.WebSettingsClassic: void setUserAgent(int)> -> _SINK_
<com.google.common.primitives.Ints$IntArrayAsList: java.lang.Integer set(int,java.lang.Integer)> -> _SINK_
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)> -> _SINK_
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)> -> _SINK_
<com.google.common.collect.ForwardingMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.renderscript.Script: void setVar(int,int)> -> _SINK_
<com.android.camera.PanoProgressBar: void setProgress(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setSourceRect(float,float,float,float)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<com.android.browser.widget.BookmarkWidgetProxy: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.commands.monkey.Monkey$ActivityController: boolean activityStarting(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: void onImportanceChanged(int,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDefaultDisplayHomeAsUpEnabled(boolean)> -> _SINK_
<javax.obex.HeaderSet: void setHeader(int,java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> -> _SINK_
<com.android.server.display.OverlayDisplayAdapter: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallInterfaceRule(java.lang.String,boolean)> -> _SINK_
<java.util.zip.Inflater: void setDictionary(byte[])> -> _SINK_
<android.app.FragmentManagerImpl: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplayDensity(int,int)> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<android.os.ServiceManagerProxy: void addService(java.lang.String,android.os.IBinder,boolean)> -> _SINK_
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)> -> _SINK_
<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> -> _SINK_
<com.android.phone.PhoneUtils: void setMute(boolean)> -> _SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)> -> _SINK_
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])> -> _SINK_
<com.android.server.AlarmManagerService$Alarm: void dump(java.io.PrintWriter,java.lang.String,long)> -> _SINK_
<android.sax.RootElement$Handler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> -> _SINK_
<android.app.Dialog: void setContentView(android.view.View)> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: void setSameDiagonal(double)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setValue(java.lang.String)> -> _SINK_
<android.view.GLES20DisplayList: void setScaleX(float)> -> _SINK_
<android.view.GLES20DisplayList: void setScaleY(float)> -> _SINK_
<com.android.launcher2.PagedViewCellLayout: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])> -> _SINK_
<android.os.PerformanceCollector: android.os.Bundle addIteration(java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void unregisterContentObserver(android.database.IContentObserver)> -> _SINK_
<com.android.camera.PhotoController: void setCameraId(int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStopped(int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeInt(int)> -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> -> _SINK_
<android.app.ApplicationThreadProxy: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.Reason: void setText(java.lang.String)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedList$WrappedListIterator: void set(java.lang.Object)> -> _SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.server.LightsService$Light: void setFlashing(int,int,int,int)> -> _SINK_
<com.android.server.wm.DisplayContent: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<com.android.camera.drawable.TextDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<gov.nist.javax.sip.header.SIPETag: void setValue(java.lang.String)> -> _SINK_
<android.hardware.display.WifiDisplayStatus: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackState(int)> -> _SINK_
<android.security.KeyStore: boolean put(java.lang.String,byte[])> -> _SINK_
<android.app.FragmentManagerImpl: void dispatchOptionsMenuClosed(android.view.Menu)> -> _SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPostDial(java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)> -> _SINK_
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)> -> _SINK_
<android.graphics.Rect: void set(android.graphics.Rect)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPreference(float)> -> _SINK_
<javax.obex.PrivateOutputStream: void write(int)> -> _SINK_
<android.webkit.WebSettingsClassic: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<android.os.CommonTimeUtils: int transactSetInt(int,int)> -> _SINK_
<java.io.PrintStream: void println(char)> -> _SINK_
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(char)> -> _SINK_
<android.view.IInputFilter$Stub$Proxy: void filterInputEvent(android.view.InputEvent,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.inputmethod.latin.InputPointers: void set(com.android.inputmethod.latin.InputPointers)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendOptions(android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<android.text.SpannableStringInternal: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)> -> _SINK_
<com.android.exchange.EasSyncService: boolean tryProvision(com.android.exchange.EasSyncService)> -> _SINK_
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setTimeout(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SINK_
<com.android.internal.preference.YesNoPreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchTime(java.lang.String,int)> -> _SINK_
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)> -> _SINK_
<android.filterfw.core.GLFrame: void setViewport(int,int,int,int)> -> _SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(byte[],int,int)> -> _SINK_
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)> -> _SINK_
<com.google.android.picasastore.VersionInfo: void setVersion(java.lang.String,int)> -> _SINK_
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.Scroller: void startScroll(int,int,int,int)> -> _SINK_
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress,int)> -> _SINK_
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> -> _SINK_
<android.widget.AdapterViewAnimator: void setOutAnimation(android.content.Context,int)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodFileManager: void <init>(java.util.HashMap,int)> -> _SINK_
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.MessageSender: void notifyAll(int,float,java.lang.String)> -> _SINK_
<android.app.AlertDialog: void setIcon(int)> -> _SINK_
<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SINK_
<android.renderscript.ProgramFragmentFixedFunction$Builder: android.renderscript.ProgramFragmentFixedFunction$Builder setTexture(android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode,android.renderscript.ProgramFragmentFixedFunction$Builder$Format,int)> -> _SINK_
<com.android.server.pm.UserManagerService: void setUserIcon(int,android.graphics.Bitmap)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setWantClientAuth(boolean)> -> _SINK_
<android.view.View: void setKeepScreenOn(boolean)> -> _SINK_
<com.android.browser.LogTag: void logBookmarkAdded(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebViewCore: void setMockGeolocationPermission(boolean)> -> _SINK_
<com.android.systemui.statusbar.StatusBarIconView: boolean set(com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<com.android.inputmethodcommon.InputMethodSettingsFragment: void setSubtypeEnablerTitle(int)> -> _SINK_
<android.app.ActivityManagerProxy: void attachApplication(android.app.IApplicationThread)> -> _SINK_
<android.view.MotionEvent: void setAction(int)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setChecked(boolean)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void write(int)> -> _SINK_
<com.android.exchange.ExchangeService$2: void loadAttachment(long,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void alert(byte,byte)> -> _SINK_
<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SINK_
<com.android.gallery3d.util.ReverseGeocoder: void writeUTF(java.io.DataOutputStream,java.lang.String)> -> _SINK_
<android.widget.RemoteViews$BitmapReflectionAction: void setBitmapCache(android.widget.RemoteViews$BitmapCache)> -> _SINK_
<libcore.net.http.RawHeaders: void setStatusLine(java.lang.String)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)> -> _SINK_
<android.hardware.ISerialManager$Stub$Proxy: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.makedict.BinaryDictInputOutput$CharEncoding: void access$400(java.io.ByteArrayOutputStream,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: void setSessionTimeout(int)> -> _SINK_
<android.widget.AbsListView$PositionScroller: void startWithOffset(int,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastEnabled(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingRegion(int,int)> -> _SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)> -> _SINK_
<com.android.gallery3d.ui.BitmapTexture: void setOpaque(boolean)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setTTLParam(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setCurrentUser(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setShowAsActionFlags(int)> -> _SINK_
<com.android.server.StatusBarManagerService: void setSystemUiVisibility(int,int)> -> _SINK_
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setDSLLocation(java.lang.String)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: boolean updateProvidersForPackageLocked(java.lang.String,java.util.Set)> -> _SINK_
<com.google.android.picasastore.FIFEUtil: android.net.Uri setImageUrlOptions(java.lang.String,java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void addIdleTimer(java.lang.String,int,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)> -> _SINK_
<android.preference.PreferenceActivity$Header: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.ContentProviderProxy: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> -> _SINK_
<com.android.gallery3d.common.EntrySchema: void objectToValues(com.android.gallery3d.common.Entry,android.content.ContentValues)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)> -> _SINK_
<com.android.server.display.WifiDisplayAdapter: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<gov.nist.javax.sip.address.AddressImpl: void setUser(java.lang.String)> -> _SINK_
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)> -> _SINK_
<com.android.server.location.GeofenceManager: void dump(java.io.PrintWriter)> -> _SINK_
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)> -> _SINK_
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> -> _SINK_
<com.android.browser.PhoneUi$AnimScreen: void set(com.android.browser.TitleBar,android.webkit.WebView)> -> _SINK_
<com.android.server.wm.Session: void setTransparentRegion(android.view.IWindow,android.graphics.Region)> -> _SINK_
<com.google.common.collect.Multisets$SetMultiset: boolean setCount(java.lang.Object,int,int)> -> _SINK_
<android.appwidget.AppWidgetHostView$ParcelableSparseArray$1: android.appwidget.AppWidgetHostView$ParcelableSparseArray createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.gallery3d.data.FaceClustering$1: void consume(int,com.android.gallery3d.data.MediaItem)> -> _SINK_
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)> -> _SINK_
<android.preference.ListPreference: void setEntries(int)> -> _SINK_
<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)> -> _SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])> -> _SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.widget.TextView: void setHintTextColor(int)> -> _SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setFeature(java.lang.String,boolean)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)> -> _SINK_
<com.android.server.BackupManagerService: boolean startConfirmationUi(int,java.lang.String)> -> _SINK_
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onEffectAdded(java.lang.String,com.android.videoeditor.service.MovieEffect,java.lang.String,java.lang.Exception)> -> _SINK_
<android.widget.AutoCompleteTextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setCurrency(java.util.Currency)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.exchange.utility.SimpleIcsWriter: void writeLine(java.lang.String)> -> _SINK_
<com.android.browser.NavigationBarBase: void setFavicon(android.graphics.Bitmap)> -> _SINK_
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)> -> _SINK_
<java.net.MulticastSocket: void setTimeToLive(int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.RenderedGui: void setDoneButtonVisible(boolean)> -> _SINK_
<java.util.zip.Deflater: void setDictionary(byte[])> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void print(junit.framework.TestResult,long,android.os.Bundle)> -> _SINK_
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void activitySlept(android.os.IBinder)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setProtocolVersion(java.lang.String)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: void updateImagePresets(boolean)> -> _SINK_
<android.widget.ZoomButton: void setEnabled(boolean)> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void set(java.lang.Object)> -> _SINK_
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> -> _SINK_
<android.app.Dialog: void setTitle(int)> -> _SINK_
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverride(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean)> -> _SINK_
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsLatitude(double)> -> _SINK_
<com.android.launcher2.CellLayout$ItemConfiguration: void add(android.view.View,com.android.launcher2.CellLayout$CellAndSpan)> -> _SINK_
<com.android.server.BackupManagerService$PerformFullBackupTask: void access$900(com.android.server.BackupManagerService$PerformFullBackupTask,android.content.pm.PackageInfo,java.io.File,boolean)> -> _SINK_
<android.view.MotionEvent: void setTainted(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAudioTrackDuck(android.content.Context,java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.app.AlertDialog: void setCustomTitle(android.view.View)> -> _SINK_
<android.app.ActivityManagerProxy: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SINK_
<com.android.gallery3d.ui.ActionModeHandler: void setTitle(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setCacheMode(int)> -> _SINK_
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
<libcore.io.DropBox$DefaultReporter: void addData(java.lang.String,byte[],int)> -> _SINK_
<android.view.View: void setActivated(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setIpForwardingEnabled(boolean)> -> _SINK_
<android.os.storage.StorageVolume: void setStorageId(int)> -> _SINK_
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDefaultInterfaceForDns(java.lang.String)> -> _SINK_
<android.webkit.MockGeolocation: void setError(int,java.lang.String)> -> _SINK_
<com.android.musicfx.ControlPanelEffect: void setParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int)> -> _SINK_
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.graphics.Matrix: void setSkew(float,float,float,float)> -> _SINK_
<com.android.server.WiredAccessoryManager: void notifyWiredAccessoryChanged(long,int,int)> -> _SINK_
<com.android.server.WallpaperManagerService: void switchUser(int,android.os.IRemoteCallback)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityAsUser(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setQName(int,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: void setHasMipMap(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: void setFocusHintDirection(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackageWithVerificationAndEncryption(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.VerificationParams,android.content.pm.ContainerEncryptionParams)> -> _SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: void onServiceConnected(android.os.IBinder)> -> _SINK_
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)> -> _SINK_
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)> -> _SINK_
<android.ddm.DdmHandleAppName: void setAppName(java.lang.String,int)> -> _SINK_
<com.android.server.input.PersistentDataStore$InputDeviceState: boolean removeKeyboardLayout(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(double)> -> _SINK_
<android.speech.tts.TextToSpeech: int setSpeechRate(float)> -> _SINK_
<android.database.CursorWindow: boolean setNumColumns(int)> -> _SINK_
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,int)> -> _SINK_
<java.util.Collections$CheckedListIterator: void set(java.lang.Object)> -> _SINK_
<android.view.GLES20DisplayList: void setAlpha(float)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting addPackageLPw(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean waitForWindowDrawn(android.os.IBinder,android.os.IRemoteCallback)> -> _SINK_
<android.widget.AutoCompleteTextView: void setListSelection(int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setEnabled(java.lang.Object,boolean)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopSensor(int,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setArtwork(int,android.graphics.Bitmap)> -> _SINK_
<android.preference.DialogPreference: void setDialogTitle(int)> -> _SINK_
<android.renderscript.Script: void setVar(int,boolean)> -> _SINK_
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> -> _SINK_
<android.hardware.input.IInputManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)> -> _SINK_
<com.android.server.am.ActivityStack: boolean realStartActivityLocked(com.android.server.am.ActivityRecord,com.android.server.am.ProcessRecord,boolean,boolean)> -> _SINK_
<com.android.server.connectivity.Tethering: int setUsbTethering(boolean)> -> _SINK_
<android.widget.ActivityChooserModel: void setDefaultActivity(int)> -> _SINK_
<org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)> -> _SINK_
<android.widget.AdapterViewAnimator: void setSelection(int)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean checkPattern(byte[],int)> -> _SINK_
<android.test.InstrumentationTestCase: void sendKeys(int[])> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)> -> _SINK_
<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.IncrementalAligner: void addImage(java.lang.String,float[],int)> -> _SINK_
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIClient(int)> -> _SINK_
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.camera.ComboPreferences$MyEditor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void sendHeartbeat()> -> _SINK_
<com.android.musicfx.seekbar.AbsSeekBar: void setMax(int)> -> _SINK_
<com.android.systemui.recent.RecentsVerticalScrollView: void setMinSwipeAlpha(float)> -> _SINK_
<android.filterfw.core.KeyValueMap: void setKeyValues(java.lang.Object[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
<android.widget.ImageView: void setImageAlpha(int)> -> _SINK_
<android.view.InputFilter: void sendInputEvent(android.view.InputEvent,int)> -> _SINK_
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: void setFrameDimensions(int,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void readFromParcelLocked(android.os.Parcel)> -> _SINK_
<java.util.Date: void setMinutes(int)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setXIncludeAware(boolean)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setVisiblePatternEnabled(boolean)> -> _SINK_
<android.graphics.Region: boolean set(int,int,int,int)> -> _SINK_
<android.graphics.Matrix: void set(android.graphics.Matrix)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void setBoolean(java.lang.String,boolean,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: void set(int,boolean)> -> _SINK_
<com.android.systemui.screenshot.SaveImageInBackgroundTask: void onPostExecute(com.android.systemui.screenshot.SaveImageInBackgroundData)> -> _SINK_
<com.android.camera.RotateDialogController: void setOrientation(int,boolean)> -> _SINK_
<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> -> _SINK_
<android.webkit.WebViewClassic: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> -> _SINK_
<android.appwidget.AppWidgetHostView: void setUserId(int)> -> _SINK_
<android.preference.ListPreference: void setValueIndex(int)> -> _SINK_
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> -> _SINK_
<com.android.gallery3d.data.MtpContext: boolean copyAlbum(java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<android.widget.PopupWindow: void update(int,int)> -> _SINK_
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> -> _SINK_
<android.filterfw.core.FieldPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<android.widget.ImageView: void setVisibility(int)> -> _SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setRightTabResources(int,int,int,int)> -> _SINK_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionThumb(android.graphics.Bitmap,int,int,android.os.IRemoteCallback,boolean)> -> _SINK_
<android.media.MediaPlayer: void setRetransmitEndpoint(java.net.InetSocketAddress)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SINK_
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> -> _SINK_
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> -> _SINK_
<android.webkit.WebSettings: void setSaveFormData(boolean)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)> -> _SINK_
<android.view.animation.AnimationSet: void setDuration(long)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: boolean setSelectedAction(int)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.RenderedGui: void setUndoButtonVisible(boolean)> -> _SINK_
<android.view.Surface: void setMatrix(float,float,float,float)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)> -> _SINK_
<com.android.gallery3d.ui.AlbumSlotRenderer: void setModel(com.android.gallery3d.app.AlbumDataLoader)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)> -> _SINK_
<android.widget.AbsListView$ListItemAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,float[],int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int)> -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer opaque(java.io.InputStream,int)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterRS: void setRenderScriptContext(android.app.Activity)> -> _SINK_
<com.android.camera.ComboPreferences$MyEditor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<gov.nist.core.NameValueList: gov.nist.core.NameValue put(java.lang.String,gov.nist.core.NameValue)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeSummaryToParcel(android.os.Parcel)> -> _SINK_
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: void setTitle(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.MediaDetails: void setUnit(int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssociatedURI: void setValue(java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAudioTrackBoundaries(android.content.Context,java.lang.String,java.lang.String,long,long)> -> _SINK_
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void addNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)> -> _SINK_
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)> -> _SINK_
<org.apache.harmony.security.x509.CertificateIssuer: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.animation.AnimatorSet: void setTarget(java.lang.Object)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)> -> _SINK_
<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)> -> _SINK_
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)> -> _SINK_
<android.widget.TextView: void setTextScaleX(float)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setSystemUiVisibility(int,int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setCustomView(android.view.View)> -> _SINK_
<android.widget.VideoView: void setVideoPath(java.lang.String)> -> _SINK_
<com.google.common.collect.Multisets$UnmodifiableMultiset: boolean setCount(java.lang.Object,int,int)> -> _SINK_
<android.support.v4.view.ViewPager$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setSize(int,int)> -> _SINK_
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.app.ActivityManagerProxy: void killApplicationWithAppId(java.lang.String,int)> -> _SINK_
<com.android.exchange.EasOutboxService$SendMailEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> -> _SINK_
<com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)> -> _SINK_
<android.widget.CursorTreeAdapter: void setChildrenCursor(int,android.database.Cursor)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityVerify: void setValue(java.lang.String)> -> _SINK_
<com.android.camera.ui.ListPrefSettingPopup$ListPrefSettingAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<com.android.server.am.ServiceRecord: void dumpStartList(java.io.PrintWriter,java.lang.String,java.util.List,long)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.os.StrictMode$ViolationInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.ViewRootImpl: void dispatchInvalidateDelayed(android.view.View,long)> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<android.os.Parcel: void writeByteArray(byte[])> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: void saveImage(com.android.gallery3d.filtershow.FilterShowActivity,java.io.File)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientType(int)> -> _SINK_
<android.widget.TextView: void setTextLocale(java.util.Locale)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
<android.app.Activity: void setFeatureDrawableResource(int,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void finishInput(com.android.internal.view.IInputMethodClient)> -> _SINK_
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> -> _SINK_
<com.android.common.content.ProjectionMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.uiautomator.core.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)> -> _SINK_
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setPort(int)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)> -> _SINK_
<com.android.server.AppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)> -> _SINK_
<java.math.BigInteger: java.math.BigInteger setBit(int)> -> _SINK_
<com.android.server.am.EventLogTags: void writeBootProgressAmsReady(long)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void enableShutterSound(boolean)> -> _SINK_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: void setMinute(int)> -> _SINK_
<android.filterfw.core.GLFrame: void setInts(int[])> -> _SINK_
<com.android.commands.am.Am$MyActivityController: boolean activityResuming(java.lang.String)> -> _SINK_
<android.view.View: void setLayoutDirection(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void setTimeRelatedValues(android.content.ContentValues,long,long,int)> -> _SINK_
<android.app.ActivityManagerProxy: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean deleteCaCertificate(java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)> -> _SINK_
<com.android.browser.BaseUi: void showComboView(com.android.browser.UI$ComboViews,android.os.Bundle)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTime(long)> -> _SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(char)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: byte[] encodeAsBytes(java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Shader: void setTransform(float[])> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setTitle(int)> -> _SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.camera.PanoProgressBar: void setIndicatorColor(int)> -> _SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.ContentValues: void putAll(android.content.ContentValues)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)> -> _SINK_
<android.location.Criteria: void setAccuracy(int)> -> _SINK_
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyBoolean(java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.browser.BrowserSettings: void setDebugEnabled(boolean)> -> _SINK_
<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setCurrentUserLw(int)> -> _SINK_
<org.apache.harmony.security.x509.AlternativeName: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<android.filterfw.core.FilterFunction: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setDefaultParm(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.exchange.ExchangeService: void serviceRequest(long,long,int)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> -> _SINK_
<com.android.internal.widget.TransportControlView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)> -> _SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: void setSecond(int)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
<java.sql.Date: void setTime(long)> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.google.android.apps.lightcycle.shaders.GroundPlaneShader: void setColor(float[])> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: boolean setSelection(int,int)> -> _SINK_
<com.google.android.picasasync.R: void init(java.lang.Class)> -> _SINK_
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setPrefix(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.MountService: java.lang.String buildObbPath(java.lang.String,int,boolean)> -> _SINK_
<com.android.launcher2.SmoothPagedView$OvershootInterpolator: void setDistance(int)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: void setInterpolator(android.content.Context,int)> -> _SINK_
<com.googlecode.mp4parser.util.ByteBufferByteChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<com.android.launcher2.PagedViewCellLayoutChildren: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_
<android.content.pm.IPackageDataObserver$Stub$Proxy: void onRemoveCompleted(java.lang.String,boolean)> -> _SINK_
<com.android.exchange.EasAccountService: boolean tryProvision(com.android.exchange.EasSyncService)> -> _SINK_
<com.android.browser.BrowserSettings: void setTextZoom(int)> -> _SINK_
<android.webkit.WebView: void setOverScrollMode(int)> -> _SINK_
<android.widget.AutoCompleteTextView: boolean setFrame(int,int,int,int)> -> _SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void setVisibility(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void exportVideoEditor(android.content.Context,java.lang.String,java.lang.String,int,int)> -> _SINK_
<android.os.WorkSource: void set(android.os.WorkSource)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setOverlayStartTime(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long)> -> _SINK_
<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)> -> _SINK_
<gov.nist.javax.sip.header.CSeq: void setMethod(java.lang.String)> -> _SINK_
<com.android.browser.view.PieItem: void setAlpha(float)> -> _SINK_
<android.filterfw.core.Frame: void setData(byte[],int,int)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpWindowsNoHeaderLocked(java.io.PrintWriter,boolean,java.util.ArrayList)> -> _SINK_
<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)> -> _SINK_
<com.android.server.ConnectivityService: void setNetworkPreference(int)> -> _SINK_
<android.graphics.Matrix$1: boolean setPolyToPoly(float[],int,float[],int,int)> -> _SINK_
<com.android.videoeditor.widgets.OverlayLinearLayout: void setSelected(boolean)> -> _SINK_
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAudioTrackVolume(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void enableIpv6(java.lang.String)> -> _SINK_
<android.animation.Animator: void setTarget(java.lang.Object)> -> _SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: void setGestureHandlingEnabledByUser(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)> -> _SINK_
<android.view.SurfaceView: void setZOrderOnTop(boolean)> -> _SINK_
<com.android.vcard.VCardProperty: void addParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: void set(com.android.gallery3d.filtershow.imageshow.GeometryMetadata)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void updateStatusIcon(android.os.IBinder,java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int)> -> _SINK_
<android.webkit.WebViewClassic: void setInitialScale(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.app.ActivityManagerProxy: void unstableProviderDied(android.os.IBinder)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetOptions(int,android.os.Bundle)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendReinvite(javax.sip.Dialog,java.lang.String)> -> _SINK_
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<android.view.View: void setFocusableInTouchMode(boolean)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: void setLocalCropBounds(android.graphics.RectF)> -> _SINK_
<android.view.GLES20DisplayList: void setClipChildren(boolean)> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setAcceptLanguage(java.util.Locale)> -> _SINK_
<com.android.deskclock.LabelDialogFragment: com.android.deskclock.LabelDialogFragment newInstance(com.android.deskclock.timer.TimerObj,java.lang.String,java.lang.String)> -> _SINK_
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendBroadcast(boolean,boolean,boolean)> -> _SINK_
<android.webkit.ZoomManager: void onFirstLayout(android.webkit.WebViewCore$DrawData)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: void setCropBounds(android.graphics.RectF)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.UiModeManagerService: void setNightMode(int)> -> _SINK_
<com.android.server.MountService: boolean onEvent(int,java.lang.String,java.lang.String[])> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.Activity: void setProgressBarIndeterminate(boolean)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<android.webkit.WebIconDatabaseClassic: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> -> _SINK_
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setProtocol(java.lang.String)> -> _SINK_
<com.android.deskclock.timer.TimerListItem: void setCircleBlink(boolean)> -> _SINK_
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: boolean unbindService(android.app.IServiceConnection)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aname(char[],int,int)> -> _SINK_
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.xml.ExpatParser: void startDtd(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setNavigationIconHints(int)> -> _SINK_
<android.util.PrefixPrinter: void println(java.lang.String)> -> _SINK_
<android.animation.ValueAnimator: android.animation.Animator setDuration(long)> -> _SINK_
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setOngoing(boolean)> -> _SINK_
<java.net.DatagramSocket: void setTrafficClass(int)> -> _SINK_
<com.android.browser.WebStorageSizeManager: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub$Proxy: void send(int,android.os.Bundle)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setNegativePrefix(java.lang.String)> -> _SINK_
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsScanEnd(long)> -> _SINK_
<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setUseClientMode(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setGlobalAlert(long)> -> _SINK_
<com.android.launcher2.ShortcutInfo: void onAddToDatabase(android.content.ContentValues)> -> _SINK_
<android.view.GLES20DisplayList: void setHasOverlappingRendering(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite: void setPositions(android.graphics.PointF,android.graphics.PointF,int,int)> -> _SINK_
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)> -> _SINK_
<android.animation.PropertyValuesHolder: void setFloatValues(float[])> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Any: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreFinished(int)> -> _SINK_
<com.adobe.xmp.impl.CountOutputStream: void write(int)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])> -> _SINK_
<com.android.server.am.BroadcastFilter: void dumpInReceiverList(java.io.PrintWriter,android.util.Printer,java.lang.String)> -> _SINK_
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeChar(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void finishDrawing(android.view.IWindow)> -> _SINK_
<android.appwidget.AppWidgetManager: void setBindAppWidgetPermission(java.lang.String,boolean)> -> _SINK_
<android.webkit.CallbackProxy: void onScaleChanged(float,float)> -> _SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<com.android.inputmethod.latin.SubtypeLocale: void init(android.content.Context)> -> _SINK_
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> -> _SINK_
<android.app.ListFragment: void setListShownNoAnimation(boolean)> -> _SINK_
<com.google.common.collect.ForwardingConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SINK_
<android.content.res.Configuration: void setTo(android.content.res.Configuration)> -> _SINK_
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)> -> _SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)> -> _SINK_
<android.view.Surface: void setFlags(int,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> -> _SINK_
<com.android.deskclock.Alarms: void setNextAlert(android.content.Context)> -> _SINK_
<com.android.gallery3d.app.AbstractGalleryActivity: void setContentView(int)> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterReceiver(android.content.IIntentReceiver)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setRoundingMode(java.math.RoundingMode,double)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnableSessionCreation(boolean)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setMetadata(int,android.os.Bundle)> -> _SINK_
<android.widget.RemoteViews: void setScrollPosition(int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.graphics.Canvas)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: void setToTag(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setAlpha(int)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)> -> _SINK_
<android.webkit.WebView: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)> -> _SINK_
<com.android.inputmethod.latin.Suggest: void setUserHistoryDictionary(com.android.inputmethod.latin.UserHistoryDictionary)> -> _SINK_
<android.app.Instrumentation: void execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)> -> _SINK_
<com.android.phone.ManageConferenceUtils: void setPanelVisible(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<com.android.phone.BluetoothPhoneService$3: boolean sendDtmf(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setRotation(int)> -> _SINK_
<com.android.providers.settings.SettingsHelper: boolean restoreValue(java.lang.String,java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.internal.AlphabetShiftState: void setShifted(boolean)> -> _SINK_
<com.android.launcher2.Launcher: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<java.util.zip.Adler32: void update(byte[])> -> _SINK_
<android.app.Activity: void onCreate(android.os.Bundle)> -> _SINK_
<java.math.BigInt: void setSign(int)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator setVisibilityWhenDone(android.animation.Animator,android.view.View,int)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void sendDownUpKeyEvents(int)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean handleMessage(android.os.Message)> -> _SINK_
<android.media.MediaRouter$UserRouteInfo: void setVolume(int)> -> _SINK_
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setWantClientAuth(boolean)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setMethodParam(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_
<android.view.View: void setFilterTouchesWhenObscured(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setAlphabeticShortcut(char)> -> _SINK_
<com.google.common.collect.ForwardingMultiset: int setCount(java.lang.Object,int)> -> _SINK_
<org.apache.http.impl.auth.DigestScheme: void overrideParamter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setComposingRegion(int,int)> -> _SINK_
<android.support.v13.app.FragmentCompat: void setUserVisibleHint(android.app.Fragment,boolean)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.os.BatteryStats$HistoryItem: void writeDelta(android.os.Parcel,android.os.BatteryStats$HistoryItem)> -> _SINK_
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)> -> _SINK_
<java.util.jar.JarVerifier: void addMetaEntry(java.lang.String,byte[])> -> _SINK_
<com.android.server.EventLogTags: void writeWatchdog(java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setTargetRegion(android.filterfw.geometry.Quad)> -> _SINK_
<android.view.GLES20DisplayList: void setLeftTopRightBottom(int,int,int,int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setScaleAndMagnifiedRegionCenter(float,float,float,boolean)> -> _SINK_
<android.view.View$11: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$12: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.View$10: void setValue(java.lang.Object,float)> -> _SINK_
<android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)> -> _SINK_
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)> -> _SINK_
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setBoolean(java.lang.String,boolean,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setChecked(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: void setPrimaryAccount(java.lang.String)> -> _SINK_
<android.media.effect.SingleFilterEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.preference.PreferenceGroup: void setEnabled(boolean)> -> _SINK_
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)> -> _SINK_
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)> -> _SINK_
<com.google.common.io.Files: void write(byte[],java.io.File)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateStatusBarVisibilityLocked(int)> -> _SINK_
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.util.IdentityCache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: void onGesture(int)> -> _SINK_
<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])> -> _SINK_
<dalvik.system.profiler.HprofData: void addStackTrace(dalvik.system.profiler.HprofData$StackTrace,int[])> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchSystemUiVisibilityChanged(int,int,int,int)> -> _SINK_
<android.widget.ImageView: void setAlpha(int)> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onBackupPackage(java.lang.String)> -> _SINK_
<gov.nist.core.LexerCore: java.util.Hashtable addLexer(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setUseClientMode(boolean)> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: void setReceivingCallsEnabled(boolean)> -> _SINK_
<java.text.BreakIterator: void setText(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<android.speech.tts.BlockingAudioTrack: int write(byte[])> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.os.Parcel: void writeCharArray(char[])> -> _SINK_
<android.test.InstrumentationTestCase: android.app.Activity launchActivity(java.lang.String,java.lang.Class,android.os.Bundle)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PPreferredIdentity: void setValue(java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setDrawMode(int)> -> _SINK_
<com.android.gallery3d.ui.PositionController: void setConstrainedFrame(android.graphics.Rect)> -> _SINK_
<android.location.Location: void set(android.location.Location)> -> _SINK_
<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)> -> _SINK_
<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setLocalName(int,java.lang.String)> -> _SINK_
<android.view.animation.AnimationSet: void setStartOffset(long)> -> _SINK_
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)> -> _SINK_
<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)> -> _SINK_
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<com.android.server.PackageManagerBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebViewClassic: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: void setLocalScale(float)> -> _SINK_
<com.android.server.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<android.preference.VolumePreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.drm.DrmManagerClient$EventHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.location.ProviderRequest: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabledForPackage(java.lang.String)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,double)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PProfileKey: void setValue(java.lang.String)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,int)> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.animation.ObjectAnimator: void setFloatValues(float[])> -> _SINK_
<com.android.server.am.ContentProviderRecord: void addExternalProcessHandleLocked(android.os.IBinder)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReuseAddress(boolean)> -> _SINK_
<com.android.browser.BrowserSettings: void setAutoFillProfile(android.webkit.WebSettingsClassic$AutoFillProfile,android.os.Message)> -> _SINK_
<android.widget.SearchView: void setIconifiedByDefault(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SINK_
<android.filterpacks.imageproc.ImageCombineFilter: void process(android.filterfw.core.FilterContext)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList: void dumpValue(java.lang.StringBuilder)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setProtocol(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.EdgeEffect$Drawable: void setBounds(int,int,int,int)> -> _SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<com.google.android.apps.lightcycle.shaders.TransparencyShader: void setAlpha(float)> -> _SINK_
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void addDisplayContentChangeListener(int,android.view.IDisplayContentChangeListener)> -> _SINK_
<com.android.gallery3d.exif.OrderedDataOutputStream: void writeShort(short)> -> _SINK_
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void setToTag(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void sendUrgentData(int)> -> _SINK_
<android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void updateNetworkState(int,android.net.NetworkInfo)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Integer: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData)> -> _SINK_
<android.webkit.WebViewClassic$FocusTransitionDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void addAppToken(int,int,android.view.IApplicationToken,int,int,boolean,boolean)> -> _SINK_
<android.telephony.CellSignalStrengthGsm: void setDefaultValues()> -> _SINK_
<android.media.IRemoteVolumeObserver$Stub$Proxy: void dispatchRemoteVolumeUpdate(int,int)> -> _SINK_
<android.opengl.GLSurfaceView: void setEGLConfigChooser(boolean)> -> _SINK_
<android.webkit.WebViewClassic$FocusTransitionDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean,int)> -> _SINK_
<com.android.server.AlarmManagerService: void setWakelockWorkSource(android.app.PendingIntent)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)> -> _SINK_
<com.android.launcher2.CellLayout: void setFolderLeaveBehindCell(int,int)> -> _SINK_
<com.android.gallery3d.data.ImageCacheService: void putImageData(com.android.gallery3d.data.Path,int,byte[])> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Constants: void setModelview(android.renderscript.Matrix4f)> -> _SINK_
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)> -> _SINK_
<com.google.common.collect.AbstractMultiset: boolean setCount(java.lang.Object,int,int)> -> _SINK_
<android.widget.ActivityChooserModel$DefaultSorter: void sort(android.content.Intent,java.util.List,java.util.List)> -> _SINK_
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> -> _SINK_
<android.webkit.WebSettings: void setTextZoom(int)> -> _SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: int setMoreSuggestionsHeight(int)> -> _SINK_
<android.widget.PopupWindow: void update(int,int,int,int,boolean)> -> _SINK_
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)> -> _SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)> -> _SINK_
<android.widget.Spinner: void setPromptId(int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setSplitActionBar(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)> -> _SINK_
<android.util.SparseIntArray: void append(int,int)> -> _SINK_
<com.android.server.wm.WindowAnimator: void dumpLocked(java.io.PrintWriter,java.lang.String,boolean)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setOriginatingIOI(java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.CommandQueue: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> -> _SINK_
<android.renderscript.Allocation: void setSurface(android.view.Surface)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setEnabled(boolean)> -> _SINK_
<com.android.gallery3d.common.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.app.ActivityManagerProxy: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> -> _SINK_
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)> -> _SINK_
<com.android.browser.homepages.Template: void assign(java.lang.String,java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeIdleTimer(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
<android.widget.TextView: void setTextColor(int)> -> _SINK_
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)> -> _SINK_
<com.android.server.EventLogTags: void writePowerSleepRequested(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl: void setThreadStatsTag(int)> -> _SINK_
<com.android.server.DropBoxManagerService: void add(android.os.DropBoxManager$Entry)> -> _SINK_
<android.view.MotionEvent: void setSource(int)> -> _SINK_
<android.provider.SyncStateContract$Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)> -> _SINK_
<android.widget.TabWidget: void setRightStripDrawable(int)> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setParm(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setDelegateView(android.view.View)> -> _SINK_
<com.android.gallery3d.data.TagClustering$1: void consume(int,com.android.gallery3d.data.MediaItem)> -> _SINK_
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> -> _SINK_
<android.renderscript.Script: void setTimeZone(java.lang.String)> -> _SINK_
<android.util.SparseBooleanArray: void append(int,boolean)> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.browser.view.PieStackView: void setCurrent(int)> -> _SINK_
<android.media.MediaRouter$UserRouteInfo: void setIconResource(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])> -> _SINK_
<com.android.providers.calendar.CalendarAlarmManager: void set(int,long,android.app.PendingIntent)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoLinger(boolean,int)> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)> -> _SINK_
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean)> -> _SINK_
<java.text.NumberFormat: void setCurrency(java.util.Currency)> -> _SINK_
<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayAltText(boolean)> -> _SINK_
<android.webkit.MockGeolocation: void setPosition(double,double,double)> -> _SINK_
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: void installCaCertificate(byte[])> -> _SINK_
<android.provider.Settings$System: void setShowGTalkServiceStatusForUser(android.content.ContentResolver,boolean,int)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void vibrate(int,long[],int,android.os.IBinder)> -> _SINK_
<android.renderscript.RenderScript: void setPriority(android.renderscript.RenderScript$Priority)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setClassName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<android.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(android.app.Fragment)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> -> _SINK_
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setLowProfile(boolean)> -> _SINK_
<com.android.server.power.DisplayPowerState: void dump(java.io.PrintWriter)> -> _SINK_
<java.net.MulticastSocket: void setTTL(byte)> -> _SINK_
<java.security.cert.PKIXParameters: void setDate(java.util.Date)> -> _SINK_
<org.apache.http.impl.cookie.AbstractCookieSpec: void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler)> -> _SINK_
<com.android.server.display.WifiDisplayController: void dump(java.io.PrintWriter)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppGroupId(android.os.IBinder,int)> -> _SINK_
<com.android.gallery3d.ui.PositionController: void moveBox(int[],boolean,boolean,boolean,com.android.gallery3d.ui.PhotoView$Size[])> -> _SINK_
<android.app.SearchDialog: void setListSelection(int)> -> _SINK_
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setMenuVisibility(boolean)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setOpaque(java.lang.String)> -> _SINK_
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.exif.OrderedDataOutputStream: void writeInt(int)> -> _SINK_
<org.apache.harmony.security.x509.ExtendedKeyUsage: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<javax.obex.ClientSession: javax.obex.HeaderSet setPath(javax.obex.HeaderSet,boolean,boolean)> -> _SINK_
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> -> _SINK_
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> -> _SINK_
<android.app.ActivityManagerProxy: void setAlwaysFinish(boolean)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void revokeSession(com.android.internal.view.IInputMethodSession)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void write(byte[],int,int)> -> _SINK_
<android.app.ListActivity: void setSelection(int)> -> _SINK_
<android.view.IInputFilterHost$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void notifyAppWidgetViewDataChangedInstanceLocked(com.android.server.AppWidgetServiceImpl$AppWidgetId,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.widget.CalendarView: void setSelectedDateVerticalBar(int)> -> _SINK_
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void updateAppWidget(int,android.widget.RemoteViews)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)> -> _SINK_
<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> -> _SINK_
<android.view.View: void setCameraDistance(float)> -> _SINK_
<com.android.gallery3d.util.GalleryUtils: boolean isEditorAvailable(android.content.Context,java.lang.String)> -> _SINK_
<android.renderscript.Script: void setVar(int,float)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void pauseKeyDispatching(android.os.IBinder)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setLogo(int)> -> _SINK_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)> -> _SINK_
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> -> _SINK_
<com.android.server.am.BroadcastFilter: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.internal.os.BinderInternal: void forceGc(java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> -> _SINK_
<android.speech.tts.AudioPlaybackHandler: void enqueue(android.speech.tts.PlaybackQueueItem)> -> _SINK_
<android.webkit.WebViewClassic: void setLayerType(int,android.graphics.Paint)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: void setActionMove(float,float)> -> _SINK_
<com.android.server.EventLogTags: void writeLowStorage(long)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.filterfw.core.FilterGraph: boolean addFilter(android.filterfw.core.Filter)> -> _SINK_
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)> -> _SINK_
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> -> _SINK_
<com.android.camera.CameraActivity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayUseLogoEnabled(boolean)> -> _SINK_
<android.webkit.SslCertLookupTable: void setIsAllowed(android.net.http.SslError)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setLong(java.lang.String,long,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.camera.ui.CameraSwitcher: void setOrientation(int,boolean)> -> _SINK_
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void remove(android.view.IWindow)> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: void setAttribute(int,int)> -> _SINK_
<com.coremedia.iso.IsoTypeReader: java.lang.String readString(java.nio.ByteBuffer)> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: void set(com.android.deskclock.Alarm$DaysOfWeek)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: void notifyEdgeReached(int,int,int)> -> _SINK_
<com.android.server.LocationManagerService: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)> -> _SINK_
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndProximity createDictAndProximity(java.util.Locale)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations,java.lang.String,boolean)> -> _SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(int,float)> -> _SINK_
<com.android.launcher2.Launcher: void addAppWidgetFromDrop(com.android.launcher2.PendingAddWidgetInfo,long,int,int[],int[],int[])> -> _SINK_
<android.view.View: void setTextAlignment(int)> -> _SINK_
<com.android.phone.EditPhoneNumberPreference: void setValueFromString(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.text.Collator: void setDecomposition(int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(int)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)> -> _SINK_
<android.view.View: void setSoundEffectsEnabled(boolean)> -> _SINK_
<com.android.browser.view.BookmarkExpandableView: void setColumnWidthFromLayout(int)> -> _SINK_
<android.webkit.WebViewClassic: void setWebViewClient(android.webkit.WebViewClient)> -> _SINK_
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.widget.TextView: void sendAccessibilityEvent(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)> -> _SINK_
<android.os.Handler: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)> -> _SINK_
<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unregisterListener(android.os.storage.IMountServiceListener)> -> _SINK_
<android.widget.SearchView: void setImeOptions(int)> -> _SINK_
<android.widget.RemoteViews: void setTextColor(int,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setInts(int[])> -> _SINK_
<com.android.videoeditor.widgets.OverlayLinearLayout$1: boolean onSingleTapConfirmed(android.view.View,int,android.view.MotionEvent)> -> _SINK_
<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void onUpdate(int,java.lang.String)> -> _SINK_
<android.os.ServiceManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)> -> _SINK_
<android.widget.Editor$PinnedPopupWindow: void updatePosition(int,int,boolean,boolean)> -> _SINK_
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)> -> _SINK_
<com.android.server.UpdateLockService: void sendLockChangedBroadcast(boolean)> -> _SINK_
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void untetherInterface(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void startReverseTethering(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.DataManager: void registerChangeNotifier(android.net.Uri,com.android.gallery3d.data.ChangeNotifier)> -> _SINK_
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<java.text.DecimalFormat: void setMaximumFractionDigits(int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoInput(boolean)> -> _SINK_
<com.android.inputmethod.latin.LatinIME: void setCandidatesView(android.view.View)> -> _SINK_
<com.android.systemui.statusbar.phone.SettingsPanelView: void setBar(com.android.systemui.statusbar.phone.PanelBar)> -> _SINK_
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.launcher2.HideFromAccessibilityHelper: void restoreImportantForAccessibility(android.view.View)> -> _SINK_
<com.android.launcher2.Launcher: void addAppWidgetImpl(int,com.android.launcher2.ItemInfo,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeIcon(int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setParent(java.lang.Object,android.view.View)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeToParcelWithoutUids(android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeClient(com.android.internal.view.IInputMethodClient)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.StitchingService: android.content.ContentValues createImageContentValues(java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: void setColumn(int,com.google.android.apps.lightcycle.math.Vector3d)> -> _SINK_
<com.android.gallery3d.ui.CropView$HighlightRectangle: void setRectangle(android.graphics.RectF)> -> _SINK_
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.PrintWriter,boolean)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: void setLocationProviderEnabled(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setNavigationMode(int)> -> _SINK_
<android.os.ServiceManagerProxy: android.os.IBinder checkService(java.lang.String)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setQualifier(boolean)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.SystemSensorManager$ListenerDelegate: void addSensor(android.hardware.Sensor)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setMetaValue(java.lang.String,java.lang.Object)> -> _SINK_
<java.lang.StringBuffer: void setLength(int)> -> _SINK_
<com.android.launcher2.CellLayout: boolean animateChildToPosition(android.view.View,int,int,int,int,boolean,boolean)> -> _SINK_
<android.webkit.CallbackProxy: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionScaleUp(int,int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.To: void setTag(java.lang.String)> -> _SINK_
<android.widget.RemoteViewsService: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<com.android.videoeditor.service.ApiService: void loadMediaItem(android.content.Context,java.lang.String,android.net.Uri,java.lang.String)> -> _SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.commands.am.Am$IntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> -> _SINK_
<android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])> -> _SINK_
<android.widget.AbsListView: void setOverScrollMode(int)> -> _SINK_
<com.android.gallery3d.ui.TileImageViewAdapter: void setRegionDecoder(android.graphics.BitmapRegionDecoder)> -> _SINK_
<java.net.DatagramSocket: void setSendBufferSize(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void insertFadeBlackTransition(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,int)> -> _SINK_
<android.filterfw.core.Frame: void setFormat(android.filterfw.core.FrameFormat)> -> _SINK_
<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)> -> _SINK_
<com.android.gallery3d.util.ThreadPool$JobContextStub: boolean setMode(int)> -> _SINK_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterByStatus(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<android.os.ResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.widget.ListView: void setCacheColorHint(int)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void appendAndPutEnabledInputMethodLocked(java.lang.String,boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void moveMediaItem(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.security.IKeyChainService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.content.Intent: void setSourceBounds(android.graphics.Rect)> -> _SINK_
<com.android.deskclock.TimerSetupView: void saveEntryState(android.os.Bundle,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: void setLayoutTransitionsEnabled(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char[],int,int)> -> _SINK_
<com.android.gallery3d.ui.PositionController: void setViewSize(int,int)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void setLockPassword(byte[],int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> -> _SINK_
<android.media.MediaRouter$WifiDisplayStatusChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setMAddr(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic: void setMockGeolocationError(int,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<com.android.browser.Controller$SaveSnapshotTask: void onPostExecute(java.lang.Long)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setPort(int)> -> _SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)> -> _SINK_
<gov.nist.javax.sip.header.RSeq: void setSequenceNumber(int)> -> _SINK_
<android.app.ActivityManagerProxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> -> _SINK_
<com.android.server.wm.Session: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord removeTaskActivitiesLocked(int,int,boolean)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: int appEarlyNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> -> _SINK_
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setFromTag(java.lang.String)> -> _SINK_
<com.android.server.usb.UsbService: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setTransparentRegionWindow(com.android.server.wm.Session,android.view.IWindow,android.graphics.Region)> -> _SINK_
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker,android.renderscript.Element,int[])> -> _SINK_
<java.net.ServerSocket: void setReuseAddress(boolean)> -> _SINK_
<android.view.MotionEvent: void setEdgeFlags(int)> -> _SINK_
<com.android.server.power.WirelessChargerDetector: void dump(java.io.PrintWriter)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int,int)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneDatabaseVersion(java.lang.String)> -> _SINK_
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)> -> _SINK_
<com.android.server.wm.WindowManagerService: void addDisplayContentChangeListener(int,android.view.IDisplayContentChangeListener)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void grantPermission(java.lang.String,java.lang.String)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> -> _SINK_
<java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.videoeditor.service.ApiService: void deleteProject(android.content.Context,java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void reportDropResult(android.view.IWindow,boolean)> -> _SINK_
<org.json.JSONArray: org.json.JSONArray put(int,long)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: boolean performAccessibilityAction(int,int,long,int,android.os.Bundle)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setNeedClientAuth(boolean)> -> _SINK_
<com.android.browser.homepages.Template: void assignLoop(java.lang.String,com.android.browser.homepages.Template$ListEntityIterator)> -> _SINK_
<android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl: void setSize(java.lang.Object,int,int)> -> _SINK_
<com.android.server.AlarmManagerService: void setTime(long)> -> _SINK_
<com.android.browser.homepages.Template$ListEntity: void write(java.io.OutputStream,com.android.browser.homepages.Template$EntityData)> -> _SINK_
<android.widget.AdapterViewAnimator: void setRemoteViewsOnClickHandler(android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyStylesSet: void parseKeyStyleAttributes(android.content.res.TypedArray,android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)> -> _SINK_
<android.app.SearchDialog: void setWorking(boolean)> -> _SINK_
<com.android.server.wm.DimAnimator: void printTo(java.lang.String,java.io.PrintWriter)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(gov.nist.core.NameValue)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomSpeed(long)> -> _SINK_
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.widget.Gallery: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void setKeyPreviewPopupEnabled(boolean,int)> -> _SINK_
<android.hardware.display.IDisplayManagerCallback$Stub$Proxy: void onDisplayEvent(int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setHardKeyboardStatus(boolean,boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setCheckable(boolean)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: void setCurrentPhoto(com.android.gallery3d.data.Path,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneDataConnectionState(int,boolean)> -> _SINK_
<com.android.camera.ComboPreferences$MyEditor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> -> _SINK_
<com.android.gallery3d.ui.UndoBarView: void setVisibility(int)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartGps(int)> -> _SINK_
<com.android.commands.am.Am$InstrumentationWatcher: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> -> _SINK_
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)> -> _SINK_
<android.service.dreams.IDreamService$Stub$Proxy: void attach(android.os.IBinder)> -> _SINK_
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<com.android.server.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SINK_
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.widget.AutoCompleteTextView: void setForceIgnoreOutsideTouch(boolean)> -> _SINK_
<com.android.wallpaper.galaxy.GalaxyRS: void setOffset(float,float,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowTitleEnabled(boolean)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> -> _SINK_
<com.google.android.apps.lightcycle.panorama.LightCycleView: void setLiveImageDisplay(boolean)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void goToSleep(long,int)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.InputStream,java.lang.String)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte)> -> _SINK_
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setAlpha(int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,long)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setIsdnSubAddress(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledProtocols(java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<com.android.phone.CallFeaturesSetting: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.launcher2.LauncherProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)> -> _SINK_
<org.apache.harmony.security.x509.IssuingDistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader set(int,gov.nist.javax.sip.header.SIPHeader)> -> _SINK_
<android.view.Surface: void setWindowCrop(android.graphics.Rect)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: void setTitle(int)> -> _SINK_
<com.adobe.xmp.impl.CountOutputStream: void write(byte[],int,int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: void setSelected(boolean)> -> _SINK_
<android.widget.RemoteViews$ViewGroupAction: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.dreams.DreamManagerService: void testDream(android.content.ComponentName)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeToParcelLocked(android.os.Parcel,boolean,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,int)> -> _SINK_
<libcore.net.http.RawHeaders: void set(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void set(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)> -> _SINK_
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.view.HardwareLayer: void setLayerPaint(android.graphics.Paint)> -> _SINK_
<com.android.phone.DTMFTwelveKeyDialer: void startLocalToneIfNeeded(char)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void startAppFreezingScreen(android.os.IBinder,int)> -> _SINK_
<com.android.launcher2.LauncherModel: boolean queueIconToBeChecked(java.util.HashMap,com.android.launcher2.ShortcutInfo,android.database.Cursor,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScreenBrightness(int)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)> -> _SINK_
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)> -> _SINK_
<android.gesture.GestureLibrary: void setSequenceType(int)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: void setMainView(com.google.android.apps.lightcycle.panorama.LightCycleView)> -> _SINK_
<android.view.Surface: void setPosition(int,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)> -> _SINK_
<org.json.JSONArray: org.json.JSONArray put(int,boolean)> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)> -> _SINK_
<android.os.IRemoteCallback$Stub$Proxy: void sendResult(android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: void setRel(java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.TargetApplicationGetter: android.content.pm.ApplicationInfo doInBackground(java.lang.String[])> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int synthesizeToFile(android.os.IBinder,java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.OverScroller: void startScroll(int,int,int,int,int)> -> _SINK_
<com.android.server.wm.WindowStateAnimator: void dump(java.io.PrintWriter,java.lang.String,boolean)> -> _SINK_
<com.android.server.wm.WindowAnimator: void setScreenRotationAnimationLocked(int,com.android.server.wm.ScreenRotationAnimation)> -> _SINK_
<android.view.textservice.TextServicesManager: void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindNull(int)> -> _SINK_
<com.android.phone.PhoneUtils$ConnectionHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void finishedEvent(int,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void tetherInterface(java.lang.String)> -> _SINK_
<android.support.v4.view.ViewCompatICS: void setAccessibilityDelegate(android.view.View,java.lang.Object)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)> -> _SINK_
<android.view.Window: void setUiOptions(int,int)> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt32BE(java.nio.ByteBuffer,long)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)> -> _SINK_
<com.android.camera.PanoProgressBar: void setDoneColor(int)> -> _SINK_
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)> -> _SINK_
<android.app.ActivityManagerProxy: void noteWakeupAlarm(android.content.IIntentSender)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: boolean setUserLockedChild(android.view.View,boolean)> -> _SINK_
<com.android.launcher2.Workspace: void setFinalScrollForPageChange(int)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)> -> _SINK_
<gov.nist.javax.sip.header.ims.PCalledPartyID: void setValue(java.lang.String)> -> _SINK_
<gov.nist.core.NameValue: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setGroupingSize(int)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> -> _SINK_
<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)> -> _SINK_
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.inputmethodservice.InputMethodService: boolean onExtractTextContextMenuItem(int)> -> _SINK_
<android.text.style.URLSpan: void onClick(android.view.View)> -> _SINK_
<com.android.deskclock.Alarm$DaysOfWeek: void setDayOfWeek(int,boolean)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: boolean processMessage(android.os.Message)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setPermissionEnforced(java.lang.String,boolean)> -> _SINK_
<com.android.server.am.IntentBindRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)> -> _SINK_
<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: void setValue(int[])> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: void setDecomposition(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleSendResult(android.os.IBinder,java.util.List)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setInstanceFollowRedirects(boolean)> -> _SINK_
<java.lang.System: void setOut(java.io.PrintStream)> -> _SINK_
<com.android.videoeditor.service.ApiService: void extractAudioTrackAudioWaveform(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> -> _SINK_
<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(char)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: void setGuestEnabled(boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)> -> _SINK_
<com.android.systemui.statusbar.tablet.NotificationPanel: void setSettingsEnabled(boolean)> -> _SINK_
<com.android.server.PreferredComponent: void dump(java.io.PrintWriter,java.lang.String,java.lang.Object)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setEnabled(java.lang.Object,boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> -> _SINK_
<java.lang.String: boolean startsWith(java.lang.String)> -> _SINK_
<com.android.camera.ui.MoreSettingPopup: void setPreferenceEnabled(java.lang.String,boolean)> -> _SINK_
<android.filterfw.core.NativeFrame: void setInts(int[])> -> _SINK_
<android.widget.Spinner: void setDropDownHorizontalOffset(int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setNeedClientAuth(boolean)> -> _SINK_
<android.content.ContextWrapper: void setTheme(int)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAspectRatio(android.content.Context,java.lang.String,int)> -> _SINK_
<com.android.camera.CameraScreenNail: void setPreviewFrameLayoutSize(int,int)> -> _SINK_
<java.net.Socket: void bind(java.net.SocketAddress)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setScheme(java.lang.String)> -> _SINK_
<com.android.server.EventLogTags: void writeCacheFileDeleted(java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)> -> _SINK_
<android.widget.ScrollView: void setOverScrollMode(int)> -> _SINK_
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.BaseStatusBar: boolean inflateViews(com.android.systemui.statusbar.NotificationData$Entry,android.view.ViewGroup)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)> -> _SINK_
<com.android.inputmethod.latin.UserBinaryDictionary: void addWordToUserDictionary(java.lang.String,int)> -> _SINK_
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<com.android.launcher2.HideFromAccessibilityHelper: void onChildViewRemoved(android.view.View,android.view.View)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)> -> _SINK_
<android.location.LocationManager$ListenerTransport: void onStatusChanged(java.lang.String,int,android.os.Bundle)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSendBufferSize(int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<com.android.inputmethod.latin.WordComposer: void setBatchInputPointers(com.android.inputmethod.latin.InputPointers)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onFirstFix(int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensionCount(int)> -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer opaqueWithoutData(int)> -> _SINK_
<android.view.GLES20DisplayList: void setTop(int)> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandom: void setFactors(int,float)> -> _SINK_
<com.android.server.pm.UserManagerService: void userForeground(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)> -> _SINK_
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: void setLapTimes(long[])> -> _SINK_
<java.util.jar.Manifest: void write(java.util.jar.Manifest,java.io.OutputStream)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: boolean handleMessage(android.os.Message)> -> _SINK_
<com.android.launcher2.ShortcutAndWidgetContainer: void setupLp(com.android.launcher2.CellLayout$LayoutParams)> -> _SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int)> -> _SINK_
<gov.nist.core.GenericObject: void dbgPrint(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void setDisabledComponentsCopy(java.util.HashSet,int)> -> _SINK_
<android.text.TextPaint: void set(android.text.TextPaint)> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl: void drawTexture(com.android.gallery3d.ui.BasicTexture,android.graphics.RectF,android.graphics.RectF)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite: void setPositionsCentered(float,float,int,int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setTerminatingIOI(java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl: void setVisibleToUser(java.lang.Object,boolean)> -> _SINK_
<android.media.MediaRecorder: void setOrientationHint(int)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setChargingCollectionFunctionAddress(java.lang.String)> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: void setItems(java.util.Map)> -> _SINK_
<java.io.PrintStream: void write(int)> -> _SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateMeasureState(android.text.TextPaint)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCI3GPP2(java.lang.String)> -> _SINK_
<android.view.View$AttachInfo$InvalidateInfo: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void putValue(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityResuming(java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBarView: void setIgnoreChildren(int,android.view.View,android.view.View)> -> _SINK_
<android.view.ViewGroup: void setPersistentDrawingCache(int)> -> _SINK_
<android.os.WorkSource: boolean add(android.os.WorkSource)> -> _SINK_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setURI(int,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void activityDestroyed(android.os.IBinder)> -> _SINK_
<android.app.Notification: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivityUncheckedLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,int,boolean,android.os.Bundle)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void setLayoutDirection(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performEditorAction(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> -> _SINK_
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.clientauthutils.CredentialsCache: void cacheAuthorizationHeader(java.lang.String,javax.sip.header.AuthorizationHeader,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: void launchWidgetPicker(int)> -> _SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setString(java.lang.String,java.lang.String,int)> -> _SINK_
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitching(int,android.os.IRemoteCallback)> -> _SINK_
<android.widget.DatePicker: void setCalendarViewShown(boolean)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void addService(android.content.pm.PackageParser$Service)> -> _SINK_
<libcore.net.http.HttpConnection: void setSoTimeout(int)> -> _SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> -> _SINK_
<android.widget.TextView: void setText(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> -> _SINK_
<android.media.MediaRouter$Static: void onDisplayChanged(int)> -> _SINK_
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void addError(junit.framework.Test,java.lang.Throwable)> -> _SINK_
<java.text.DecimalFormat: void setMinimumFractionDigits(int)> -> _SINK_
<android.widget.CalendarView: void setDate(long)> -> _SINK_
<java.util.HugeEnumSet: void setRange(java.lang.Enum,java.lang.Enum)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchTrackballEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)> -> _SINK_
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)> -> _SINK_
<android.view.Surface: void setAlpha(float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)> -> _SINK_
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1SequenceOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> -> _SINK_
<com.android.systemui.media.NotificationPlayer: void setUsesWakeLock(android.content.Context)> -> _SINK_
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.preference.ListPreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: void setFinalX(float)> -> _SINK_
<android.widget.AbsSpinner: void setSelectionInt(int,boolean)> -> _SINK_
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> -> _SINK_
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledCipherSuites(java.lang.String[])> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setPerformAccessibilityActionResult(boolean,int)> -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void startTest(junit.framework.Test)> -> _SINK_
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.power.DisplayPowerState$2: void setValue(com.android.server.power.DisplayPowerState,int)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: void sendUserSwitchBroadcastsLocked(int,int)> -> _SINK_
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)> -> _SINK_
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setKeepScreenOn(boolean)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreStarting(int)> -> _SINK_
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)> -> _SINK_
<com.android.uiautomator.core.UiDevice: void registerWatcher(java.lang.String,com.android.uiautomator.core.UiWatcher)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void restartInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)> -> _SINK_
<java.util.BitSet: void set(int,int)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,boolean)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)> -> _SINK_
<android.app.ActivityManagerProxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)> -> _SINK_
<com.android.server.sip.SipHelper: void sendBye(javax.sip.Dialog)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)> -> _SINK_
<android.app.ApplicationThreadProxy: void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)> -> _SINK_
<android.webkit.WebViewDatabaseClassic: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setTransportControlFlags(int,int)> -> _SINK_
<com.google.common.base.CharMatcher$LookupTable: void set(char)> -> _SINK_
<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskBackwards(int)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SINK_
<com.android.exchange.adapter.AccountSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> -> _SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$1: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<android.widget.ImageView: void setSelected(boolean)> -> _SINK_
<com.android.systemui.statusbar.AnimatedImageView: void setImageResource(int)> -> _SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnInfoListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.app.ActivityManagerProxy: boolean switchUser(int)> -> _SINK_
<com.android.internal.util.StateMachine: void setDbg(boolean)> -> _SINK_
<android.os.ISchedulingPolicyService$Stub$Proxy: int requestPriority(int,int,int)> -> _SINK_
<com.android.internal.app.HeavyWeightSwitcherActivity: void setIconAndText(int,int,int,java.lang.String,int,int)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])> -> _SINK_
<java.util.logging.Logger: void setLevel(java.util.logging.Level)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(short)> -> _SINK_
<java.net.Socks4Message: void setPort(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)> -> _SINK_
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])> -> _SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,long)> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)> -> _SINK_
<android.service.wallpaper.WallpaperService$Engine$2: void setFixedSize(int,int)> -> _SINK_
<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)> -> _SINK_
<com.android.server.display.LogicalDisplay: void setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)> -> _SINK_
<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setValue(java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeByte(int)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<com.android.launcher2.LauncherProvider: void loadDefaultFavoritesIfNecessary(int)> -> _SINK_
<android.webkit.WebViewClassic: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)> -> _SINK_
<com.android.systemui.statusbar.policy.NotificationRowLayout: boolean setUserExpandedChild(android.view.View,boolean)> -> _SINK_
<javax.obex.PrivateOutputStream: void write(byte[])> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)> -> _SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
<android.widget.ListView: void setSelectionInt(int)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: void setGrant(int,java.lang.String,boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int destroySecureContainer(java.lang.String,boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPackageToPreferred(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)> -> _SINK_
<com.android.camera.MosaicFrameProcessor: void setStripType(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])> -> _SINK_
<android.widget.GridView: void setSelectionInt(int)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)> -> _SINK_
<android.view.View: void setHovered(boolean)> -> _SINK_
<android.view.ViewStub: void setVisibility(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction,boolean)> -> _SINK_
<com.android.exchange.ExchangeService: void done(com.android.exchange.AbstractSyncService)> -> _SINK_
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: void setTimeValue(long)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setVisible(boolean)> -> _SINK_
<java.net.AddressCache: void putUnknownHost(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebViewCore: void setMockGeolocationError(int,java.lang.String)> -> _SINK_
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setMAddrParam(java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteHost(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICIDGeneratedAt(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: boolean setComposingRegion(int,int)> -> _SINK_
<android.webkit.CacheManager: void saveCacheFile(java.lang.String,android.webkit.CacheManager$CacheResult)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(int)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: void forgetWifiDisplay(java.lang.String)> -> _SINK_
<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)> -> _SINK_
<com.google.common.collect.TreeMultiset: boolean setCount(java.lang.Object,int,int)> -> _SINK_
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])> -> _SINK_
<android.widget.TextView: void setPadding(int,int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.From: void setTag(java.lang.String)> -> _SINK_
<android.widget.ScrollBarDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.Activity: void setFinishOnTouchOutside(boolean)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setCursorCapsMode(int,int)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.app.ActivityManagerProxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)> -> _SINK_
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> -> _SINK_
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)> -> _SINK_
<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)> -> _SINK_
<android.os.Registrant: void notifyException(java.lang.Throwable)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setResponse(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: void setSessionTimeout(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setAlgorithm(java.lang.String)> -> _SINK_
<android.widget.TextView: void setSpan_internal(java.lang.Object,int,int,int)> -> _SINK_
<android.os.Parcel: void writeCharSequenceArray(java.lang.CharSequence[])> -> _SINK_
<android.support.v13.app.FragmentPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.google.common.collect.Lists$ReverseList$1: void set(java.lang.Object)> -> _SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendShareAvailabilityChanged(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])> -> _SINK_
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(int)> -> _SINK_
<android.widget.RemoteViews$ViewGroupAction: void setBitmapCache(android.widget.RemoteViews$BitmapCache)> -> _SINK_
<android.app.ApplicationPackageManager: void addPackageToPreferred(java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int,boolean)> -> _SINK_
<com.android.server.input.InputManagerService: void setSystemUiVisibility(int)> -> _SINK_
<android.app.ActivityThread: void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)> -> _SINK_
<com.android.inputmethod.latin.LatinIME: void setInputView(android.view.View)> -> _SINK_
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int)> -> _SINK_
<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)> -> _SINK_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCrash(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setStrictModeVisualIndicatorPreference(java.lang.String)> -> _SINK_
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)> -> _SINK_
<com.android.inputmethod.keyboard.internal.AlphabetShiftState: void setShiftLocked(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.math.Vector3d: void set(com.google.android.apps.lightcycle.math.Vector3d)> -> _SINK_
<com.android.browser.HistoryItem: void setIsBookmark(boolean)> -> _SINK_
<android.os.PowerManager: void setBacklightBrightness(int)> -> _SINK_
<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: void writeTimerToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Timer,long)> -> _SINK_
<com.android.server.am.ConnectionRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SINK_
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.drm.DrmInfo: void put(java.lang.String,java.lang.Object)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isObbMounted(java.lang.String)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setInTouchMode(boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setIK(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void disable(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledProtocols(java.lang.String[])> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> -> _SINK_
<com.android.server.display.DisplayDeviceInfo: void setAssumedDensityForExternalDisplay(int,int)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: void setDataDependency(int,boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfosByText(long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<android.webkit.WebSettingsClassic: void setAutoFillEnabled(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setCurrentClientId(int,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetOptions(int,android.os.Bundle)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: void setFocusHintPath(com.android.gallery3d.data.Path)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void access$000(com.android.internal.widget.LockSettingsService,android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onTransitionDurationSet(java.lang.String,java.lang.String,long,java.lang.Exception)> -> _SINK_
<com.android.camera.PieController: void setCameraId(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setCK(java.lang.String)> -> _SINK_
<android.view.View: void setVerticalScrollBarEnabled(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<com.android.server.EventLogTags: void writeFreeStorageChanged(long)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean isProtectedBroadcast(java.lang.String)> -> _SINK_
<android.widget.AbsListView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<libcore.io.ForwardingOs: void setuid(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeLong(long)> -> _SINK_
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)> -> _SINK_
<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartSensor(int,int)> -> _SINK_
<android.filterfw.core.AsyncRunner: void setGraph(android.filterfw.core.FilterGraph)> -> _SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setValidating(boolean)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)> -> _SINK_
<android.widget.ScrollView: void draw(android.graphics.Canvas)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)> -> _SINK_
<android.preference.DialogPreference: void setPositiveButtonText(int)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView: void setExpandedFraction(float)> -> _SINK_
<java.io.PrintWriter: void println(char[])> -> _SINK_
<com.android.deskclock.AlarmClock: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.gallery3d.common.OverScroller: void startScroll(int,int,int,int,int)> -> _SINK_
<android.app.LoaderManagerImpl: void installLoader(android.app.LoaderManagerImpl$LoaderInfo)> -> _SINK_
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder)> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub$Proxy: void onWindowLayersChanged(int)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)> -> _SINK_
<com.android.server.IntentResolverOld: boolean dumpMap(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.String,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setKeepAlive(boolean)> -> _SINK_
<com.android.launcher2.Alarm: void setAlarm(long)> -> _SINK_
<com.android.gallery3d.util.InterruptableOutputStream: void write(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)> -> _SINK_
<com.android.server.ThrottleService$DataRecorder: boolean setNextPeriod(java.util.Calendar,java.util.Calendar)> -> _SINK_
<android.widget.TextView: void setSingleLine(boolean)> -> _SINK_
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)> -> _SINK_
<android.view.Window: void setFlags(int,int)> -> _SINK_
<android.widget.AbsListView$PositionScroller: void start(int,int)> -> _SINK_
<gov.nist.javax.sip.parser.ParserFactory: gov.nist.javax.sip.parser.HeaderParser createParser(java.lang.String)> -> _SINK_
<com.android.server.pm.UserManagerService: void finishRemoveUser(int)> -> _SINK_
<android.location.Location: void setExtras(android.os.Bundle)> -> _SINK_
<com.android.deskclock.timer.CountingTimerView: void setTime(long,boolean,boolean)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(java.lang.String,int)> -> _SINK_
<android.webkit.CallbackProxy: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<android.media.MediaPlayer: void setVideoScalingMode(int)> -> _SINK_
<com.android.server.RecognitionManagerService: void setCurRecognizer(android.content.ComponentName,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.launcher2.Workspace: void setFinalTransitionTransform(com.android.launcher2.CellLayout)> -> _SINK_
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)> -> _SINK_
<com.android.browser.view.BookmarkContainer: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> -> _SINK_
<com.android.deskclock.timer.TimerListItem: void setTime(long,boolean)> -> _SINK_
<android.text.format.Time: long setJulianDay(int)> -> _SINK_
<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.view.animation.AnimationSet: void setRepeatMode(int)> -> _SINK_
<com.android.camera.ui.PieItem: void setBounds(int,int,int,int)> -> _SINK_
<android.app.Activity: void setSecondaryProgress(int)> -> _SINK_
<android.os.PerformanceCollector: void startTiming(java.lang.String)> -> _SINK_
<java.util.BitSet: void set(int,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void cancelIntentSender(android.content.IIntentSender)> -> _SINK_
<com.android.server.AppWidgetService: int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onDone(java.lang.String)> -> _SINK_
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void onWindowFocus(android.view.View,android.view.View,int,boolean,int)> -> _SINK_
<android.media.MediaRecorder: void setLocation(float,float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])> -> _SINK_
<android.webkit.WebSettings: void setAppCacheMaxSize(long)> -> _SINK_
<com.android.gallery3d.app.SinglePhotoDataAdapter: void setNeedFullImage(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSendBufferSize(int)> -> _SINK_
<android.app.ActivityManagerProxy: void crashApplication(int,int,java.lang.String,java.lang.String)> -> _SINK_
<javax.obex.ClientSession: boolean sendRequest(int,byte[],javax.obex.HeaderSet,javax.obex.PrivateInputStream)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.PrintWriter,java.lang.String[],boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void activityPaused(android.os.IBinder)> -> _SINK_
<com.android.systemui.ExpandHelper: void setGlow(float)> -> _SINK_
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: void <init>(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)> -> _SINK_
<android.widget.TextView: void setAccessibilityCursorPosition(int)> -> _SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: void wipeUser(int)> -> _SINK_
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.camera.ui.ZoomRenderer: void setZoomValue(int)> -> _SINK_
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.gallery3d.app.FilterUtils: void setupMenuItems(com.android.gallery3d.app.GalleryActionBar,com.android.gallery3d.data.Path,boolean)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onEffectRemoved(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)> -> _SINK_
<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onEvent(int,android.os.Bundle)> -> _SINK_
<com.android.internal.util.StateMachine: void setLogRecSize(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double[],int,int)> -> _SINK_
<android.widget.DatePicker: void setMinDate(long)> -> _SINK_
<java.net.Socks4Message: void setIP(byte[])> -> _SINK_
<java.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleStopService(android.os.IBinder)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)> -> _SINK_
<android.app.ActivityManagerProxy: void killBackgroundProcesses(java.lang.String,int)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)> -> _SINK_
<com.android.server.display.LogicalDisplay: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)> -> _SINK_
<android.widget.ListPopupWindow: void setInputMethodMode(int)> -> _SINK_
<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$SoftEntry: void setExpirationTime(long)> -> _SINK_
<android.graphics.Matrix: void setSinCos(float,float,float,float)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.ArrayList collectProcesses(java.io.PrintWriter,int,java.lang.String[])> -> _SINK_
<android.location.IGeocodeProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)> -> _SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<javax.xml.validation.ValidatorHandler: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> -> _SINK_
<android.widget.CalendarView: void setMinDate(long)> -> _SINK_
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean)> -> _SINK_
<java.text.DateFormatSymbols: void setEras(java.lang.String[])> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderDisabled(java.lang.String)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(libcore.icu.LocaleData)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setTransitionDuration(android.content.Context,java.lang.String,java.lang.String,long)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setMetadata(int,android.os.Bundle)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setMethod(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<android.view.GLES20DisplayList: void setLeft(int)> -> _SINK_
<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.hardware.input.IInputDevicesChangedListener$Stub$Proxy: void onInputDevicesChanged(int[])> -> _SINK_
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void setHandleAlpha(float)> -> _SINK_
<android.filterfw.core.NativeFrame: void setFloats(float[])> -> _SINK_
<com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints: void setKeyboardGeometry(int)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setLayoutDirection(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void flushInterfaceDnsCache(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: void setAnimationStyle(int)> -> _SINK_
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)> -> _SINK_
<com.android.gallery3d.ui.AlbumSetSlotRenderer: void setModel(com.android.gallery3d.app.AlbumSetDataLoader)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<java.io.File: boolean setReadable(boolean,boolean)> -> _SINK_
<gov.nist.javax.sip.header.RAck: void setRSeqNumber(int)> -> _SINK_
<org.apache.james.mime4j.decoder.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> -> _SINK_
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: void addView(android.view.View)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: java.lang.String timeZoneToTziString(java.util.TimeZone)> -> _SINK_
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(long)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setEnabled(java.lang.Object,boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)> -> _SINK_
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setNonceCount(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)> -> _SINK_
<com.android.gallery3d.app.PackagesMonitor: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_
<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)> -> _SINK_
<com.android.videoeditor.service.MovieOverlay: android.os.Bundle buildUserAttributes(int,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void sendUrgentData(int)> -> _SINK_
<com.android.launcher2.WeakReferenceThreadLocal: void set(java.lang.Object)> -> _SINK_
<android.widget.Spinner: void setDropDownVerticalOffset(int)> -> _SINK_
<android.webkit.WebSettings: void setSavePassword(boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,boolean,android.content.res.Configuration)> -> _SINK_
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)> -> _SINK_
<android.view.View$10: void setValue(android.view.View,float)> -> _SINK_
<android.view.View$12: void setValue(android.view.View,float)> -> _SINK_
<android.view.View$11: void setValue(android.view.View,float)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelock(int,int,java.lang.String,int)> -> _SINK_
<com.android.server.wm.DimAnimator$Parameters: void printTo(java.lang.String,java.io.PrintWriter)> -> _SINK_
<javax.obex.ClientOperation: void sendHeaders(javax.obex.HeaderSet)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setNumSpeedSteps(int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> -> _SINK_
<gov.nist.core.LexerCore: void addKeyword(java.lang.String,int)> -> _SINK_
<android.widget.CalendarView$WeeksAdapter: void setSelectedDay(java.util.Calendar)> -> _SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.view.View: void setScrollContainer(boolean)> -> _SINK_
<android.filterpacks.ui.SurfaceRenderFilter: void open(android.filterfw.core.FilterContext)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Oid: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.view.View: void setTagInternal(int,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.launcher2.DragController: void startDrag(android.view.View,android.graphics.Bitmap,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect,float)> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void setString(java.lang.String,java.lang.String,int)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)> -> _SINK_
<com.android.deskclock.DeskClock$TabsAdapter: void onPageSelected(int)> -> _SINK_
<com.android.systemui.ExpandHelper$ViewScaler: void setHeight(float)> -> _SINK_
<android.graphics.RectF: void set(android.graphics.Rect)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SINK_
<android.drm.DrmInfoRequest: void put(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addMediaItemVideoUri(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.net.Uri,int,java.lang.String)> -> _SINK_
<com.android.server.WallpaperManagerService: boolean hasNamedWallpaper(java.lang.String)> -> _SINK_
<com.android.browser.SnapshotBar: void setFavicon(android.graphics.Bitmap)> -> _SINK_
<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: void setHour(int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SINK_
<android.app.Activity: void setProgressBarVisibility(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void createDisplayContentLocked(android.view.Display)> -> _SINK_
<com.android.server.BackupManagerService: void prepareOperationTimeout(int,long,com.android.server.BackupManagerService$BackupRestoreTask)> -> _SINK_
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)> -> _SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setTextContent(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: boolean removeSubTask(int,int)> -> _SINK_
<android.preference.PreferenceActivity: void startPreferencePanel(java.lang.String,android.os.Bundle,int,java.lang.CharSequence,android.app.Fragment,int)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])> -> _SINK_
<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)> -> _SINK_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean matchContainer(java.lang.String)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(int,byte)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: boolean processMessage(android.os.Message)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setFocusedApp(android.os.IBinder,boolean)> -> _SINK_
<org.ccil.cowan.tagsoup.Parser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListeningAsUser(int,int)> -> _SINK_
<com.android.server.power.PowerManagerService: void setAttentionLight(boolean,int)> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<com.android.browser.BrowserSettings: void toggleDesktopUseragent(android.webkit.WebView)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: void setCurrentPanel(android.view.View)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDefaults(java.lang.String,int)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.systemui.statusbar.tablet.NotificationPanelTitle: void setPressed(boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICID(java.lang.String)> -> _SINK_
<gov.nist.core.NameValueList: void set(java.lang.String,java.lang.Object)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setFixedLengthStreamingMode(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setQop(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.Accept: void setQValue(float)> -> _SINK_
<com.android.videoeditor.service.ApiService: void cancelExportVideoEditor(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.view.View: void setEnabled(boolean)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> -> _SINK_
<com.google.android.gms.panorama.internal.IPanoramaCallbacks$Stub$Proxy: void onPanoramaInfoLoaded(int,android.os.Bundle,int,android.content.Intent)> -> _SINK_
<java.net.AddressCache: void put(java.lang.String,java.net.InetAddress[])> -> _SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setPostDial(java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountSecureContainer(java.lang.String,java.lang.String,int)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel$PingBackTimerTask: void <init>(gov.nist.javax.sip.stack.UDPMessageChannel,java.lang.String,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> -> _SINK_
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void extendVerificationTimeout(int,int,long)> -> _SINK_
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonContentDescription(int)> -> _SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.server.TextServicesManagerService$TextServicesSettings: void setSpellCheckerEnabled(boolean)> -> _SINK_
<com.android.server.display.DisplayAdapter: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.webkit.CallbackProxy: void onFormResubmission(android.os.Message,android.os.Message)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)> -> _SINK_
<javax.obex.ServerSession: void sendResponse(int,byte[])> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(int,double)> -> _SINK_
<android.graphics.Paint: void setARGB(int,int,int,int)> -> _SINK_
<com.android.browser.addbookmark.FolderSpinner: void setSelection(int)> -> _SINK_
<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<com.android.server.AppWidgetService: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,int)> -> _SINK_
<com.android.camera.PanoProgressBar: void setRightIncreasing(boolean)> -> _SINK_
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<com.android.server.am.PendingIntentRecord: int sendInner(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<com.android.browser.TitleBar: void setProgress(int)> -> _SINK_
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)> -> _SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)> -> _SINK_
<android.content.IClipboard$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeHistory(android.os.Parcel,boolean)> -> _SINK_
<android.view.View: void setHorizontalScrollBarEnabled(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.shaders.ScaledTransparencyShader: void setAlpha(float)> -> _SINK_
<android.view.ViewGroup: void setClipToPadding(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)> -> _SINK_
<android.app.ActivityManagerProxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)> -> _SINK_
<com.android.server.EventLogTags: void writeLockdownVpnError(int)> -> _SINK_
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void removeUser(int)> -> _SINK_
<android.widget.TextView: void setSelected(boolean)> -> _SINK_
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,int,int,java.lang.String,int,android.app.Notification,int[],int)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findFocus(long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> -> _SINK_
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)> -> _SINK_
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<android.view.GLES20RecordingCanvas: void setNextPoolable(java.lang.Object)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setPermanentlyLocked(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: void writeToParcelLocked(android.os.Parcel,long)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)> -> _SINK_
<com.android.launcher2.ShortcutAndWidgetContainer: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_
<com.android.server.pm.UserManagerService: void setUserName(int,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendRequest(javax.sip.message.Request)> -> _SINK_
<android.app.Activity: boolean showDialog(int,android.os.Bundle)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBarView: void setBar(com.android.systemui.statusbar.BaseStatusBar)> -> _SINK_
<gov.nist.javax.sip.address.Authority: void setPort(int)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.SingleColorShader: void setColor(float[])> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void setWakeupTimer(com.android.server.sip.SipWakeupTimer)> -> _SINK_
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> -> _SINK_
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.videoeditor.widgets.HorizontalScrollView: void setOverScrollMode(int)> -> _SINK_
<com.android.videoeditor.OverlayTitleTemplatePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastErrorAndTransitionToInitialState(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioChannels(int)> -> _SINK_
<android.util.IntProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.os.CommonTimeUtils: int transactSetString(int,java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WeakEntry: void setExpirationTime(long)> -> _SINK_
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: void setValue(byte[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<gov.nist.javax.sip.address.Authority: void setPassword(java.lang.String)> -> _SINK_
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)> -> _SINK_
<java.text.CollationElementIterator: void setOffset(int)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)> -> _SINK_
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageUpdateStarted(java.lang.String,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void revokePermission(java.lang.String,java.lang.String)> -> _SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)> -> _SINK_
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> -> _SINK_
<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)> -> _SINK_
<android.webkit.WebViewClassic: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<android.app.Activity: void setFeatureDrawableAlpha(int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setSystemUiVisibility(int,int)> -> _SINK_
<java.io.File: boolean setReadable(boolean)> -> _SINK_
<com.google.common.collect.Maps$AbstractFilteredMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)> -> _SINK_
<android.app.ActivityManagerProxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,boolean)> -> _SINK_
<java.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])> -> _SINK_
<android.widget.OverScroller: void setFriction(float)> -> _SINK_
<android.webkit.CallbackProxy: void onPageStarted(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.os.Parcel: void setDataSize(int)> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub$Proxy: void onWindowTransition(int,int,android.view.WindowInfo)> -> _SINK_
<com.android.internal.net.LegacyVpnInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setPlaybackState(int,int,long)> -> _SINK_
<android.provider.CalendarContract$CalendarAlerts: void scheduleAlarm(android.content.Context,android.app.AlarmManager,long)> -> _SINK_
<android.webkit.WebViewClassic: void setScrollBarStyle(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setValue(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: void setSelection(int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SINK_
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setTarget(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setLockScreenDisabled(boolean)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void plugRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setGenericObjectValue(java.lang.Object)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setLockPattern(byte[],int)> -> _SINK_
<android.view.View: void setScrollX(int)> -> _SINK_
<android.view.View: void setScrollY(int)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<android.location.GpsStatus: void setStatus(android.location.GpsStatus)> -> _SINK_
<com.android.browser.PreloadController: void setupAutoFill(android.os.Message)> -> _SINK_
<android.view.View: void setDrawingCacheQuality(int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)> -> _SINK_
<java.util.jar.Manifest: void write(java.io.OutputStream)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: void setProgress(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)> -> _SINK_
<android.test.InstrumentationTestCase: void sendRepeatedKeys(int[])> -> _SINK_
<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)> -> _SINK_
<android.graphics.Path: void setLastPoint(float,float)> -> _SINK_
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetManager: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,android.os.UserHandle)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void setNightMode(int)> -> _SINK_
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<java.net.URLConnection: void setDefaultUseCaches(boolean)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: void onProcessDied(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,java.lang.String,boolean)> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchCount(java.lang.String)> -> _SINK_
<android.widget.TextView: void setPaddingRelative(int,int,int,int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setSourceRegion(android.filterfw.geometry.Quad)> -> _SINK_
<com.android.gallery3d.ui.ScrollerHelper: void setPosition(int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStarted(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void wakeUp(long)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)> -> _SINK_
<android.widget.Gallery: void setSelectedPositionInt(int)> -> _SINK_
<android.app.ISearchManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.Switch: void setThumbResource(int)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ContextImpl: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<android.webkit.CookieManagerClassic: void setAcceptFileSchemeCookiesImpl(boolean)> -> _SINK_
<com.android.gallery3d.exif.IfdData: void setTag(com.android.gallery3d.exif.ExifTag)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)> -> _SINK_
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.launcher2.BubbleTextView: boolean setFrame(int,int,int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(int)> -> _SINK_
<com.android.server.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextAfterCursor(java.lang.CharSequence,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setPictureFormat(int)> -> _SINK_
<com.android.wallpaper.grass.ScriptC_grass: void bind_Blades(com.android.wallpaper.grass.ScriptField_Blade)> -> _SINK_
<android.support.v4.content.LocalBroadcastManager: void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<com.android.internal.util.FileRotator$1: void write(java.io.OutputStream)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)> -> _SINK_
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: void setScaleListener(android.view.ScaleGestureDetector$SimpleOnScaleGestureListener)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFontSize(int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$Viewport: void setFrameShown(boolean,boolean)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: boolean setTransitionThumbnails(java.lang.String,android.graphics.Bitmap[])> -> _SINK_
<android.app.ApplicationThreadProxy: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)> -> _SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.gallery3d.app.StitchingProgressManager$AddItemCallback: void onStitchingQueued(java.lang.String,android.net.Uri)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)> -> _SINK_
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] decrypt(byte,byte[],int,int)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: void setSize(int)> -> _SINK_
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void displayCompletions(android.view.inputmethod.CompletionInfo[])> -> _SINK_
<android.support.v4.net.TrafficStatsCompat: void setThreadStatsTag(int)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setValue(java.lang.String)> -> _SINK_
<android.content.ContentValues: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setRightHintText(int)> -> _SINK_
<android.view.ViewGroup: void setDescendantFocusability(int)> -> _SINK_
<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$NullEntry: void setExpirationTime(long)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: void setValue(com.android.gallery3d.exif.Rational)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.os.IBinder newUriPermissionOwner(java.lang.String)> -> _SINK_
<com.android.server.location.MockProvider: void setStatus(int,android.os.Bundle,long)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyGesture(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setClearColor(float,float,float)> -> _SINK_
<android.filterfw.core.GLEnvironment: void setSurfaceTimestamp(long)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setHost(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.GLView: void setVisibility(int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,long)> -> _SINK_
<com.android.server.StatusBarManagerService: void setHardKeyboardEnabled(boolean)> -> _SINK_
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.RAck: void setCSeqNumber(int)> -> _SINK_
<org.apache.http.auth.AuthSchemeRegistry: void setItems(java.util.Map)> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionary$1: void setBigram(java.lang.String,java.lang.String,int)> -> _SINK_
<gov.nist.core.DuplicateNameValueList: gov.nist.core.NameValue put(java.lang.String,gov.nist.core.NameValue)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardTextsSet: void loadStringResourcesInternal(android.content.Context,java.lang.String[],int)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsReady(long)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.widget.RemoteViews$ReflectionAction: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])> -> _SINK_
<com.android.server.pm.Settings: boolean setPackageStoppedStateLPw(java.lang.String,boolean,boolean,int,int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void allowUsbDebugging(boolean,java.lang.String)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.userdictionary.UserDictionaryProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setMediaItemDuration(android.content.Context,java.lang.String,java.lang.String,long)> -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setParameters(android.hardware.Camera$Parameters)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardHostView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void update(byte[])> -> _SINK_
<android.app.ApplicationThreadProxy: void dispatchPackageBroadcast(int,java.lang.String[])> -> _SINK_
<android.filterfw.core.SimpleFrame: void setFloats(float[])> -> _SINK_
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: void setUserName(int,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneNumber(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setInputFilter(android.view.IInputFilter)> -> _SINK_
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.MountService: int changeEncryptionPassword(java.lang.String)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnErrorListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<com.android.launcher2.ApplicationInfo: void setActivity(android.content.ComponentName,int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void removeTransition(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: void sendAccessibilityEventForVirtualView(int,int)> -> _SINK_
<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String)> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService setupServiceForAccount(android.content.Context,com.android.emailcommon.provider.Account)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void registerForBroadcastsLocked(com.android.server.AppWidgetServiceImpl$Provider,int[])> -> _SINK_
<com.google.android.apps.lightcycle.math.Quaternion: void set(com.google.android.apps.lightcycle.math.Quaternion)> -> _SINK_
<com.android.browser.view.ScrollerView: void setOrientation(int)> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<com.android.gallery3d.ui.PhotoView: void notifyDataChange(int[],int,int)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: boolean hasNamedWallpaper(java.lang.String)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: void bind(java.net.SocketAddress)> -> _SINK_
<com.android.org.bouncycastle.util.Strings: void toUTF8ByteArray(char[],java.io.OutputStream)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect,boolean)> -> _SINK_
<org.json.JSONArray: java.lang.String toString(int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setTransportParam(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraUtility: void setPictureWidth(android.hardware.Camera$Parameters,int)> -> _SINK_
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTrafficClass(int)> -> _SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationEnd(android.animation.Animator)> -> _SINK_
<android.filterfw.core.FilterFunction: void setInputValue(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void setHostAddress(java.lang.String)> -> _SINK_
<com.android.commands.am.Am$MyActivityController: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.server.power.DisplayPowerController: void dump(java.io.PrintWriter)> -> _SINK_
<android.os.Parcel: void setDataPosition(int)> -> _SINK_
<android.graphics.ColorMatrix: void setScale(float,float,float,float)> -> _SINK_
<android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)> -> _SINK_
<android.app.ResultInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)> -> _SINK_
<android.os.Message: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<com.android.deskclock.worldclock.WorldClockAdapter: void loadCitiesDb(android.content.Context)> -> _SINK_
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.ZoomManager: void setZoomScale(float,boolean)> -> _SINK_
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)> -> _SINK_
<com.android.providers.settings.SettingsHelper: void setLocaleData(byte[],int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListening(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> -> _SINK_
<android.preference.Preference: void setSummary(int)> -> _SINK_
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> -> _SINK_
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: void setSubtitle(java.lang.String)> -> _SINK_
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)> -> _SINK_
<com.android.providers.userdictionary.DictionaryBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<android.webkit.WebViewClassic: boolean setFrame(int,int,int,int)> -> _SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)> -> _SINK_
<com.android.server.AppWidgetService: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<com.android.commands.am.Am$MyActivityController: boolean activityStarting(android.content.Intent,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> -> _SINK_
<java.lang.reflect.Field: void setInt(java.lang.Object,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupDataChanged(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setArtwork(int,android.graphics.Bitmap)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1SetOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: void addComponent(android.view.View,android.view.View)> -> _SINK_
<java.sql.Date: void setSeconds(int)> -> _SINK_
<android.preference.PreferenceActivity: void setListFooter(android.view.View)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.NsdService$NativeCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> -> _SINK_
<android.webkit.WebSettingsClassic: void setMinimumFontSize(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void setSlippery(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -> _SINK_
<com.android.inputmethod.latin.suggestions.SuggestionStripView: int setMoreSuggestionsHeight(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.support.v4.widget.EdgeEffectCompatIcs: void setSize(java.lang.Object,int,int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,byte[])> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<java.util.AbstractList$FullListIterator: void set(java.lang.Object)> -> _SINK_
<com.android.commands.monkey.Monkey$ActivityController: boolean activityResuming(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void startRetransmitTimer(gov.nist.javax.sip.stack.SIPServerTransaction,javax.sip.message.Response)> -> _SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onRmsChanged(float)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperOffsetsComplete(android.os.IBinder)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Shader: void setVertices(java.nio.FloatBuffer)> -> _SINK_
<android.widget.Spinner: void setPopupBackgroundResource(int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderView(android.view.View)> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: void sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)> -> _SINK_
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)> -> _SINK_
<com.android.launcher2.PagedViewCellLayout$LayoutParams: void setup(int,int,int,int,int,int)> -> _SINK_
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void setBigram(java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.ServiceManagerProxy: void setPermissionController(android.os.IPermissionController)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void setCallId(java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)> -> _SINK_
<com.android.server.BackupManagerService: void opComplete(int)> -> _SINK_
<com.google.android.apps.lightcycle.util.Size: void set(com.google.android.apps.lightcycle.util.Size)> -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setAccessibilityTransformation(com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void cancelVibrate(int,android.os.IBinder)> -> _SINK_
<com.android.deskclock.timer.TimerListItem: void setTextBlink(boolean)> -> _SINK_
<com.android.internal.app.IUsageStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setStrictModeVisualIndicatorPreference(java.lang.String)> -> _SINK_
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> -> _SINK_
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void deviceAttached(android.hardware.usb.UsbDevice)> -> _SINK_
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)> -> _SINK_
<android.content.pm.LabeledIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: void onNewValue(int)> -> _SINK_
<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)> -> _SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.PointerTracker$BogusMoveEventDetector: void setKeyboardGeometry(int,int)> -> _SINK_
<java.net.DatagramSocket: void setBroadcast(boolean)> -> _SINK_
<android.widget.TextView: void setPaintFlags(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)> -> _SINK_
<com.android.server.location.PassiveProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: void removeCountryListener(android.location.ICountryListener)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsAltitude(double)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAudioTrackMute(android.content.Context,java.lang.String,java.lang.String,boolean)> -> _SINK_
<libcore.net.http.HttpConnectionPool: void recycle(libcore.net.http.HttpConnection)> -> _SINK_
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)> -> _SINK_
<android.database.BulkCursorProxy: android.os.Bundle respond(android.os.Bundle)> -> _SINK_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)> -> _SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.ClockView$AmPm: void setShowAmPm(boolean)> -> _SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(int,char)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)> -> _SINK_
<com.android.server.AppWidgetService: void setBindAppWidgetPermission(java.lang.String,boolean)> -> _SINK_
<android.renderscript.Script: android.renderscript.Script$FieldID createFieldID(int,android.renderscript.Element)> -> _SINK_
<com.android.commands.am.Am$InstrumentationWatcher: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setOverlayUserAttributes(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.renderscript.Allocation: void setSurfaceTexture(android.graphics.SurfaceTexture)> -> _SINK_
<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> -> _SINK_
<com.android.launcher2.ShortcutAndWidgetContainer: void setChildrenDrawnWithCacheEnabled(boolean)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)> -> _SINK_
<java.util.zip.Deflater: void setInput(byte[])> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: com.android.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean)> -> _SINK_
<com.android.server.am.AppErrorDialog: void <init>(android.content.Context,com.android.server.am.ActivityManagerService,com.android.server.am.AppErrorResult,com.android.server.am.ProcessRecord)> -> _SINK_
<java.lang.StringBuilder: void setLength(int)> -> _SINK_
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void setHidden(boolean)> -> _SINK_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)> -> _SINK_
<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)> -> _SINK_
<com.android.systemui.statusbar.phone.QuickSettingsTileView: void setContent(int,android.view.LayoutInflater)> -> _SINK_
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long calculateInstalledSize(java.lang.String,boolean)> -> _SINK_
<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.media.videoeditor.MediaImageItem: void setGeneratedImageClip(java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceDown(java.lang.String)> -> _SINK_
<com.android.browser.homepages.Template$SimpleEntity: void write(java.io.OutputStream,com.android.browser.homepages.Template$EntityData)> -> _SINK_
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)> -> _SINK_
<android.widget.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.gallery3d.data.DownloadCache: com.android.gallery3d.data.DownloadCache$Entry download(com.android.gallery3d.util.ThreadPool$JobContext,java.net.URL)> -> _SINK_
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)> -> _SINK_
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)> -> _SINK_
<android.widget.NumberPicker: void setValue(int)> -> _SINK_
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)> -> _SINK_
<android.os.CommonTimeConfig: int setMasterElectionPriority(byte)> -> _SINK_
<android.webkit.SslClientCertLookupTable: void Allow(java.lang.String,java.security.PrivateKey,byte[][])> -> _SINK_
<android.widget.TextView: void setTextSize(float)> -> _SINK_
<android.widget.LinearLayout: void setVerticalGravity(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: void ensurePackageDexOpt(java.lang.String)> -> _SINK_
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setURI(boolean)> -> _SINK_
<com.android.commands.bmgr.Bmgr$RestoreObserver: void onUpdate(int,java.lang.String)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void processingInstruction(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)> -> _SINK_
<android.app.ContextImpl: boolean bindService(android.content.Intent,android.content.ServiceConnection,int,int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(int,char)> -> _SINK_
<com.android.server.pm.PreferredIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: void writeToParcelLocked(android.os.Parcel,long)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController$UtilityPanel: void setAspectButton(com.android.gallery3d.filtershow.ui.FramedTextButton,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void removeIcon(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.lang.reflect.Field: void setChar(java.lang.Object,char)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.launcher2.Workspace: void beginDragShared(android.view.View,com.android.launcher2.DragSource)> -> _SINK_
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)> -> _SINK_
<java.util.TreeSet: boolean add(java.lang.Object)> -> _SINK_
<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackage(java.lang.String)> -> _SINK_
<android.widget.AbsListView: void setVisibleRangeHint(int,int)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void commitText(java.lang.CharSequence,int)> -> _SINK_
<com.android.wallpaper.grass.ScriptC_grass: void bind_Verticies(com.android.wallpaper.grass.ScriptField_Vertex)> -> _SINK_
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> -> _SINK_
<android.media.ToneGenerator: boolean startTone(int)> -> _SINK_
<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)> -> _SINK_
<com.android.server.wm.Session: void setWallpaperPosition(android.os.IBinder,float,float,float,float)> -> _SINK_
<com.android.launcher2.AppsCustomizePagedView: void setContentType(com.android.launcher2.AppsCustomizePagedView$ContentType)> -> _SINK_
<android.widget.OverScroller: void startScroll(int,int,int,int)> -> _SINK_
<com.android.camera.ui.TimeIntervalPopup: void setTimeSelectionEnabled(boolean)> -> _SINK_
<android.app.ApplicationPackageManager: boolean addPermission(android.content.pm.PermissionInfo)> -> _SINK_
<android.view.GLES20DisplayList: void setPivotY(float)> -> _SINK_
<android.view.GLES20DisplayList: void setPivotX(float)> -> _SINK_
<com.android.exchange.EasSyncService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: void setBounds(android.graphics.Rect)> -> _SINK_
<android.app.ActivityManagerProxy: void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<android.view.SurfaceView: void setVisibility(int)> -> _SINK_
<android.widget.ScrollBarDrawable: void setAlpha(int)> -> _SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)> -> _SINK_
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setUsingInputMethod(boolean)> -> _SINK_
<com.android.exchange.ExchangeService$2: void setLogging(int)> -> _SINK_
<android.widget.ListPopupWindow: void setSoftInputMode(int)> -> _SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)> -> _SINK_
<java.util.Date: void setMonth(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<gov.nist.core.MultiValueMapImpl: java.util.List put(java.lang.String,java.util.List)> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterProcessObserver(android.app.IProcessObserver)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype(int)> -> _SINK_
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<gov.nist.core.NameValueList: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)> -> _SINK_
<com.android.launcher2.FolderIcon: void setTextVisible(boolean)> -> _SINK_
<android.os.CommonTimeConfig: int setNetworkBinding(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.GLCanvasImpl: void drawMixed(com.android.gallery3d.ui.BasicTexture,int,float,android.graphics.RectF,android.graphics.RectF)> -> _SINK_
<android.media.MediaRouter$Static: void onDisplayRemoved(int)> -> _SINK_
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.app.ActivityManagerProxy: void killApplicationProcess(java.lang.String,int)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)> -> _SINK_
<com.android.commands.bmgr.Bmgr$RestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setVisible(boolean)> -> _SINK_
<com.android.systemui.statusbar.policy.ToggleSlider: void setValue(int)> -> _SINK_
<android.preference.DialogPreference: void setDialogMessage(int)> -> _SINK_
<com.adobe.xmp.impl.CountOutputStream: void write(byte[])> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void writeToParcel(android.os.Parcel)> -> _SINK_
<com.android.exchange.provider.GalResult$GalData: void put(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: void grantUriPermissionUncheckedLocked(int,java.lang.String,android.net.Uri,int,com.android.server.am.UriPermissionOwner)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setHostPort(gov.nist.core.HostPort)> -> _SINK_
<com.android.internal.app.HeavyWeightSwitcherActivity: void setText(int,java.lang.CharSequence)> -> _SINK_
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)> -> _SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateIndex: void index(java.security.cert.TrustAnchor)> -> _SINK_
<java.io.PrintWriter: void println(float)> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> -> _SINK_
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> -> _SINK_
<android.graphics.PointF: void set(android.graphics.PointF)> -> _SINK_
<android.graphics.Bitmap: void setHasAlpha(boolean)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)> -> _SINK_
<android.view.View: void setBackgroundColor(int)> -> _SINK_
<android.app.IActivityManager$WaitResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleDestroyActivity(android.os.IBinder,boolean,int)> -> _SINK_
<android.preference.EditTextPreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.internal.backup.IBackupTransport$Stub$Proxy: int startRestore(long,android.content.pm.PackageInfo[])> -> _SINK_
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> -> _SINK_
<javax.obex.ClientSession: void setConnectionID(long)> -> _SINK_
<com.android.server.sip.SipHelper: void sendInviteAck(javax.sip.ResponseEvent,javax.sip.Dialog)> -> _SINK_
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<com.android.deskclock.Alarm: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.preference.TwoStatePreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.Drawable: void setDither(boolean)> -> _SINK_
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)> -> _SINK_
<com.android.commands.pm.Pm: void run(java.lang.String[])> -> _SINK_
<com.android.camera.ui.PieRenderer: void onDraw(android.graphics.Canvas)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)> -> _SINK_
<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: void setTextureId(int)> -> _SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void updateKeyboardGeometry(int)> -> _SINK_
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeFloat(float)> -> _SINK_
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> -> _SINK_
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> -> _SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.logging.AndroidHandler$1: java.lang.String format(java.util.logging.LogRecord)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<gov.nist.javax.sip.message.HeaderIterator: void set(java.lang.Object)> -> _SINK_
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> -> _SINK_
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)> -> _SINK_
<android.webkit.WebView$PrivateAccess: void setScrollYRaw(int)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: boolean checkInternalFreeStorage(android.net.Uri,boolean,long)> -> _SINK_
<android.view.Surface$CompatibleCanvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<gov.nist.javax.sip.header.Protocol: void setProtocol(java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder)> -> _SINK_
<com.android.internal.util.StateMachine$SmHandler$QuittingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<java.security.Provider$Service: void putAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePreferredActivities(java.lang.String)> -> _SINK_
<org.kxml2.io.KXmlParser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.accessibilityservice.UiTestAutomationBridge: boolean performAccessibilityActionInActiveWindow(long,int,android.os.Bundle)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)> -> _SINK_
<gov.nist.core.DuplicateNameValueList: void set(gov.nist.core.NameValue)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)> -> _SINK_
<com.android.server.AppWidgetService: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<com.google.android.picasasync.AlbumCollectorJson: void addThumbnailUrl(com.google.android.picasasync.JsonReader,android.content.ContentValues,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ErrorInfo: void setErrorMessage(java.lang.String)> -> _SINK_
<android.widget.ImageSwitcher: void setImageResource(int)> -> _SINK_
<java.util.Date: void setDate(int)> -> _SINK_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> -> _SINK_
<android.media.videoeditor.Overlay: void setUserAttribute(java.lang.String,java.lang.String)> -> _SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(byte[],int,int)> -> _SINK_
<java.text.DecimalFormat: void setParseBigDecimal(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)> -> _SINK_
<android.view.View: void setBackgroundResource(int)> -> _SINK_
<com.android.systemui.statusbar.tablet.InputMethodButton: void setIconImage(int)> -> _SINK_
<android.renderscript.Matrix2f: void set(int,int,float)> -> _SINK_
<com.android.gallery3d.data.DataManager: void addSource(com.android.gallery3d.data.MediaSource)> -> _SINK_
<android.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppVisibility(android.os.IBinder,boolean)> -> _SINK_
<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)> -> _SINK_
<com.android.deskclock.TimerSetupView: void setLeftRightEnabled(boolean)> -> _SINK_
<android.widget.TextView: void setTextAppearance(android.content.Context,int)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<java.net.Socket: void setTcpNoDelay(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Finished: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicLong: void lazySet(long)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setTransparentRegion(android.view.IWindow,android.graphics.Region)> -> _SINK_
<android.widget.ProgressBar$RefreshData: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.widget.RelativeLayout: void setVerticalGravity(int)> -> _SINK_
<android.webkit.WebViewClassic: void saveViewState(java.io.OutputStream,android.webkit.ValueCallback)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(float)> -> _SINK_
<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid: void writeToParcelLocked(android.os.Parcel,long)> -> _SINK_
<java.io.File: boolean setExecutable(boolean)> -> _SINK_
<android.renderscript.Matrix4f: void set(int,int,float)> -> _SINK_
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)> -> _SINK_
<java.sql.Date: void setHours(int)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void onUnbindMethod(int)> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendPing(byte[],int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void removeMediaItem(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.AlarmManagerService: boolean lookForPackageLocked(java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)> -> _SINK_
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> -> _SINK_
<android.view.GLES20DisplayList: void setBottom(int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void dump(java.lang.String,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Shader: void setTexCoords(java.nio.FloatBuffer)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream$ImplicitOutputStream: void write(int)> -> _SINK_
<android.renderscript.Matrix3f: void set(int,int,float)> -> _SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)> -> _SINK_
<android.webkit.CallbackProxy: void addMessageToConsole(java.lang.String,int,java.lang.String,int)> -> _SINK_
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setEventDispatching(boolean)> -> _SINK_
<com.android.gallery3d.app.GalleryActionBar: void setDisplayOptions(boolean,boolean)> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)> -> _SINK_
<android.support.v13.app.FragmentCompat$ICSMR1FragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)> -> _SINK_
<com.android.server.wm.DimSurface: void printTo(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)> -> _SINK_
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)> -> _SINK_
<android.webkit.WebSettingsClassic: void setUseDoubleTree(boolean)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setSystemUiVisibility(int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReceiveBufferSize(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<android.media.IRingtonePlayer$Stub$Proxy: boolean isPlaying(android.os.IBinder)> -> _SINK_
<com.android.wallpaper.grass.ScriptField_Blade: void set(com.android.wallpaper.grass.ScriptField_Blade$Item,int,boolean)> -> _SINK_
<com.android.systemui.recent.RecentsPanelView: void setMinSwipeAlpha(float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)> -> _SINK_
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setExtrasClassLoader(java.lang.ClassLoader)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegQuality(int)> -> _SINK_
<android.graphics.drawable.ColorDrawable: void setAlpha(int)> -> _SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: void noteLaunchTime(android.content.ComponentName,int)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)> -> _SINK_
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<android.view.SurfaceView: void setSecure(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setResponse(java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setVisibleToUser(java.lang.Object,boolean)> -> _SINK_
<javax.obex.ObexHelper: byte[] createHeader(javax.obex.HeaderSet,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)> -> _SINK_
<android.telephony.CellInfoGsm: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setLeftTabResources(int,int,int,int)> -> _SINK_
<com.android.providers.calendar.CalendarProvider2: void notifyChange(boolean)> -> _SINK_
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.launcher2.DragView: void setAlpha(float)> -> _SINK_
<android.widget.RemoteViews: void setDrawableParameters(int,boolean,int,int,android.graphics.PorterDuff$Mode,int)> -> _SINK_
<android.view.Window: void setUiOptions(int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[],int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNeedClientAuth(boolean)> -> _SINK_
<com.google.common.collect.TreeMultiset: int setCount(java.lang.Object,int)> -> _SINK_
<com.android.deskclock.SettingsActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> -> _SINK_
<com.android.camera.PanoProgressBar: void setBackgroundColor(int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeBoolean(boolean)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void startKeepAliveProcess(int,android.net.sip.SipProfile,com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback)> -> _SINK_
<android.filterfw.core.GLFrame: void setFloats(float[])> -> _SINK_
<android.webkit.WebViewClassic: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> -> _SINK_
<android.opengl.GLSurfaceView: void setEGLConfigChooser(int,int,int,int,int,int)> -> _SINK_
<android.location.IGpsStatusProvider$Stub$Proxy: void addGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.location.Location: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onNmeaReceived(long,java.lang.String)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onError(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowStateAnimator$SurfaceTrace: void setSize(int,int)> -> _SINK_
<android.widget.ToggleButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ActivityManagerProxy: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setActive(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: void setAlpha(int)> -> _SINK_
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)> -> _SINK_
<java.util.Calendar: void setTime(java.util.Date)> -> _SINK_
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setValue(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)> -> _SINK_
<com.android.camera.ui.PieItem: void setImageResource(android.content.Context,int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setVisibleToUser(boolean)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperOffsets(float,float,float,float,boolean)> -> _SINK_
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<com.android.server.usb.UsbDebuggingManager: void setAdbEnabled(boolean)> -> _SINK_
<com.android.phone.InCallUiState: void setProviderInfo(android.content.Intent)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)> -> _SINK_
<android.view.Window: void setBackgroundDrawableResource(int)> -> _SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int[],int,int)> -> _SINK_
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(android.os.Message)> -> _SINK_
<com.android.deskclock.AlarmTimePickerDialogFragment: com.android.deskclock.AlarmTimePickerDialogFragment newInstance(com.android.deskclock.Alarm)> -> _SINK_
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)> -> _SINK_
<android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl: void setThreadStatsTag(int)> -> _SINK_
<android.widget.DatePicker: void setSpinnersShown(boolean)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<android.webkit.WebView: boolean restorePicture(android.os.Bundle,java.io.File)> -> _SINK_
<android.animation.PropertyValuesHolder: void setIntValues(int[])> -> _SINK_
<android.app.ContextImpl: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setDither(boolean)> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: void setSipCallOption(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void sendKeyguardVisibilityChanged(boolean)> -> _SINK_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkSignatures(java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(int)> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardView: void setGesturePreviewMode(boolean,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setPreviewTexture(android.graphics.SurfaceTexture)> -> _SINK_
<android.widget.SearchView: void setInputType(int)> -> _SINK_
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)> -> _SINK_
<com.android.browser.TitleBar: void updateAutoLogin(com.android.browser.Tab,boolean)> -> _SINK_
<android.mtp.MtpServer: void sendObjectRemoved(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Set: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: void addData(com.android.emailcommon.provider.EmailContent$Message,int)> -> _SINK_
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledProtocols(java.lang.String[])> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<libcore.net.http.HttpConnection: void setRecycled()> -> _SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: void setSentBy(java.lang.String)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeLockdownVpnConnected(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnableSessionCreation(boolean)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)> -> _SINK_
<com.android.camera.ComboPreferences: void setLocalId(android.content.Context,int)> -> _SINK_
<android.view.View: boolean performHapticFeedback(int,int)> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: void setLayoutTransition(android.animation.LayoutTransition)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> -> _SINK_
<com.android.internal.net.VpnConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setWantClientAuth(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.filterfw.core.Filter: void setWaitsOnInputPort(java.lang.String,boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isSecureContainerMounted(java.lang.String)> -> _SINK_
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])> -> _SINK_
<com.android.launcher2.LauncherProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> -> _SINK_
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean performDexOpt(java.lang.String)> -> _SINK_
<com.android.server.am.IntentBindRecord: void dumpInService(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void setFromTag(java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: void set(int,int,double)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<android.app.ReceiverRestrictedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<com.android.browser.BrowserSnapshotPage: void setupGrid(android.view.LayoutInflater)> -> _SINK_
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setLightsOn(boolean)> -> _SINK_
<gov.nist.core.Host: void setAddress(java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPRequest: void setMethod(java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.DelegateViewHelper: void setInitialTouchRegion(android.view.View[])> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TCPMessageChannel)> -> _SINK_
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(int,float)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)> -> _SINK_
<android.view.IInputFilterHost$Stub$Proxy: void sendInputEvent(android.view.InputEvent,int)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: void setBounds(android.graphics.Rect)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setParameters(android.hardware.Camera$Parameters)> -> _SINK_
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> -> _SINK_
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.launcher2.LauncherAppWidgetInfo: void notifyWidgetSizeChanged(com.android.launcher2.Launcher)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setShortcutsVisible(boolean)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setPlaybackState(int,int,long)> -> _SINK_
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)> -> _SINK_
<com.android.server.am.AppBindRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.os.FileObserver$ObserverThread: int startWatching(java.lang.String,int,android.os.FileObserver)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(boolean,java.util.ArrayList,com.android.internal.os.ProcessStats,android.util.SparseArray,java.lang.String[])> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog: void setIconAttribute(int)> -> _SINK_
<com.google.android.apps.lightcycle.opengl.Sprite: void setTexture(com.google.android.apps.lightcycle.opengl.GLTexture)> -> _SINK_
<com.android.inputmethod.latin.Suggest: void setUserDictionary(com.android.inputmethod.latin.UserBinaryDictionary)> -> _SINK_
<com.google.android.picasasync.PicasaSyncHelper$SyncContext: boolean setAccount(java.lang.String)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: void setDefaultUseCaches(boolean)> -> _SINK_
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteUserActivity(int,int)> -> _SINK_
<java.lang.String: java.lang.String substring(int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setIcon(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)> -> _SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(double)> -> _SINK_
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)> -> _SINK_
<android.filterfw.core.StreamPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<android.app.ApplicationThreadProxy: void unstableProviderDied(android.os.IBinder)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: void writeCounterToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Counter)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setMultiplier(int)> -> _SINK_
<com.android.providers.downloads.DownloadHandler: void setCurrentSpeed(long,long)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleStopActivity(android.os.IBinder,boolean,int)> -> _SINK_
<android.text.format.Time: void set(android.text.format.Time)> -> _SINK_
<android.app.ActivityManagerProxy: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowCustomEnabled(boolean)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: void startElement(java.lang.String,org.xml.sax.AttributeList)> -> _SINK_
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupReset(java.lang.String)> -> _SINK_
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setScale(float,float,float,boolean)> -> _SINK_
<android.appwidget.AppWidgetHost: void setUserId(int)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,byte)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.Reader)> -> _SINK_
<com.android.exchange.ExchangeService$1: void sendMessageStatus(long,java.lang.String,int,int)> -> _SINK_
<com.android.server.wm.WindowStateAnimator: void setTransparentRegionHint(android.graphics.Region)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInScreen(android.graphics.Rect)> -> _SINK_
<org.apache.harmony.security.x509.ExtensionValue: void dumpValue(java.lang.StringBuilder)> -> _SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int,int)> -> _SINK_
<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.AppWindowToken)> -> _SINK_
<android.graphics.Region: boolean set(android.graphics.Rect)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.server.AlarmManagerService: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.preference.Preference: boolean persistInt(int)> -> _SINK_
<android.widget.RemoteViews$Action: void setBitmapCache(android.widget.RemoteViews$BitmapCache)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setMaximumFractionDigits(int)> -> _SINK_
<gov.nist.javax.sip.header.CSeq: void setSeqNumber(long)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])> -> _SINK_
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> -> _SINK_
<android.view.IInputFilter$Stub$Proxy: void install(android.view.IInputFilterHost)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setPluginsEnabled(boolean)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,double)> -> _SINK_
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: void setPrettyEncoding(boolean)> -> _SINK_
<java.util.Date: void setYear(int)> -> _SINK_
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> -> _SINK_
<gov.nist.core.NameValueList: void set(gov.nist.core.NameValue)> -> _SINK_
<java.util.Date: void setSeconds(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssertedIdentity: void setValue(java.lang.String)> -> _SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.filterfw.core.OutputPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<org.apache.harmony.security.x509.NameConstraints: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(int,short)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
<com.android.browser.XLargeUi: void setUrlTitle(com.android.browser.Tab)> -> _SINK_
<java.lang.ThreadLocal: void set(java.lang.Object)> -> _SINK_
<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)> -> _SINK_
<android.support.v13.app.FragmentCompatICSMR1: void setUserVisibleHint(android.app.Fragment,boolean)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)> -> _SINK_
<gov.nist.javax.sip.header.SIPIfMatch: void setValue(java.lang.String)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: void setMainDictionaryAvailability(boolean)> -> _SINK_
<com.android.server.StatusBarManagerService: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<com.android.server.am.AppBindRecord: void dumpInIntentBind(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.camera.ui.Switch: void setSwitchTextAppearance(android.content.Context,int)> -> _SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(android.view.View)> -> _SINK_
<java.util.jar.JarFile$JarFileInputStream: int read(byte[],int,int)> -> _SINK_
<com.android.gallery3d.app.PhotoPage: void playVideo(android.app.Activity,android.net.Uri,java.lang.String)> -> _SINK_
<libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)> -> _SINK_
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.inputmethodservice.IInputMethodSessionWrapper: void executeMessage(android.os.Message)> -> _SINK_
<android.animation.Keyframe$IntKeyframe: void setValue(java.lang.Object)> -> _SINK_
<com.android.inputmethod.latin.LocaleUtils: java.util.Locale constructLocaleFromString(java.lang.String)> -> _SINK_
<com.android.gallery3d.exif.OrderedDataOutputStream: void writeRational(com.android.gallery3d.exif.Rational)> -> _SINK_
<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)> -> _SINK_
<com.android.inputmethod.latin.RichInputConnection: void performEditorAction(int)> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextBeforeCursor(java.lang.CharSequence,int)> -> _SINK_
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer tag(int)> -> _SINK_
<com.android.server.wm.ViewServer: boolean access$000(java.net.Socket,java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)> -> _SINK_
<android.widget.ProgressBar: void setProgress(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction sendRinging(javax.sip.RequestEvent,java.lang.String)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)> -> _SINK_
<com.android.launcher2.ShortcutInfo: void setActivity(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitle(int)> -> _SINK_
<android.app.Application: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<com.android.wallpaper.galaxy.ScriptC_galaxy: void bind_Particles(com.android.wallpaper.galaxy.ScriptField_Particle)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void setLong(java.lang.String,long,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> -> _SINK_
<android.support.v4.view.ViewCompat$BaseViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)> -> _SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> -> _SINK_
<java.net.ServerSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)> -> _SINK_
<java.io.File: boolean setWritable(boolean,boolean)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplayDensity(int)> -> _SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<org.ccil.cowan.tagsoup.Schema: void entity(java.lang.String,int)> -> _SINK_
<android.graphics.Matrix: void setRotate(float)> -> _SINK_
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)> -> _SINK_
<com.android.inputmethod.latin.ResizableIntArray: void set(com.android.inputmethod.latin.ResizableIntArray)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOpt(java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledProtocols(int,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> -> _SINK_
<android.service.wallpaper.IWallpaperService$Stub$Proxy: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)> -> _SINK_
<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)> -> _SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
<android.widget.GridLayout$LayoutParams: void setGravity(int)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: void setSpline(com.android.gallery3d.filtershow.ui.Spline,int)> -> _SINK_
<libcore.io.ForwardingOs: void setgid(int)> -> _SINK_
<android.os.IPermissionController$Stub$Proxy: boolean checkPermission(java.lang.String,int,int)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TLSMessageChannel)> -> _SINK_
<android.graphics.Region: boolean set(android.graphics.Region)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<android.os.Parcel: void writeArray(java.lang.Object[])> -> _SINK_
<org.json.JSONArray: org.json.JSONArray put(int,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int setPitch(float)> -> _SINK_
<android.hardware.display.IDisplayManager$Stub$Proxy: void registerCallback(android.hardware.display.IDisplayManagerCallback)> -> _SINK_
<android.os.Bundle: void putIBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setSource(android.view.View,int)> -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations: void updatedAttendee(android.content.ContentValues,long)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setNeedClientAuth(boolean)> -> _SINK_
<com.android.server.BackupManagerService: void handleTimeout(int,java.lang.Object)> -> _SINK_
<com.android.server.WallpaperManagerService: void settingsRestored()> -> _SINK_
<com.android.browser.addbookmark.FolderSpinner: void setSelectionIgnoringSelectionChange(int)> -> _SINK_
<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteNetworkInterfaceType(java.lang.String,int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte[],int,int)> -> _SINK_
<com.android.gallery3d.data.DataManager$NotifyBroker: void registerNotifier(com.android.gallery3d.data.ChangeNotifier)> -> _SINK_
<com.android.commands.bmgr.Bmgr$RestoreObserver: void restoreStarting(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean removeTask(int,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,int)> -> _SINK_
<android.os.Parcel: void writeStringArray(java.lang.String[])> -> _SINK_
<java.net.Socket: void setReceiveBufferSize(int)> -> _SINK_
<com.android.gallery3d.data.DownloadCache$DownloadTask: void onFutureDone(com.android.gallery3d.util.Future)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setMessage(int,boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.camera.drawable.TextDrawable: void setAlpha(int)> -> _SINK_
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingText(java.lang.CharSequence,int)> -> _SINK_
<com.android.musicfx.seekbar.ProgressBar: void setVisibility(int)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskToFront(int,int,android.os.Bundle)> -> _SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> -> _SINK_
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> -> _SINK_
<android.app.backup.BackupHelperDispatcher: void addHelper(java.lang.String,android.app.backup.BackupHelper)> -> _SINK_
<com.google.android.apps.lightcycle.math.Matrix3x3d: void set(com.google.android.apps.lightcycle.math.Matrix3x3d)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setChallenge(gov.nist.javax.sip.header.Challenge)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performContextMenuAction(int)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<android.app.Activity: void setPersistent(boolean)> -> _SINK_
<android.view.TextureView: void setTransform(android.graphics.Matrix)> -> _SINK_
<android.telephony.CellInfo: void writeToParcel(android.os.Parcel,int,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleResumeActivity(android.os.IBinder,boolean)> -> _SINK_
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)> -> _SINK_
<android.webkit.WebView: void setInitialScale(int)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void etag(char[],int,int)> -> _SINK_
<android.webkit.WebSettingsClassic: void setDefaultFixedFontSize(int)> -> _SINK_
<gov.nist.javax.sip.header.Reason: void setCause(int)> -> _SINK_
<android.widget.CalendarView: void setMaxDate(long)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void hideMySoftInput(android.os.IBinder,int)> -> _SINK_
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraPreview$Util: void setPictureWidth(com.google.android.apps.lightcycle.camera.CameraUtility,android.hardware.Camera$Parameters,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setContentDescription(int)> -> _SINK_
<java.util.zip.Adler32: void update(int)> -> _SINK_
<android.widget.TabWidget: void setLeftStripDrawable(int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection,int)> -> _SINK_
<android.os.RemoteCallback: void sendResult(android.os.Bundle)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setIcon(int)> -> _SINK_
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)> -> _SINK_
<android.preference.Preference: boolean persistBoolean(boolean)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: int enableApnType(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<com.android.gallery3d.ui.GLRootView: void setLightsOutMode(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void setPageHoveringOverDeleteDropTarget(int,boolean)> -> _SINK_
<android.webkit.ZoomManager: void restoreZoomState(android.os.Bundle)> -> _SINK_
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void deleteSurroundingText(int,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int finalizeSecureContainer(java.lang.String)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setNegativeSuffix(java.lang.String)> -> _SINK_
<java.net.ServerSocket: void setSoTimeout(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] encrypt(byte,byte[],int,int)> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void set24HoursMode(android.content.Context)> -> _SINK_
<android.app.Activity: void setImmersive(boolean)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache usingDirectory(java.io.File)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)> -> _SINK_
<com.adobe.xmp.options.Options: void setOption(int,boolean)> -> _SINK_
<java.text.DateFormat: void setLenient(boolean)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void attachToken(android.os.IBinder)> -> _SINK_
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> -> _SINK_
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<javax.obex.ServerOperation: void sendHeaders(javax.obex.HeaderSet)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfoCache: void add(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void write(byte[])> -> _SINK_
<android.app.ActivityThread$H: void handleMessage(android.os.Message)> -> _SINK_
<com.google.common.primitives.Ints$IntArrayAsList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void accessoryAttached(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.animation.ObjectAnimator: android.animation.Animator setDuration(long)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneContext(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void performDeferredDestroy(android.view.IWindow)> -> _SINK_
<android.widget.AdapterViewAnimator$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerProxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<com.android.server.am.CompatModePackages: void setFrontActivityAskCompatModeLocked(boolean)> -> _SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)> -> _SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<android.widget.TextView: void setInputExtras(int)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)> -> _SINK_
<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)> -> _SINK_
<com.android.server.am.EventLogTags: void writeAmLowMemory(int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.OrientationEKF: void setHeadingDegrees(double)> -> _SINK_
<com.android.browser.BrowserSettings: void setLastRunPaused(boolean)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Constants: void setProjection(android.renderscript.Matrix4f)> -> _SINK_
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setVisibility(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.shaders.TargetShader: void setAlpha(float)> -> _SINK_
<android.webkit.CookieManager: void setAcceptCookie(boolean)> -> _SINK_
<org.apache.james.mime4j.decoder.DecoderUtil: byte[] decodeBase64(java.lang.String)> -> _SINK_
<java.text.MessageFormat: void setFormat(int,java.text.Format)> -> _SINK_
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.message.SIPMessage: void setHeader(gov.nist.javax.sip.header.SIPHeaderList)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<com.android.phone.sip.SipSharedPreferences: void setProfilesCount(int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addMediaItemImageUri(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.net.Uri,int,long,java.lang.String)> -> _SINK_
<com.android.server.StatusBarManagerService: android.os.IBinder addNotification(com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setUseCompactFormat(boolean)> -> _SINK_
<android.widget.AbsSpinner$RecycleBin: void put(int,android.view.View)> -> _SINK_
<com.android.browser.NavigationBarBase: void setFocusState(boolean)> -> _SINK_
<com.android.browser.ComboViewActivity: void openInNewTab(java.lang.String[])> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openDevice(java.lang.String)> -> _SINK_
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)> -> _SINK_
<libcore.icu.NativeConverter: void setCallbackEncode(long,java.nio.charset.CharsetEncoder)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void sendAccessibilityEvent(int)> -> _SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)> -> _SINK_
<android.hardware.ISerialManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int renameSecureContainer(java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setDither(boolean)> -> _SINK_
<android.os.storage.IObbActionListener$Stub$Proxy: void onObbResult(java.lang.String,int,int)> -> _SINK_
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)> -> _SINK_
<java.util.Random: void setSeed(long)> -> _SINK_
<com.android.server.wm.WindowManagerService: void addAppToken(int,int,android.view.IApplicationToken,int,int,boolean,boolean)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageFlip: void setActionDown(float,float)> -> _SINK_
<java.util.Properties: void store(java.io.Writer,java.lang.String)> -> _SINK_
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int stop(android.os.IBinder)> -> _SINK_
<android.webkit.WebSettings: void setAllowFileAccess(boolean)> -> _SINK_
<com.android.launcher2.LauncherAppWidgetHostView: void updateAppWidget(android.widget.RemoteViews)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)> -> _SINK_
<com.android.systemui.recent.RecentsHorizontalScrollView: void setMinSwipeAlpha(float)> -> _SINK_
<android.filterfw.core.GLFrame: void setViewport(android.graphics.Rect)> -> _SINK_
<android.webkit.WebSettings: void setAllowContentAccess(boolean)> -> _SINK_
<com.android.internal.statusbar.StatusBarNotification: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.NumberPicker: void setEnabled(boolean)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnected(java.lang.String)> -> _SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.provider.Settings$Secure: void setLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,boolean,int)> -> _SINK_
<android.widget.AbsSeekBar: void setMax(int)> -> _SINK_
<android.os.CommonTimeConfig: int setMasterElectionEndpoint(java.net.InetSocketAddress)> -> _SINK_
<java.util.zip.CRC32: void update(byte[],int,int)> -> _SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setMediaItemVolume(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setSurfaceTexture(android.view.HardwareLayer,android.graphics.SurfaceTexture)> -> _SINK_
<android.widget.TabWidget: void setDividerDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.webkit.WebViewDatabaseClassic: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.FinalPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void deleteAppWidgetLocked(com.android.server.AppWidgetServiceImpl$AppWidgetId)> -> _SINK_
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)> -> _SINK_
<com.android.deskclock.RepeatPreference: void setDaysOfWeek(com.android.deskclock.Alarm$DaysOfWeek)> -> _SINK_
<com.google.android.apps.lightcycle.sensor.SensorReader: void setGyroBias(float[])> -> _SINK_
<android.filterfw.core.NativeFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.webkit.WebStorageClassic: void setAppCacheMaximumSize(long)> -> _SINK_
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.ClockView$AmPm: void setIsMorning(boolean)> -> _SINK_
<com.android.internal.util.LocalLog: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<android.widget.Toast: void setText(int)> -> _SINK_
<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.camera.ListPreference: void persistStringValue(java.lang.String)> -> _SINK_
<android.app.ApplicationPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictionary$1: void setUnigram(java.lang.String,java.lang.String,int)> -> _SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String,int)> -> _SINK_
<android.app.DownloadManager: void restartDownload(long[])> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.widget.TextView: void setLinkTextColor(int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)> -> _SINK_
<java.net.DatagramSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.webkit.CookieManagerClassic: void setAcceptCookie(boolean)> -> _SINK_
<com.google.android.gms.common.internal.IGmsCallbacks$Stub$Proxy: void onPostInitComplete(int,android.os.IBinder,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setDrawable(android.content.res.Resources,int)> -> _SINK_
<android.view.View: void setY(float)> -> _SINK_
<android.view.View: void setX(float)> -> _SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aval(char[],int,int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> -> _SINK_
<android.preference.DialogPreference$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.WindowManagerImpl: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String,java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)> -> _SINK_
<com.android.gallery3d.exif.ExifTag: void setValue(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] decrypt(byte,byte[],int,int)> -> _SINK_
<com.android.launcher2.DragView: void setColor(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1Enumerated: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.view.GLES20Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)> -> _SINK_
<android.widget.ListPopupWindow: void setContentWidth(int)> -> _SINK_
<android.webkit.CallbackProxy: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<android.widget.AbsListView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setAllowUserInteraction(boolean)> -> _SINK_
<com.android.inputmethod.latin.LatinImeLogger: void onStartInputView(android.view.inputmethod.EditorInfo)> -> _SINK_
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)> -> _SINK_
<com.android.server.am.ActivityRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.widget.AbsSpinner: void setSelection(int,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
<com.android.deskclock.TimerSetupView: void restoreEntryState(android.os.Bundle,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setHost(gov.nist.core.Host)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivities(android.app.IApplicationThread,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -> _SINK_
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)> -> _SINK_
<android.app.ExpandableListActivity: void setSelectedGroup(int)> -> _SINK_
<com.android.server.power.PowerManagerService$WakeLock: void updateProperties(int,java.lang.String,android.os.WorkSource,int,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAnimationStyle(int)> -> _SINK_
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setBounds(int,int,int,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setExposureCompensation(int)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<android.support.v4.widget.EdgeEffectCompat: void setSize(int,int)> -> _SINK_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> -> _SINK_
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int)> -> _SINK_
<org.apache.harmony.security.x509.DistributionPointName: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<android.renderscript.Script: void setVar(int,double)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.ServiceRoute: void setValue(java.lang.String)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setValue(int,java.lang.String)> -> _SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<com.android.phone.CallCard: void setSecondaryCallClickable(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnableSessionCreation(boolean)> -> _SINK_
<android.webkit.WebViewClassic: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> -> _SINK_
<gov.nist.javax.sip.header.extensions.References: void setValue(java.lang.String)> -> _SINK_
<android.filterfw.core.NativeProgram: void setHostValue(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setSecure(boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setOverlayDuration(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long)> -> _SINK_
<javax.obex.PrivateOutputStream: byte[] readBytes(int)> -> _SINK_
<com.android.browser.ComboViewActivity: void openUrl(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])> -> _SINK_
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: boolean setMediaItemThumbnail(java.lang.String,android.graphics.Bitmap,int,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean viewServerWindowCommand(java.net.Socket,java.lang.String,java.lang.String)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void unplugRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: void setVibrateEnabled(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int,int)> -> _SINK_
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setEventChargingFunctionAddress(java.lang.String)> -> _SINK_
<com.android.gallery3d.settings.GallerySettings: void addAccount(android.app.Activity,boolean)> -> _SINK_
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> -> _SINK_
<android.widget.ZoomButtonsController: void setFocusable(boolean)> -> _SINK_
<android.webkit.WebView: boolean savePicture(android.os.Bundle,java.io.File)> -> _SINK_
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)> -> _SINK_
<gov.nist.core.Host: void setHostAddress(java.lang.String)> -> _SINK_
<android.graphics.Matrix$1: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> -> _SINK_
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<android.widget.ExpandableListView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.launcher2.CellLayout$LayoutParams: void setup(int,int,int,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)> -> _SINK_
<android.widget.EditText: void setSelection(int)> -> _SINK_
<com.android.server.UiModeManagerService: void disableCarMode(int)> -> _SINK_
<org.json.JSONArray: org.json.JSONArray put(int,double)> -> _SINK_
<java.security.Security: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.AbsSeekBar: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: void setExpirationTime(long)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier: boolean on(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsStart(long)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupTransportFailure(java.lang.String)> -> _SINK_
<android.widget.TextView: void setHint(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityServer: void setValue(java.lang.String)> -> _SINK_
<com.android.gallery3d.ui.PhotoView: void notifyImageChange(int)> -> _SINK_
<android.app.ActivityManagerProxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.server.am.UsageStatsService: void noteResumeComponent(android.content.ComponentName)> -> _SINK_
<com.android.server.wm.WindowManagerService: void saveANRStateLocked(com.android.server.wm.AppWindowToken,com.android.server.wm.WindowState)> -> _SINK_
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void copyFrom(com.android.server.pm.PackageSettingBase)> -> _SINK_
<com.android.server.LocationManagerService: boolean sendNiResponse(int,int)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setAudioStreamType(int)> -> _SINK_
<com.android.server.location.PassiveProvider: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> -> _SINK_
<android.os.CommonTimeConfig: int setPanicThreshold(int)> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(char)> -> _SINK_
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFormat(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setOOBInline(boolean)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void showSoftInput(int,android.os.ResultReceiver)> -> _SINK_
<com.android.gallery3d.app.TransitionStore: void putIfNotPresent(java.lang.Object,java.lang.Object)> -> _SINK_
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)> -> _SINK_
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: void setMainView(com.google.android.apps.lightcycle.panorama.LightCycleView)> -> _SINK_
<com.android.gallery3d.exif.OrderedDataOutputStream: void setByteOrder(java.nio.ByteOrder)> -> _SINK_
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performHapticFeedback(android.view.IWindow,int,boolean)> -> _SINK_
<android.view.Surface: void setLayer(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setUniverseTransform(android.os.IBinder,float,float,float,float,float,float,float)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int verifyEncryptionPassword(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<android.support.v13.app.FragmentCompat: void setMenuVisibility(android.app.Fragment,boolean)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)> -> _SINK_
<com.android.soundrecorder.RemainingTimeCalculator: void setBitRate(int)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(android.os.Message,long)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<android.view.View: void setSelected(boolean)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: void setScaleX(float)> -> _SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)> -> _SINK_
<com.android.providers.media.IMtpService$Stub$Proxy: void sendObjectRemoved(int)> -> _SINK_
<com.android.server.BackupManagerService: void fullRestore(android.os.ParcelFileDescriptor)> -> _SINK_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)> -> _SINK_
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setValue(java.lang.String)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] startListeningAsUser(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List,int)> -> _SINK_
<com.android.inputmethod.keyboard.internal.KeyboardCodesSet: void setLanguage(java.lang.String)> -> _SINK_
<android.media.MediaRouter$RouteGroup: void setIconResource(int)> -> _SINK_
<com.android.server.IntentResolverOld: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortServer(int)> -> _SINK_
<android.widget.ImageView: boolean setFrame(int,int,int,int)> -> _SINK_
<com.android.server.pm.Settings: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.mtp.MtpServer: void sendObjectAdded(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void reboot(boolean,java.lang.String,boolean)> -> _SINK_
<com.android.launcher2.WallpaperChooserDialogFragment$WallpaperDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.CookieManagerClassic: void setCookie(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> -> _SINK_
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)> -> _SINK_
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View,android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void setActivityController(android.app.IActivityController)> -> _SINK_
<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: void setBounds(int,int,int,int)> -> _SINK_
<android.view.IRotationWatcher$Stub$Proxy: void onRotationChanged(int)> -> _SINK_
<com.android.internal.app.HeavyWeightSwitcherActivity: void setDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.widget.ActionBarView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setUsername(java.lang.String)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(int)> -> _SINK_
<com.android.server.am.BroadcastFilter: void dumpBrief(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.videoeditor.widgets.TimelineRelativeLayout: void setSelected(boolean)> -> _SINK_
<android.drm.DrmManagerClient: void notify(java.lang.Object,int,int,java.lang.String)> -> _SINK_
<com.android.gallery3d.app.TransitionStore: void put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> -> _SINK_
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)> -> _SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)> -> _SINK_
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopGps(int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setTransportControlFlags(int,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.widget.ListView: void setSelection(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePermission(java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,short)> -> _SINK_
<android.os.RemoteCallback$LocalCallback: void sendResult(android.os.Bundle)> -> _SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderEnabled(java.lang.String)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReuseAddress(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void enableNat(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)> -> _SINK_
<org.json.JSONObject: java.lang.String toString(int)> -> _SINK_
<com.android.gallery3d.ui.SlotView: void setSlotSpec(com.android.gallery3d.ui.SlotView$Spec)> -> _SINK_
<android.webkit.WebChromeClient: void setupAutoFill(android.os.Message)> -> _SINK_
<com.google.common.base.CharMatcher$Or: void setBits(com.google.common.base.CharMatcher$LookupTable)> -> _SINK_
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)> -> _SINK_
<android.widget.Editor$ErrorPopup: void update(int,int,int,int,boolean)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int[])> -> _SINK_
<com.google.common.collect.MapMaker$NullConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsLongitude(double)> -> _SINK_
<android.webkit.WebViewClassic: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<com.android.browser.BaseUi: void setFavicon(com.android.browser.Tab)> -> _SINK_
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.preference.Preference: boolean persistString(java.lang.String)> -> _SINK_
<com.android.deskclock.TimePicker$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.net.DatagramSocket: void setReuseAddress(boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setAlgorithm(java.lang.String)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onVideoEditorLoaded(java.lang.String,com.android.videoeditor.service.VideoEditorProject,java.util.List,java.util.List,java.lang.Exception)> -> _SINK_
<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)> -> _SINK_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int,int,int)> -> _SINK_
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> -> _SINK_
<android.view.View: void setTag(int,java.lang.Object)> -> _SINK_
<com.android.inputmethod.keyboard.KeyboardLayoutSet$Builder: com.android.inputmethod.keyboard.KeyboardLayoutSet$Builder setSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.app.AlertDialog: void setView(android.view.View)> -> _SINK_
<com.android.browser.BaseUi: void setActiveTab(com.android.browser.Tab)> -> _SINK_
<android.webkit.WebView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked(java.lang.StringBuilder,java.util.List,java.lang.String)> -> _SINK_
<com.android.browser.LogTag: void logPageFinishedLoading(java.lang.String,long)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void setComposingRegion(int,int)> -> _SINK_
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowHomeEnabled(boolean)> -> _SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short)> -> _SINK_
<com.android.exchange.EasOutboxService: boolean tryProvision(com.android.exchange.EasSyncService)> -> _SINK_
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)> -> _SINK_
<android.hardware.input.InputManager: void setPointerSpeed(android.content.Context,int)> -> _SINK_
<com.android.server.NsdService$NsdStateMachine$DisabledState: boolean processMessage(android.os.Message)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void put(java.lang.Object)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: boolean targetTaskAffinityMatchesActivity(android.os.IBinder,java.lang.String)> -> _SINK_
<android.support.v4.view.ViewPager: void setCurrentItem(int)> -> _SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<com.android.deskclock.timer.CountingTimerView$SignedTime: void updateWidth(java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: boolean performEditorAction(int)> -> _SINK_
<com.google.android.gms.common.internal.IGmsServiceBroker$Stub$Proxy: void getPanoramaService(com.google.android.gms.common.internal.IGmsCallbacks,int,java.lang.String,android.os.Bundle)> -> _SINK_
<java.net.PlainDatagramSocketImpl: void setTTL(byte)> -> _SINK_
<android.widget.SearchView: void setIconified(boolean)> -> _SINK_
<org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<gov.nist.javax.sip.header.extensions.Join: void setFromTag(java.lang.String)> -> _SINK_
<libcore.icu.NativeConverter: void setCallbackDecode(long,java.nio.charset.CharsetDecoder)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int unmountSecureContainer(java.lang.String,boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReceiveBufferSize(int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<com.android.exchange.ExchangeService$2: void sendMeetingResponse(long,int)> -> _SINK_
<android.animation.ValueAnimator: void setIntValues(int[])> -> _SINK_
<com.android.commands.svc.Svc$1: void run(java.lang.String[])> -> _SINK_
<com.android.gallery3d.ui.SlotView: void setScrollPosition(int)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: void setVisibility(int)> -> _SINK_
<java.text.DecimalFormat: void setCurrency(java.util.Currency)> -> _SINK_
<android.view.View: void setDuplicateParentStateEnabled(boolean)> -> _SINK_
<libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<com.android.videoeditor.service.ApiService: void getMediaItemThumbnails(android.content.Context,java.lang.String,java.lang.String,int,int,long,long,int,int,int[])> -> _SINK_
<com.google.common.collect.ImmutableSortedMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.server.wm.BlackFrame: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.app.ActivityManagerProxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int)> -> _SINK_
<com.android.server.am.BroadcastRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.coremedia.iso.IsoTypeWriter: void writeUInt16BE(java.nio.ByteBuffer,int)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setVisibility(int)> -> _SINK_
<com.android.providers.media.IMtpService$Stub$Proxy: void sendObjectAdded(int)> -> _SINK_
<com.android.server.CountryDetectorService: void notifyReceivers(android.location.Country)> -> _SINK_
<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SINK_
<com.android.gallery3d.ui.PositionController: void setImageSize(int,com.android.gallery3d.ui.PhotoView$Size,android.graphics.Rect)> -> _SINK_
<com.android.videoeditor.TransitionsActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> -> _SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> -> _SINK_
<com.android.i18n.phonenumbers.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<com.android.systemui.SearchPanelView: void setStatusBarView(android.view.View)> -> _SINK_
<com.android.gallery3d.ui.PositionController: void zoomIn(float,float,float)> -> _SINK_
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)> -> _SINK_
<com.android.commands.monkey.MonkeySourceRandom: void setFactors(float[])> -> _SINK_
<java.net.Socket: void setSendBufferSize(int)> -> _SINK_
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void setSwipingEnabled(boolean)> -> _SINK_
<com.android.systemui.screenshot.GlobalScreenshot: void notifyScreenshotError(android.content.Context,android.app.NotificationManager)> -> _SINK_
<org.apache.harmony.xml.ExpatReader: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.webkit.WebViewClassic$WebViewInputConnection: void setupEditorInfo(android.view.inputmethod.EditorInfo)> -> _SINK_
<android.animation.ValueAnimator: void setFloatValues(float[])> -> _SINK_
<android.graphics.Matrix: void setValues(float[])> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyDouble(java.lang.String,java.lang.String,double)> -> _SINK_
<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void sendDisplayEvent(int,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setEnabled(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.PrintWriter,boolean)> -> _SINK_
<com.android.camera.ActivityBase: void setSwipingEnabled(boolean)> -> _SINK_
<com.google.android.apps.lightcycle.panorama.Button: void setPosition(android.graphics.PointF)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void addConnection(int,android.accessibilityservice.IAccessibilityServiceConnection)> -> _SINK_
<android.renderscript.ProgramVertexFixedFunction$Constants: void setTexture(android.renderscript.Matrix4f)> -> _SINK_
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setNode(com.adobe.xmp.impl.XMPNode,java.lang.Object,com.adobe.xmp.options.PropertyOptions,boolean)> -> _SINK_
<android.filterfw.io.GraphReader: void addReference(java.lang.String,java.lang.Object)> -> _SINK_
<android.os.Parcel: void writeLongArray(long[])> -> _SINK_
<com.android.gallery3d.data.DownloadUtils: void dump(com.android.gallery3d.util.ThreadPool$JobContext,java.io.InputStream,java.io.OutputStream)> -> _SINK_
<android.app.ActivityManagerProxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)> -> _SINK_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> -> _SINK_
<android.filterfw.core.VertexFrame: void setFloats(float[])> -> _SINK_
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void data(byte[],int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeDouble(double)> -> _SINK_
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.browser.BookmarksLoader: void setUri(android.net.Uri)> -> _SINK_
<android.media.MediaRecorder: void setCaptureRate(double)> -> _SINK_
<android.widget.RemoteViews: void setViewVisibility(int,int)> -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)> -> _SINK_
<gov.nist.javax.sip.header.ContentType: void setContentSubType(java.lang.String)> -> _SINK_
<libcore.icu.NativeBreakIterator: void setText(java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPackageName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyInteger(java.lang.String,java.lang.String,int)> -> _SINK_
<android.widget.AbsListView: void setSelector(int)> -> _SINK_
<android.preference.TwoStatePreference: void setSummaryOff(int)> -> _SINK_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.PagedView: void setCurrentPage(int)> -> _SINK_
<android.widget.CursorTreeAdapter: void notifyDataSetChanged(boolean)> -> _SINK_
<com.google.android.picasasync.UploadTaskEntry: void setFingerprint(com.android.gallery3d.common.Fingerprint)> -> _SINK_
<com.android.server.pm.GrantedPermissions: void setFlags(int)> -> _SINK_
<com.android.browser.NavigationBarBase: void setCurrentUrlIsBookmark(boolean)> -> _SINK_
<java.text.Collator: void setStrength(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: void setImagePreset(com.android.gallery3d.filtershow.presets.ImagePreset,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.webkit.WebViewClassic: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)> -> _SINK_
<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<android.widget.TextView: void setText(char[],int,int)> -> _SINK_
<android.os.StrictMode: void incrementExpectedActivityCount(java.lang.Class)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setParent(java.lang.Object,android.view.View)> -> _SINK_
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.view.View: void sendAccessibilityEvent(int)> -> _SINK_
<java.util.TreeMap$BoundedMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<com.android.server.am.ActivityStack: void sendActivityResultLocked(int,com.android.server.am.ActivityRecord,java.lang.String,int,int,android.content.Intent)> -> _SINK_
<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int)> -> _SINK_
<com.google.android.gms.common.internal.IGmsServiceBroker$Stub$Proxy: void getPlusService(com.google.android.gms.common.internal.IGmsCallbacks,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,android.os.Bundle)> -> _SINK_
<android.graphics.Bitmap: void setPixel(int,int,int)> -> _SINK_
<android.support.v4.view.ViewCompat$ICSViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)> -> _SINK_
<android.view.animation.AnimationSet: void setStartTime(long)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void interrupt(int)> -> _SINK_
<android.view.View$4: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$3: void setValue(java.lang.Object,float)> -> _SINK_
<android.media.MediaPlayer: boolean setParameter(int,int)> -> _SINK_
<android.view.View$6: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$7: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$5: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$9: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.View$8: void setValue(java.lang.Object,float)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,boolean)> -> _SINK_
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void putSessionData(javax.net.ssl.SSLSession,byte[])> -> _SINK_
<libcore.icu.CollationElementIteratorICU: void setText(java.lang.String)> -> _SINK_
<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<com.android.server.EventLogTags: void writeLockdownVpnConnecting(int)> -> _SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: void setState(int)> -> _SINK_
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: void addErrorToDropBox(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String,java.lang.String,java.io.File,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setMinimumFractionDigits(int)> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> -> _SINK_
<com.android.server.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)> -> _SINK_
<android.preference.PreferenceScreen$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void writeToParcelLocked(android.os.Parcel)> -> _SINK_
<com.android.server.am.ActivityRecord: void startFreezingScreenLocked(com.android.server.am.ProcessRecord,int)> -> _SINK_
<com.android.launcher2.CellLayout: void setTagToCellInfoForPoint(int,int)> -> _SINK_
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openDevice(java.lang.String)> -> _SINK_
<android.view.MotionEvent: void setDownTime(long)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void writeToParcel(android.os.Parcel,long)> -> _SINK_
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> -> _SINK_
<java.util.logging.Logger: void setManager(java.util.logging.LogManager)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelBar: void setPanelHolder(com.android.systemui.statusbar.phone.PanelHolder)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,float)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)> -> _SINK_
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardLinearLayout: void setTopChild(android.view.View)> -> _SINK_
<android.app.ActivityManagerProxy: boolean shutdown(int)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setVisibility(int)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setSpellCheckerEnabled(boolean)> -> _SINK_
<java.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledForPackage(java.lang.String,boolean)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addAudioTrack(android.content.Context,java.lang.String,java.lang.String,android.net.Uri,boolean)> -> _SINK_
<com.android.launcher2.FastBitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<com.android.gallery3d.exif.ExifOutputStream: void write(byte[])> -> _SINK_
<com.google.common.collect.AbstractMultiset: int setCount(java.lang.Object,int)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)> -> _SINK_
<com.android.gallery3d.app.StitchingProgressManager$UpdateProgressCallback: void onProgress(java.lang.String,android.net.Uri,int)> -> _SINK_
<android.widget.TabWidget: void setEnabled(boolean)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendRegister(android.net.sip.SipProfile,java.lang.String,int)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,java.lang.String)> -> _SINK_
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int)> -> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])> -> _SINK_
<android.app.ActivityManagerProxy: boolean finishActivityAffinity(android.os.IBinder)> -> _SINK_
<android.filterfw.core.Filter: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setKeepAlive(boolean)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int)> -> _SINK_
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)> -> _SINK_
<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)> -> _SINK_
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setMediaItemRenderingMode(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.Parcel: void writeDoubleArray(double[])> -> _SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(int,float)> -> _SINK_
<com.android.exchange.utility.CalendarUtilities: java.util.TimeZone tziStringToTimeZone(java.lang.String,int)> -> _SINK_
<com.android.browser.PageDialogsHandler: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setSessionCase(java.lang.String)> -> _SINK_
<gov.nist.core.MultiValueMapImpl: java.util.List put(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.animation.AnimationSet: void setFillBefore(boolean)> -> _SINK_
<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setGrParam(java.lang.String)> -> _SINK_
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setState(int[])> -> _SINK_
<libcore.io.DropBox$DefaultReporter: void addText(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.System: void setIn(java.io.InputStream)> -> _SINK_
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitchComplete(int)> -> _SINK_
<android.os.PerformanceCollector: void beginSnapshot(java.lang.String)> -> _SINK_
<libcore.net.UriCodec: java.lang.String decode(java.lang.String,boolean,java.nio.charset.Charset,boolean)> -> _SINK_
<android.content.IIntentSender$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.security.x509.Extension: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)> -> _SINK_
<android.content.ContextWrapper: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.inputmethod.latin.SettingsValues: void setLastUserHistoryWriteTime(android.content.SharedPreferences,java.lang.String)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean havePassword(int)> -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: android.net.Uri insertContent(android.content.Context,android.net.Uri,java.io.File,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setEnabled(boolean)> -> _SINK_
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void writeShort(int)> -> _SINK_
<java.util.AbstractList$SubAbstractList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<java.util.Vector: void setElementAt(java.lang.Object,int)> -> _SINK_
<com.android.server.power.DisplayPowerState$PhotonicModulator: void dump(java.io.PrintWriter)> -> _SINK_
<gov.nist.javax.sip.address.SipUri: void setUriParm(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void writeEncoded(int,byte[])> -> _SINK_
<android.support.v13.app.FragmentCompat$ICSFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void removeDisplayContentChangeListener(int,android.view.IDisplayContentChangeListener)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void clearMetaKeyStates(int)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)> -> _SINK_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.camera.ui.EffectSettingPopup: void setVisibility(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)> -> _SINK_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: void packageDeleted(java.lang.String,int)> -> _SINK_
<com.android.server.PackageManagerBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)> -> _SINK_
<android.app.IStopUserCallback$Stub$Proxy: void userStopAborted(int)> -> _SINK_
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setWantClientAuth(boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.ConnectivityService$2: void onUidRulesChanged(int,int)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)> -> _SINK_
<android.webkit.WebViewClassic: void setOverScrollMode(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<com.android.systemui.statusbar.CommandQueue: void setNavigationIconHints(int)> -> _SINK_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: void packageMoved(java.lang.String,int)> -> _SINK_
<com.android.server.am.EventLogTags: void writeAmDropProcess(int)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,byte[])> -> _SINK_
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setVariableSpeed(float)> -> _SINK_
<android.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbDevice)> -> _SINK_
<com.android.server.input.InputManagerService: void setInputWindows(com.android.server.input.InputWindowHandle[])> -> _SINK_
<android.widget.AbsListView$RecycleBin: void addScrapView(android.view.View,int)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void toString(java.lang.StringBuilder)> -> _SINK_
<android.widget.Switch: void setChecked(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> -> _SINK_
<android.webkit.JWebCoreJavaBridge: void storeFilePathForContentUri(java.lang.String,java.lang.String)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setSource(android.view.View,int)> -> _SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double)> -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: void setSelectedView(int)> -> _SINK_
<com.android.server.BackupManagerService: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] encrypt(byte,byte[],int,int)> -> _SINK_
<java.util.Formatter$CachedDecimalFormat: libcore.icu.NativeDecimalFormat update(libcore.icu.LocaleData,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setCustomView(int)> -> _SINK_
<android.os.Parcel: void writeValue(java.lang.Object)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)> -> _SINK_
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> -> _SINK_
<com.android.server.ConnectivityService: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.view.View: void setWillNotDraw(boolean)> -> _SINK_
<android.view.View: void setPressed(boolean)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> -> _SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)> -> _SINK_
<android.widget.ZoomControls: void setZoomSpeed(long)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.internal.widget.RotarySelector: void setRightHandleResource(int)> -> _SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<com.google.android.picasastore.FIFEUtil: android.net.Uri setImageUriOptions(java.lang.String,android.net.Uri)> -> _SINK_
<android.content.ContentService: void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<android.view.View: void setSaveFromParentEnabled(boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> -> _SINK_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setInputFilter(android.view.IInputFilter)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setNonce(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setMessage(int,boolean,java.lang.Object[])> -> _SINK_
<android.app.FragmentManagerImpl: void dispatchTrimMemory(int)> -> _SINK_
<android.gesture.GestureStore: void save(java.io.OutputStream)> -> _SINK_
<com.android.server.UiModeManagerService: void enableCarMode(int)> -> _SINK_
<libcore.io.ForwardingOs: void setegid(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallEgressSourceRule(java.lang.String,boolean)> -> _SINK_
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setResponseTags(gov.nist.javax.sip.message.SIPResponse)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void insert(int,android.widget.RemoteViews,long,java.util.ArrayList)> -> _SINK_
<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.camera.ui.TimeIntervalPopup: void setVisibility(int)> -> _SINK_
<android.media.MediaPlayer: int setMetadataFilter(java.util.Set,java.util.Set)> -> _SINK_
<android.preference.Preference: void notifyDependencyChange(boolean)> -> _SINK_
<android.graphics.Matrix: void setScale(float,float)> -> _SINK_
<com.android.server.sip.SipWakeupTimer: void set(int,java.lang.Runnable)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)> -> _SINK_
<android.os.CommonTimeConfig: int setAutoDisable(boolean)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)> -> _SINK_
<android.app.Activity: void setRequestedOrientation(int)> -> _SINK_
<com.android.server.am.CompatModePackages: void setPackageAskCompatModeLocked(java.lang.String,boolean)> -> _SINK_
<android.os.Parcel: void writeIntArray(int[])> -> _SINK_
<android.filterfw.core.SerializedFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.preference.GenericInflater: java.lang.Object createItem(java.lang.String,java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.widget.ScrollView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.app.ITransientNotification)> -> _SINK_
<android.app.ContextImpl: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setParent(android.view.View)> -> _SINK_
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)> -> _SINK_
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> -> _SINK_
<android.preference.PreferenceActivity: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)> -> _SINK_
<com.android.exchange.EasSyncService: void setConnectionParameters(com.android.emailcommon.provider.HostAuth)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void setCurrentPage(int)> -> _SINK_
<android.webkit.WebViewClassic: void saveWebArchive(java.lang.String)> -> _SINK_
<android.webkit.WebView$PrivateAccess: void setScrollXRaw(int)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setValue(java.lang.String)> -> _SINK_
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.gallery3d.filtershow.ui.ImageCurves: void setChannel(int)> -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper$EventInstancesMap: void add(java.lang.String,android.content.ContentValues)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setCurrentClientId(int,android.app.PendingIntent,boolean)> -> _SINK_
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> -> _SINK_
<com.android.server.usb.UsbService: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setCheckable(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int decryptStorage(java.lang.String)> -> _SINK_
<android.view.ViewGroup: void setClipChildren(boolean)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void putValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.media.IMediaScannerService$Stub$Proxy: void scanFile(java.lang.String,java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void addRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void setState(java.lang.Object)> -> _SINK_
<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setQuotedParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: void setPreviewCallback(android.hardware.Camera$PreviewCallback)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSubtitle(int)> -> _SINK_
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setType(int,java.lang.String)> -> _SINK_
<com.android.gallery3d.util.XmpUtilHelper: boolean writeXMPMeta(java.lang.String,java.lang.Object)> -> _SINK_
<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)> -> _SINK_
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)> -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView$IRemoteControlDisplayWeak: void setPlaybackState(int,int,long)> -> _SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress)> -> _SINK_
<android.app.IThumbnailRetriever$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.PopupWindow: void update(int,int,int,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)> -> _SINK_
<java.util.zip.Inflater: void setInput(byte[])> -> _SINK_
<android.widget.RadioGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<android.view.HardwareRenderer: void setupDiskCache(java.io.File)> -> _SINK_
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addEffectColor(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,long,int,int)> -> _SINK_
<android.view.View: boolean performHapticFeedback(int)> -> _SINK_
<com.android.browser.BrowserBookmarksAdapter: void bindView(android.view.View,com.android.browser.BrowserBookmarksAdapterItem)> -> _SINK_
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)> -> _SINK_
<android.os.CommonTimeUtils: int transactSetSockaddr(int,java.net.InetSocketAddress)> -> _SINK_
<com.google.android.apps.lightcycle.shaders.TargetShader: void setContrastFactor(float)> -> _SINK_
<java.util.logging.Handler: void setEncoding(java.lang.String)> -> _SINK_
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAnimDimParams(int,com.android.server.wm.DimAnimator$Parameters)> -> _SINK_
<libcore.icu.CollationElementIteratorICU: void setOffset(int)> -> _SINK_
<android.view.GLES20DisplayList: void setAnimationMatrix(android.graphics.Matrix)> -> _SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)> -> _SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: void installCertificate(java.security.cert.X509Certificate)> -> _SINK_
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: boolean performGlobalAction(int)> -> _SINK_
<android.webkit.OverScrollGlow: boolean drawEdgeGlows(android.graphics.Canvas)> -> _SINK_
<android.media.MediaPlayer: boolean setParameter(int,java.lang.String)> -> _SINK_
<com.android.launcher2.LauncherViewPropertyAnimator: void setTarget(java.lang.Object)> -> _SINK_
<com.android.server.LightsService$Light: void setColor(int)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: boolean injectInputEvent(android.view.InputEvent,int)> -> _SINK_
<org.apache.harmony.security.x509.DistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<org.apache.harmony.security.x509.CertificatePolicies: void dumpValue(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<com.android.internal.view.RotationPolicy: void setRotationLockForAccessibility(android.content.Context,boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void finishPackageInstall(int)> -> _SINK_
<android.filterfw.core.GLFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.GlowPadView: void setEnableTarget(int,boolean)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)> -> _SINK_
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: void set(java.lang.Object)> -> _SINK_
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<com.android.videoeditor.service.ApiService: void releaseVideoEditor(android.content.Context,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.deskclock.worldclock.CitiesActivity: void onCheckedChanged(android.widget.CompoundButton,boolean)> -> _SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)> -> _SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setEncryptionAlgorithm(java.lang.String)> -> _SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(int,double)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)> -> _SINK_
<com.android.server.wm.DragState: void sendDragStartedIfNeededLw(com.android.server.wm.WindowState)> -> _SINK_
<android.animation.ObjectAnimator: void setIntValues(int[])> -> _SINK_
<java.sql.Date: void setMinutes(int)> -> _SINK_
<android.app.ActivityManagerProxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void send(org.apache.harmony.xnet.provider.jsse.Message)> -> _SINK_
<android.widget.PopupWindow: void setTouchModal(boolean)> -> _SINK_
<com.android.server.IntentResolverOld: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<java.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])> -> _SINK_
<android.filterfw.core.VertexFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)> -> _SINK_
<com.android.videoeditor.widgets.ImageViewTouchBase: void setImageBitmapResetBase(android.graphics.Bitmap,boolean)> -> _SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: void setValue(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: boolean onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> -> _SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long[],int,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.os.Bundle sendWindowWallpaperCommandLocked(com.android.server.wm.WindowState,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: void invalidatePointer(com.android.inputmethod.keyboard.PointerTracker,boolean)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.systemui.statusbar.phone.QuickSettings: void setImeWindowStatus(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayHomeAsUpEnabled(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int encryptStorage(java.lang.String)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<com.android.wallpaper.grass.GrassRS: void setOffset(float,float,int,int)> -> _SINK_
<gov.nist.javax.sip.header.ims.Privacy: void setValue(java.lang.String)> -> _SINK_
<com.google.common.collect.AbstractMultimap$WrappedList: boolean addAll(int,java.util.Collection)> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoLinger(boolean,int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void updateEmergencyCallButtonState(android.widget.Button,int,boolean)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SINK_
<android.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)> -> _SINK_
<gov.nist.javax.sip.header.Challenge: void setParameter(gov.nist.core.NameValue)> -> _SINK_
<android.view.View: void setDrawingCacheEnabled(boolean)> -> _SINK_
<android.widget.TextView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addEffectKenBurns(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,long,android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean)> -> _SINK_
<com.android.providers.media.MtpService$3: void sendObjectAdded(int)> -> _SINK_
<android.widget.CalendarView: void setEnabled(boolean)> -> _SINK_
<android.widget.GridLayout: void setColumnCount(int)> -> _SINK_
<com.android.inputmethod.latin.LatinImeLogger: void onAddSuggestedWord(java.lang.String,java.lang.String)> -> _SINK_
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.systemui.statusbar.policy.ToggleSlider: void setChecked(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnableSessionCreation(boolean)> -> _SINK_
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int)> -> _SINK_
<android.widget.AbsListView$RecycleBin: void setCacheColorHint(int)> -> _SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setIsdnSubAddress(java.lang.String)> -> _SINK_
<com.android.server.display.DisplayDevice: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInParent(android.graphics.Rect)> -> _SINK_
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setPowerButtonInstantlyLocks(boolean)> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<com.android.systemui.statusbar.NotificationData: boolean setUserExpanded(android.view.View,boolean)> -> _SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setBarBackgroundResource(int)> -> _SINK_
<com.android.gallery3d.ui.PreparePageFadeoutTexture: void prepareFadeOutTexture(com.android.gallery3d.app.AbstractGalleryActivity,com.android.gallery3d.ui.GLView)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> -> _SINK_
<android.widget.RemoteViews: void setDisplayedChild(int,int)> -> _SINK_
<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setPositivePrefix(java.lang.String)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setTemporaryScreenBrightnessSettingOverride(int)> -> _SINK_
<android.os.Parcel: void writeByte(byte)> -> _SINK_
<com.android.server.am.EventLogTags: void writeBootProgressEnableScreen(long)> -> _SINK_
<android.webkit.WebSettings: void setUserAgent(int)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void write(int)> -> _SINK_
<com.android.gallery3d.app.TrimControllerOverlay: void setTimes(int,int,int,int)> -> _SINK_
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> -> _SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_
<com.android.camera.ui.RotateLayout: void setOrientation(int,boolean)> -> _SINK_
<android.filterfw.core.Filter: void setWaitsOnOutputPort(java.lang.String,boolean)> -> _SINK_
<android.media.effect.FilterGraphEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)> -> _SINK_
<com.android.server.usb.UsbDebuggingManager: void access$700(com.android.server.usb.UsbDebuggingManager,java.lang.String)> -> _SINK_
<com.android.browser.homepages.Template: void write(java.io.OutputStream)> -> _SINK_
<com.android.camera.ui.TwoStateImageView: void setEnabled(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnableSessionCreation(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)> -> _SINK_
<com.android.wallpaper.RenderScriptScene: void setOffset(float,float,int,int)> -> _SINK_
<com.android.server.wm.Session: void setUniverseTransform(android.os.IBinder,float,float,float,float,float,float,float)> -> _SINK_
<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallEnabled(boolean)> -> _SINK_
<android.telephony.CellInfoLte: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: void setRemoteViewsOnClickHandler(android.widget.RemoteViews$OnClickHandler)> -> _SINK_
<android.widget.TabHost: void sendAccessibilityEvent(int)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setExtractedText(android.view.inputmethod.ExtractedText,int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)> -> _SINK_
<gov.nist.javax.sip.address.Authority: void setHost(gov.nist.core.Host)> -> _SINK_
<com.android.org.bouncycastle.asn1.ASN1OutputStream: void writeEncoded(int,int,byte[])> -> _SINK_
<android.webkit.WebStorageClassic: void setQuotaForOrigin(java.lang.String,long)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int changeEncryptionPassword(java.lang.String)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void addOverlay(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,long,long)> -> _SINK_
<com.android.server.am.ProcessRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ActivityIntentInfo)> -> _SINK_
<gov.nist.javax.sip.header.ims.PUserDatabase: void setValue(java.lang.String)> -> _SINK_
<com.android.server.pm.Settings: void createNewUserLILPw(com.android.server.pm.Installer,int,java.io.File)> -> _SINK_
<android.app.Activity: void setContentView(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleSleeping(android.os.IBinder,boolean)> -> _SINK_
<android.support.v4.net.TrafficStatsCompatIcs: void setThreadStatsTag(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAppWidgetId(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)> -> _SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(int,long)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onMediaItemDurationSet(java.lang.String,java.lang.String,long,java.lang.Exception)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)> -> _SINK_
<android.security.IKeyChainAliasCallback$Stub$Proxy: void alias(java.lang.String)> -> _SINK_
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setSelection(int,int)> -> _SINK_
<com.android.videoeditor.service.ApiService: void setAudioTrackLoop(android.content.Context,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.server.wm.WindowStateAnimator$SurfaceTrace: void setWindowCrop(android.graphics.Rect)> -> _SINK_
<com.android.internal.widget.LockSettingsService: void setLockPattern(byte[],int)> -> _SINK_
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)> -> _SINK_
<com.android.internal.widget.LockPatternView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean killPids(int[],java.lang.String,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallEgressDestRule(java.lang.String,int,boolean)> -> _SINK_
<android.os.Debug: void setFieldsOn(java.lang.Class)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<com.android.launcher2.AppsCustomizeTabHost: void setContentTypeImmediate(com.android.launcher2.AppsCustomizePagedView$ContentType)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,java.lang.Object)> -> _SINK_
<android.webkit.ZoomManager: void setHardwareAccelerated()> -> _SINK_
<android.filterfw.core.StopWatchMap: void start(java.lang.String)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setDefaultAssertionStatus(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> -> _SINK_
<com.android.providers.settings.SettingsBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNextNonce(java.lang.String)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,float)> -> _SINK_
<com.android.browser.BrowserSettings: void setHomePage(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionView(int)> -> _SINK_
<com.android.server.BackupManagerService: void logBackupComplete(java.lang.String)> -> _SINK_
<android.view.GLES20Layer: void setLayerPaint(android.graphics.Paint)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setRadioScanningTimeout(long)> -> _SINK_
<android.test.InstrumentationTestCase: android.app.Activity launchActivityWithIntent(java.lang.String,java.lang.Class,android.content.Intent)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceQuota(java.lang.String,long)> -> _SINK_
<com.android.server.am.PendingIntentRecord: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)> -> _SINK_
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseClientMode(boolean)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)> -> _SINK_
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)> -> _SINK_
<java.io.File: boolean setWritable(boolean)> -> _SINK_
<android.os.BatteryStats$HistoryItem: void setTo(android.os.BatteryStats$HistoryItem)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoOutput(boolean)> -> _SINK_
<android.media.IMediaScannerService$Stub$Proxy: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService$StateFilter: boolean accept(java.io.File,java.lang.String)> -> _SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float)> -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneType(java.lang.String)> -> _SINK_
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethodLocked(java.lang.String,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> -> _SINK_
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: void <init>(com.android.server.accessibility.AccessibilityManagerService,int,android.content.ComponentName,android.accessibilityservice.AccessibilityServiceInfo,boolean)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<com.android.exchange.EasSyncService: void setHeaders(org.apache.http.client.methods.HttpRequestBase,boolean)> -> _SINK_
<com.android.systemui.statusbar.phone.PanelView: void setExpandedHeight(float)> -> _SINK_
<android.appwidget.AppWidgetHost: void startListeningAsUser(int)> -> _SINK_
<android.view.View: void setFocusable(boolean)> -> _SINK_
<com.android.server.NsdService: void setEnabled(boolean)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)> -> _SINK_
<java.net.Socket: void setOOBInline(boolean)> -> _SINK_
<android.view.MotionEvent: void setLocation(float,float)> -> _SINK_
<com.android.server.pm.UserManagerService: void makeInitialized(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setCheckable(boolean)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: void setAlpha(int)> -> _SINK_
<com.android.server.EventLogTags: void writeConfigInstallFailed(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub$Proxy: void onRotationChanged(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,int)> -> _SINK_
<javax.obex.ServerOperation: boolean sendReply(int)> -> _SINK_
<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setTabBackgroundResource(int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompatJellyBean: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<com.android.soundrecorder.SoundRecorder: void onCreate(android.os.Bundle)> -> _SINK_
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageUpdateFinished(java.lang.String,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setUseClientMode(boolean)> -> _SINK_
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl: void setSource(java.lang.Object,android.view.View,int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> -> _SINK_
<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInParent(java.lang.Object,android.graphics.Rect)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)> -> _SINK_
<com.android.server.pm.Settings: void setInstallStatus(java.lang.String,int)> -> _SINK_
<android.graphics.Matrix$1: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> -> _SINK_
<android.os.ResultReceiver$MyResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> -> _SINK_
<com.android.server.am.ServiceRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void applyTheme(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<com.android.deskclock.widget.multiwaveview.GlowPadView: void setEnableTarget(int,boolean)> -> _SINK_
<com.android.browser.BrowserBookmarksPage: void onLoadFinished(android.content.Loader,android.database.Cursor)> -> _SINK_
<com.android.internal.location.ILocationProvider$Stub$Proxy: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.systemui.statusbar.CommandQueue: void setHardKeyboardStatus(boolean,boolean)> -> _SINK_
<android.webkit.WebViewClassic: void setMockGeolocationPermission(boolean)> -> _SINK_
<java.io.File: boolean setLastModified(long)> -> _SINK_
<dalvik.system.VMRuntime: long setMinimumHeapSize(long)> -> _SINK_
<android.app.DatePickerDialog: void updateDate(int,int,int)> -> _SINK_
<android.location.Address: void setExtras(android.os.Bundle)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,int)> -> _SINK_
<com.android.deskclock.timer.TimerView: void setTime(int,int,int,int,int)> -> _SINK_
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> -> _SINK_
<android.filterfw.core.GLFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<com.android.server.LightsService$Light: void setBrightness(int,int)> -> _SINK_
<android.webkit.FindActionModeCallback: void setText(java.lang.String)> -> _SINK_
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<com.android.videoeditor.service.ApiService: void loadVideoEditor(android.content.Context,java.lang.String)> -> _SINK_
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)> -> _SINK_
<android.webkit.WebView: void setNetworkAvailable(boolean)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setCNonce(java.lang.String)> -> _SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SINK_
<com.android.providers.calendar.MetaData: void writeLocked(java.lang.String,long,long)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDefaultUseCaches(boolean)> -> _SINK_
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)> -> _SINK_
<com.android.server.am.EventLogTags: void writeAmSwitchUser(int)> -> _SINK_
<com.android.phone.MobileNetworkSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsSystemScanStart(long)> -> _SINK_
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<com.android.camera.ui.InLineSettingSwitch: void setEnabled(boolean)> -> _SINK_
<android.text.MeasuredText: void setPos(int)> -> _SINK_
<android.webkit.WebViewClassic: void setNetworkType(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.RelativeLayout: void setHorizontalGravity(int)> -> _SINK_
<android.app.Instrumentation: void setInTouchMode(boolean)> -> _SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)> -> _SINK_
<android.widget.DateTimeView: void setTime(long)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setBlendFunc(int,int)> -> _SINK_
<com.android.videoeditor.widgets.OverlayView: void setSelected(boolean)> -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsCache: void putSuggestionsToCache(java.lang.String,java.lang.String,java.lang.String[],int)> -> _SINK_
<com.android.server.accessibility.AccessibilityManagerService$Service: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.widget.MediaController: void setEnabled(boolean)> -> _SINK_
<android.app.Activity: void setContentView(android.view.View)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: void setActionMove(float,float)> -> _SINK_
<com.android.providers.downloads.RealSystemFacade: void sendBroadcast(android.content.Intent)> -> _SINK_
<java.util.zip.ZipEntry: void setTime(long)> -> _SINK_
<android.app.LocalActivityManager: void dispatchDestroy(boolean)> -> _SINK_
<com.android.server.wm.BlackFrame$BlackSurface: void setMatrix(android.graphics.Matrix)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> -> _SINK_
<android.os.PerformanceCollector: android.os.Bundle stopTiming(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.webkit.WebSettings: void setNavDump(boolean)> -> _SINK_
<android.accessibilityservice.UiTestAutomationBridge: boolean performAccessibilityAction(int,long,int,android.os.Bundle)> -> _SINK_
<android.app.ListFragment: void setListShown(boolean)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setLockPassword(byte[],int)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void setAlpha(int)> -> _SINK_
<com.android.deskclock.Utils: android.view.View setClockStyle(android.content.Context,android.view.View,android.view.View,java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)> -> _SINK_
<com.android.server.pm.UserManagerService: boolean removeUser(int)> -> _SINK_
<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)> -> _SINK_
<libcore.icu.RuleBasedCollatorICU: void setStrength(int)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setVibrateEnabled(boolean)> -> _SINK_
<com.android.gallery3d.filtershow.PanelController: void addPanel(android.view.View,android.view.View,int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int playSilence(android.os.IBinder,long,int,android.os.Bundle)> -> _SINK_
<android.filterfw.core.NativeFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setVisibleToUser(java.lang.Object,boolean)> -> _SINK_
<android.view.GLES20DisplayList: void setCameraDistance(float)> -> _SINK_
<android.app.ApplicationThreadProxy: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle)> -> _SINK_
<java.util.zip.Deflater: void setDictionary(byte[],int,int)> -> _SINK_
<com.android.gallery3d.exif.CountedDataInputStream: void setByteOrder(java.nio.ByteOrder)> -> _SINK_
<com.android.gallery3d.app.CommonControllerOverlay: void setTimes(int,int,int,int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePackageFromPreferred(java.lang.String)> -> _SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setSelectedText(java.lang.CharSequence,int)> -> _SINK_
<android.widget.RemoteViews$BitmapCache: void writeBitmapsToParcel(android.os.Parcel,int)> -> _SINK_
<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasType(boolean)> -> _SINK_
<com.android.server.input.PersistentDataStore: boolean setCurrentKeyboardLayout(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneState(int)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessage(int)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setArtwork(int,android.graphics.Bitmap)> -> _SINK_
<android.view.GLES20DisplayList: void setRight(int)> -> _SINK_
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)> -> _SINK_
<android.preference.Preference: boolean persistFloat(float)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setFloats(float[])> -> _SINK_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setStale(boolean)> -> _SINK_
<android.media.MediaRouter$UserRouteInfo: void setVolumeCallback(android.media.MediaRouter$VolumeCallback)> -> _SINK_
<android.hardware.input.IInputManager$Stub$Proxy: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)> -> _SINK_
<android.location.IGpsStatusProvider$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.os.BatteryStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String[],java.util.List)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: java.lang.String requestPrivateKey(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void onInformationRequested(int,int,int,int)> -> _SINK_
<android.webkit.MockGeolocation: void setPermission(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(int)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageShow: void setOriginalText(java.lang.String)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)> -> _SINK_
<com.android.inputmethod.latin.makedict.BinaryDictInputOutput: void writeDictionaryBinary(java.io.OutputStream,com.android.inputmethod.latin.makedict.FusionDictionary,com.android.inputmethod.latin.makedict.FormatSpec$FormatOptions)> -> _SINK_
<com.android.gallery3d.filtershow.imageshow.ImageFlip: void setActionMove(float,float)> -> _SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: void setData(java.lang.String)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,long)> -> _SINK_
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)> -> _SINK_
<android.webkit.BrowserFrame: void addJavascriptInterface(java.lang.Object,java.lang.String,boolean)> -> _SINK_
<com.android.wallpaper.galaxy.ScriptField_VpConsts: void set(com.android.wallpaper.galaxy.ScriptField_VpConsts$Item,int,boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.view.GLES20DisplayList: void setLeftTop(int,int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setInTouchMode(boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setOptionEnabled(int)> -> _SINK_
<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setColors(int[])> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.AlarmManager: void setTimeZone(java.lang.String)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<com.android.systemui.statusbar.AnimatedImageView: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.launcher2.LauncherModel: void addItemToDatabase(android.content.Context,com.android.launcher2.ItemInfo,long,int,int,int,boolean)> -> _SINK_
<com.android.server.wm.StrictModeFlash: void setVisibility(boolean)> -> _SINK_
<java.util.zip.Inflater: void setDictionary(byte[],int,int)> -> _SINK_
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void writeFallbackAppWidgetId(int)> -> _SINK_
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)> -> _SINK_
<com.android.exchange.EasOutboxService: void sendMessage(android.content.Context,long,com.android.emailcommon.provider.EmailContent$Message)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setEnableTarget(int,boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setShortcut(boolean,char)> -> _SINK_
<com.android.browser.homepages.Template: void write(java.io.OutputStream,com.android.browser.homepages.Template$EntityData)> -> _SINK_
<com.android.phone.DTMFTwelveKeyDialer: void setDialpadContext(java.lang.String)> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(android.animation.Animator)> -> _SINK_
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)> -> _SINK_
<com.android.internal.view.RotationPolicy: void setRotationLock(android.content.Context,boolean)> -> _SINK_
<android.view.View$4: void setValue(android.view.View,float)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<android.view.View$3: void setValue(android.view.View,float)> -> _SINK_
<android.view.View$6: void setValue(android.view.View,float)> -> _SINK_
<android.view.View$5: void setValue(android.view.View,float)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void startOpeningPanel(com.android.systemui.statusbar.phone.PanelView)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastDisabled(int)> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)> -> _SINK_
<android.database.BulkCursorNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.View$8: void setValue(android.view.View,float)> -> _SINK_
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)> -> _SINK_
<android.view.View$7: void setValue(android.view.View,float)> -> _SINK_
<android.view.View$9: void setValue(android.view.View,float)> -> _SINK_
<com.android.exchange.utility.SimpleIcsWriter: void writeTag(java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,android.filterfw.core.VertexFrame,int,int,int,int,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceThrottle(java.lang.String,int,int)> -> _SINK_
<org.ccil.cowan.tagsoup.Element: void setAttribute(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.systemui.statusbar.CommandQueue: void setSystemUiVisibility(int,int)> -> _SINK_
<android.webkit.WebSettings: void setUseDoubleTree(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressSystemRun(long)> -> _SINK_
<org.apache.harmony.security.asn1.BitString: void setBit(int,boolean)> -> _SINK_
<org.apache.harmony.security.asn1.ASN1BitString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> -> _SINK_
<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)> -> _SINK_
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> -> _SINK_
<gov.nist.javax.sip.DialogFilter: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> -> _SINK_
<android.preference.TwoStatePreference: void setSummaryOn(int)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)> -> _SINK_
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: void readEntries(java.io.ObjectInputStream)> -> _SINK_
<com.android.deskclock.LabelDialogFragment: com.android.deskclock.LabelDialogFragment newInstance(com.android.deskclock.Alarm,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> -> _SINK_
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCipherSuites(int,java.lang.String[])> -> _SINK_
<android.view.View: void setFitsSystemWindows(boolean)> -> _SINK_
<android.widget.TableLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String,com.android.server.WallpaperManagerService$WallpaperData)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<com.android.browser.NavigationBarPhone: void setDisplayTitle(java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)> -> _SINK_
<android.content.IIntentSender$Stub$Proxy: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)> -> _SINK_
<android.graphics.Canvas: void setViewport(int,int)> -> _SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onBufferReceived(byte[])> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl: boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle)> -> _SINK_
<org.kxml2.io.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.Switch: void setTrackResource(int)> -> _SINK_
<libcore.net.url.JarURLConnectionImpl: void setUseCaches(boolean)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void set(int,long,android.app.PendingIntent)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setLeftHintText(int)> -> _SINK_
<com.android.browser.widget.BookmarkThumbnailWidgetService: void changeFolder(android.content.Context,android.content.Intent)> -> _SINK_
<libcore.icu.NativeDecimalFormat: void setPositiveSuffix(java.lang.String)> -> _SINK_
<java.text.CollationElementIterator: void setText(java.lang.String)> -> _SINK_
<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)> -> _SINK_
<android.gesture.GestureLibrary: void setOrientationStyle(int)> -> _SINK_
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int,int)> -> _SINK_
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(int,long)> -> _SINK_
<gov.nist.core.ParserCore: void dbg_enter(java.lang.String)> -> _SINK_
<com.android.commands.am.Am$MyActivityController: int appEarlyNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.videoeditor.VideoEditorBaseActivity$ServiceListener: void onMediaItemBoundariesSet(java.lang.String,java.lang.String,long,long,java.lang.Exception)> -> _SINK_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)> -> _SINK_
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayOrdered(boolean)> -> _SINK_
<com.android.gallery3d.data.MediaDetails: void addDetail(int,java.lang.Object)> -> _SINK_
<com.android.providers.media.MediaScannerService$1: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)> -> _SINK_
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: void setHue(float)> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void sendUpdateIntentLocked(com.android.server.AppWidgetServiceImpl$Provider,int[])> -> _SINK_
<org.apache.james.mime4j.field.ContentTypeField$Parser: org.apache.james.mime4j.field.Field parse(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> -> _SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(double)> -> _SINK_
<java.text.DateFormatSymbols: void setWeekdays(java.lang.String[])> -> _SINK_
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)> -> _SINK_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> -> _SINK_
<com.android.browser.NavigationBarBase: void setIncognitoMode(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceAlert(java.lang.String,long)> -> _SINK_
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerEnabled(boolean)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)> -> _SINK_
<com.android.server.NotificationManagerService$NotificationRecord: void dump(java.io.PrintWriter,java.lang.String,android.content.Context)> -> _SINK_
<android.view.IDisplayContentChangeListener$Stub$Proxy: void onRectangleOnScreenRequested(int,android.graphics.Rect,boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)> -> _SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)> -> _SINK_
<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)> -> _SINK_
<android.app.ActivityManagerProxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void verifyPendingInstall(int,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SINK_
<com.android.camera.ComboPreferences$MyEditor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)> -> _SINK_
<android.media.IRingtonePlayer$Stub$Proxy: void stop(android.os.IBinder)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> -> _SINK_
<com.google.common.collect.MapMakerInternalMap$StrongEntry: void setExpirationTime(long)> -> _SINK_
<com.adobe.xmp.impl.XMPDateTimeImpl: void setYear(int)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchGenericMotionEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)> -> _SINK_
<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)> -> _SINK_
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)> -> _SINK_
<android.widget.TextView: void setEnabled(boolean)> -> _SINK_
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.storage.IMountShutdownObserver$Stub$Proxy: void onShutDownComplete(int)> -> _SINK_
<android.webkit.WebSettings: void setMinimumFontSize(int)> -> _SINK_
<android.graphics.Matrix: void setSinCos(float,float)> -> _SINK_
<android.app.IStopUserCallback$Stub$Proxy: void userStopped(int)> -> _SINK_
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManager(long)> -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setSystemUiVisibility(int,int)> -> _SINK_
<com.android.providers.media.MtpService$3: void sendObjectRemoved(int)> -> _SINK_
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)> -> _SINK_
<com.android.email.provider.EmailProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onError(int)> -> _SINK_
<com.android.email.provider.EmailProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setUserRotationMode(int,int)> -> _SINK_
<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setOmitPacketWrapper(boolean)> -> _SINK_
<android.app.PendingIntent: void send(int)> -> _SINK_
<android.appwidget.AppWidgetHostView: void updateAppWidgetOptions(android.os.Bundle)> -> _SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.AppWidgetServiceImpl: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)> -> _SINK_
<android.view.GLES20Canvas: void restoreToCount(int)> -> _SINK_
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<com.android.vcard.VCardProperty: void setValues(java.lang.String[])> -> _SINK_
<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.inputmethod.latin.LocaleUtils: java.util.HashMap localeAndTimeStrToHashMap(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setSupportZoom(boolean)> -> _SINK_
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)> -> _SINK_
<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.launcher2.ItemInfo: void updateValuesWithCoordinates(android.content.ContentValues,int,int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> -> _SINK_
<android.text.format.DateUtils: java.lang.String writeDateTime(java.util.Calendar,boolean)> -> _SINK_
<android.content.pm.PackageParser$Component: void setPackageName(java.lang.String)> -> _SINK_
<com.android.server.input.InputManagerService: void setInputDispatchMode(boolean,boolean)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.widget.AbsListView: boolean setFrame(int,int,int,int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)> -> _SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNonceCount(int)> -> _SINK_
<com.google.android.picasasync.PicasaSyncManager: void updateTasks(long)> -> _SINK_
<com.android.server.am.ActiveServices: void setServiceForegroundLocked(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> -> _SINK_
<com.android.deskclock.timer.TimerReceiver: void showExpiredAlarmNotification(android.content.Context,com.android.deskclock.timer.TimerObj)> -> _SINK_
<com.google.android.picasastore.ImageProxyUtil: java.lang.String setImageUrlSize(int,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowStateAnimator: void setSurfaceBoundariesLocked(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(int)> -> _SINK_
<android.renderscript.Script: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)> -> _SINK_
<android.widget.RemoteViews: void setEmptyView(int,int)> -> _SINK_
<android.content.pm.PackageParser$Service: void setPackageName(java.lang.String)> -> _SINK_
<gov.nist.javax.sip.header.SIPDateHeader: void setDate(java.util.Calendar)> -> _SINK_
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: boolean performAction(int,int,android.os.Bundle)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleased(int)> -> _SINK_
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean addPermissionLocked(android.content.pm.PermissionInfo,boolean)> -> _SINK_
<java.lang.StringBuffer: void setCharAt(int,char)> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
<android.app.IActivityManager$ContentProviderHolder: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(java.lang.String[])> -> _SINK_
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)> -> _SINK_
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> -> _SINK_
<android.widget.AbsListView$FlingRunnable: void startScroll(int,int,boolean)> -> _SINK_
<android.filterfw.core.Frame: void setObjectValue(java.lang.Object)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)> -> _SINK_
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)> -> _SINK_
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.widget.LinearLayout: void setWeightSum(float)> -> _SINK_
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> -> _SINK_
<com.android.camera.ui.PopupManager: void notifyShowPopup(android.view.View)> -> _SINK_
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<java.util.Vector: java.lang.Object set(int,java.lang.Object)> -> _SINK_
<com.android.deskclock.DeskClock$TabsAdapter: void notifySelectedPage(int)> -> _SINK_
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppToken(int,android.os.IBinder)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)> -> _SINK_
<javax.sip.SipFactory: javax.sip.SipStack createSipStack(java.util.Properties)> -> _SINK_
<com.android.launcher2.CellLayout: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_