<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)>
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)>
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)>
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()>
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)>
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()>
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)>
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()>
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)>
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()>
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()>
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()>
<com.android.email.MessageListContext: long getSearchedMailbox()>
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()>
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)>
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()>
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()>
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)>
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()>
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()>
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()>
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)>
<com.android.email.activity.MessageListFragment: long getMailboxId()>
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()>
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()>
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()>
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)>
<com.android.email.MessageListContext: long getMailboxId()>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()>
<com.android.emailcommon.internet.MimeHeader: void setHeader(java.lang.String,java.lang.String)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)>
<com.android.email.service.EmailServiceUtils$NullEmailService: void setLogging(int)>
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<com.android.email.mail.transport.EOLConvertingOutputStream: void write(int)>
<com.android.email.NotificationController: void showPasswordExpiredNotification(long)>
<com.android.email.Controller$LegacyListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>
<com.android.email.activity.MessageViewFragment: com.android.email.activity.MessageViewFragment newInstance(long)>
<com.android.email.RefreshManager: boolean refreshMailboxList(long)>
<com.android.email.provider.ContentCache$CounterMap: void add(java.lang.Object)>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)>
<com.android.email.Controller: boolean isMessagingController(long)>
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment newInstance(android.content.Context,com.android.emailcommon.provider.Account,java.lang.Integer)>
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)>
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.app.Activity,int,int)>
<com.android.email.RefreshManager$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>
<com.android.email.Controller$LegacyListener: void sendPendingMessagesStarted(long,long)>
<com.android.email.activity.setup.AccountSettings: void onEditQuickResponses(com.android.emailcommon.provider.Account)>
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.emailcommon.provider.Account)>
<com.android.email.RefreshManager$ControllerResult: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)>
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,long,boolean)>
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginFailed(long)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean deleteFolder(long,java.lang.String)>
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)>
<com.android.email.activity.MailboxListItem: void setDropTargetBackground(boolean,long)>
<com.android.email.mail.store.ImapConnection: java.lang.String sendComplexCommand(java.util.List,boolean)>
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment newInstance(java.lang.String)>
<com.android.email.Controller$LegacyListener: void listFoldersFailed(long,java.lang.String)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)>
<com.android.emailcommon.provider.EmailContent$Message: android.net.Uri save(android.content.Context)>
<com.android.email.activity.setup.AccountSettings: android.content.Intent createAccountSettingsIntent(android.content.Context,long,java.lang.String)>
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginSucceeded(long)>
<com.android.email.activity.MessageListItem: void setTimestamp(long)>
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(android.content.Context,long,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean renameFolder(long,java.lang.String,java.lang.String)>
<com.android.email.activity.MessageListFragment: void setLayout(com.android.email.activity.ThreePaneLayout)>
<com.android.email.activity.setup.MailboxSettings: void start(android.app.Activity,long)>
<com.android.email.activity.UIControllerTwoPane: void openInternal(com.android.email.MessageListContext,long)>
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: com.android.email.activity.setup.AccountSettings$LoginWarningDialog newInstance(java.lang.String)>
<com.android.email.activity.EmailActivity$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>
<com.android.email.MessagingController$8: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)>
<com.android.email.MessagingController$9: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)>
<com.android.email.activity.MessageCompose: boolean actionCompose(android.content.Context,java.lang.String,long)>
<com.android.email.Preferences: void setEnableStrictMode(boolean)>
<com.android.email.Preferences: void setLastUsedAccountId(long)>
<com.android.email.MessagingController: void listFolders(long,com.android.email.MessagingListener)>
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)>
<com.android.email.activity.ActivityHelper: boolean openUrlInMessage(android.app.Activity,java.lang.String,long)>
<com.android.email.service.EmailBroadcastProcessorService: void processDevicePolicyMessage(android.content.Context,int)>
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)>
<com.android.email.Preferences: void setTextZoom(int)>
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMeetingResponse(long,int)>
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginFailed(long)>
<com.android.email.activity.setup.MailboxSettings: void setupLookbackPreferenceOptions(android.content.Context,android.preference.ListPreference,com.android.emailcommon.provider.Account)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setCallback(com.android.emailcommon.service.IEmailServiceCallback)>
<com.android.email.activity.MessageCompose: void setFocusShifter(int,int)>
<com.android.emailcommon.service.EmailServiceProxy: void sendMeetingResponse(long,int)>
<com.android.emailcommon.service.EmailServiceProxy: void setLogging(int)>
<com.android.emailcommon.service.EmailServiceProxy: void sendMail(long)>
<com.android.email.service.PolicyService$1: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.activity.DeleteMessageConfirmationDialog: com.android.email.activity.DeleteMessageConfirmationDialog newInstance(int,android.app.Fragment)>
<com.android.email.Preferences: void setAutoAdvanceDirection(int)>
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)>
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)>
<com.android.email.activity.setup.AccountSetupActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.email.activity.MessageListFragment: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.email.view.CertificateSelector$SavedState: void writeToParcel(android.os.Parcel,int)>
<com.android.email.Email: boolean setServicesEnabledSync(android.content.Context)>
<com.android.email.mail.store.ImapFolder: void fetchInternal(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<com.android.email.mail.store.imap.ImapList: boolean is(int,java.lang.String,boolean)>
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)>
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int,int)>
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadMessageStatus(long,int,int)>
<com.android.email.Controller$LegacyListener: void sendPendingMessagesCompleted(long)>
<com.android.email.MessagingListener: void sendPendingMessagesStarted(long,long)>
<com.android.emailcommon.provider.Account: void refresh(android.content.Context)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean createFolder(long,java.lang.String)>
<com.android.email.activity.MessageViewFragment: void onMessageShown(long,com.android.emailcommon.provider.Mailbox)>
<com.android.email.activity.ThreePaneLayout: void setMessageListWidthAnim(int)>
<com.android.email.Preferences: void setEnableExchangeLogging(boolean)>
<com.android.emailcommon.internet.MimeBodyPart: void setHeader(java.lang.String,java.lang.String)>
<com.android.email.activity.InsertQuickResponseDialog: com.android.email.activity.InsertQuickResponseDialog newInstance(android.app.Fragment,com.android.emailcommon.provider.Account)>
<com.android.email.activity.MessageViewFragmentBase: void onCreate(android.os.Bundle)>
<com.android.email.GroupMessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(java.lang.String)>
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlagInternal(com.android.emailcommon.mail.Flag,boolean)>
<com.android.email.service.EmailBroadcastProcessorService: void processBroadcastIntent(android.content.Context,android.content.Intent)>
<com.android.email.activity.Welcome: void startActivity(android.content.Intent)>
<com.android.email.mail.store.ImapFolder: void copyMessages(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Folder,com.android.emailcommon.mail.Folder$MessageUpdateCallbacks)>
<com.android.email.LegacyConversions: void saveAttachmentBody(android.content.Context,com.android.emailcommon.mail.Part,com.android.emailcommon.provider.EmailContent$Attachment,long)>
<com.android.emailcommon.mail.PackedString$Builder: void put(java.lang.String,java.lang.String)>
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<com.android.emailcommon.internet.Rfc822Output: void writeTo(android.content.Context,long,java.io.OutputStream,boolean,boolean)>
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.activity.MoveMessageToDialog: com.android.email.activity.MoveMessageToDialog newInstance(long[],android.app.Fragment)>
<com.android.email.GroupMessagingListener: void addListener(com.android.email.MessagingListener)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)>
<com.android.emailcommon.mail.Message: boolean isMimeType(java.lang.String)>
<com.android.email.MessagingListener: void sendPendingMessagesCompleted(long)>
<com.android.email.activity.UIControllerBase: void onSearchSubmit(java.lang.String)>
<com.android.email.Preferences: void setEnableDebugLogging(boolean)>
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)>
<com.android.email.NotificationController: void setupSoundAndVibration(android.app.Notification$Builder,com.android.emailcommon.provider.Account)>
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionDevicePasswordExpirationIntent(android.content.Context,long,boolean)>
<com.android.email.activity.MailboxListItem: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.android.email.activity.setup.AccountSettingsFragment: android.os.Bundle buildArguments(long,java.lang.String)>
<com.android.email.ControllerResultUiThreadWrapper: void setRegistered(boolean)>
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(java.lang.String,boolean)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)>
<com.android.email.activity.setup.DuplicateAccountDialogFragment: com.android.email.activity.setup.DuplicateAccountDialogFragment newInstance(java.lang.String)>
<com.android.email.LegacyConversions: int inferMailboxTypeFromName(android.content.Context,java.lang.String)>
<com.android.email.Preferences: void setSenderAsTrusted(java.lang.String)>
<com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment: com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment newInstanceForHeader(int)>
<com.android.emailcommon.provider.Mailbox: void writeToParcel(android.os.Parcel,int)>
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)>
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginSucceeded(long)>
<com.android.email.mail.store.Pop3Store$Pop3Message: void setSize(int)>
<com.android.email.Preferences: void setEnableExchangeFileLogging(boolean)>
<com.android.email.activity.setup.AccountSetupExchangeFragment: boolean setHostAuthFromAutodiscover(com.android.emailcommon.provider.HostAuth)>
<com.android.email.Controller: void sendMeetingResponse(long,int)>
<com.android.email.Preferences: void setForceOneMinuteRefresh(boolean)>
<com.android.email.mail.store.ImapStore$ImapMessage: void setSize(int)>
<com.android.email.provider.EmailProvider: void restoreIfNeeded(android.content.Context,android.database.sqlite.SQLiteDatabase)>
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(long,boolean)>
<com.android.email.activity.MessageListItemCoordinates: com.android.email.activity.MessageListItemCoordinates forWidth(android.content.Context,int,boolean)>
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)>
<com.android.email.activity.setup.AccountSettings$AccountServerSettingsFragmentCallback: void onProceedNext(int,com.android.email.activity.setup.AccountServerBaseFragment)>
<com.android.email.MessageListContext: void writeToParcel(android.os.Parcel,int)>
<com.android.email.activity.ThreePaneLayout$SavedState: void writeToParcel(android.os.Parcel,int)>
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlag(com.android.emailcommon.mail.Flag,boolean)>
<com.android.email.Controller: void setMessageFavoriteSync(long,boolean)>
<com.android.email.ControllerResultUiThreadWrapper: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>
<com.android.email.activity.UIControllerOnePane: boolean onUrlInMessageClicked(java.lang.String)>
<com.android.email.activity.MessageListFragment: com.android.email.activity.MessageListFragment newInstance(com.android.email.MessageListContext)>
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountHoldFlag(long,boolean)>
<com.android.email.activity.MessagesAdapter: void toggleSelected(com.android.email.activity.MessageListItem)>
<com.android.emailcommon.provider.Account: void writeToParcel(android.os.Parcel,int)>
<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)>
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int)>
<com.android.emailcommon.provider.Policy: void setAttachmentFlagsForNewPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy)>
<com.android.email.MessagingController: void sendPendingMessages(com.android.emailcommon.provider.Account,long,com.android.email.MessagingListener)>
<com.android.email.activity.setup.AccountSettings: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMail(long)>
<com.android.email.Preferences: void setOneTimeInitializationProgress(int)>
<com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.service.EmailServiceUtils: void startService(android.content.Context,java.lang.String)>
<com.android.email.activity.AttachmentInfoDialog: com.android.email.activity.AttachmentInfoDialog newInstance(android.content.Context,int)>
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionUpdateSecurityIntent(android.content.Context,long,boolean)>
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment newInstance(com.android.emailcommon.provider.Account,android.app.Fragment)>
<com.android.email.MessagingController: void processPendingActions(long)>
<com.android.emailcommon.mail.Address: void setAddress(java.lang.String)>
<com.android.email.mail.store.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>
<com.android.email.GroupMessagingListener: void sendPendingMessagesCompleted(long)>
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.email.RefreshManager$ControllerResult: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)>
<com.android.email.activity.UIControllerOnePane: void onSaveInstanceState(android.os.Bundle)>
<com.android.email.Preferences: void setHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account,boolean)>
<com.android.email.Controller: void sendPendingMessages(long)>
<com.android.email.activity.MessageListFragment: void onActivityCreated(android.os.Bundle)>
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageFavorite(long,boolean)>
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.NotificationController: void showPasswordExpiringNotification(long)>
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)>
<com.android.email.service.MailService: void actionSendPendingMail(android.content.Context,long)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)>
<com.android.email.activity.MessageViewFragment: com.android.emailcommon.provider.EmailContent$Message openMessageSync(android.app.Activity)>
<com.android.email.activity.EmailActivity: android.content.Intent createSearchIntent(android.app.Activity,long,long,java.lang.String)>
<com.android.email.activity.MailboxFragmentAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<com.android.email.service.PolicyService$1: void setAccountHoldFlag(long,boolean)>
<com.android.email.Preferences: void setInhibitGraphicsAcceleration(boolean)>
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)>
<com.android.email.VendorPolicyLoader: com.android.email.activity.setup.AccountSettingsUtils$Provider findProviderForDomain(java.lang.String)>
<com.android.email.Controller: void loadAttachment(long,long,long)>
<com.android.email.RecipientAdapter: void setAccount(android.accounts.Account)>
<com.android.email.mail.store.ImapFolder: void save(android.content.Context)>
<com.android.email.Controller: void updateMailbox(long,long,boolean)>
<com.android.email.MessagingController: void sendPendingMessagesSynchronous(com.android.emailcommon.provider.Account,long)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)>
<com.android.email.SecurityPolicy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>
<com.android.email.activity.setup.EditQuickResponseDialog: com.android.email.activity.setup.EditQuickResponseDialog newInstance(com.android.emailcommon.provider.QuickResponse,long)>
<com.android.email.Controller$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)>
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.email.SecurityPolicy: void policiesRequired(long)>
<com.android.emailcommon.internet.MimeMessage: void setHeader(java.lang.String,java.lang.String)>
<com.android.email.mail.transport.MailTransport: void setSoTimeout(int)>
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)>
<com.android.email.activity.UIControllerTwoPane: boolean onUrlInMessageClicked(java.lang.String)>
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)>
<com.android.email.GroupMessagingListener: void sendPendingMessagesStarted(long,long)>
<com.android.emailcommon.provider.EmailContent: int update(android.content.Context,android.content.ContentValues)>
<com.android.email.mail.store.ImapFolder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setLogging(int)>
<com.android.email.Email: void enableStrictMode(boolean)>
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog newInstance(android.content.Context,com.android.email.activity.setup.AccountCheckSettingsFragment,com.android.emailcommon.mail.MessagingException)>
<com.android.email.RefreshManager: boolean sendPendingMessages(long)>
<com.android.email.MessagingController$4: void messageRetrieved(com.android.emailcommon.mail.Message)>
<com.android.email.activity.MessageCompose: void setMessageContentSelection(java.lang.String)>
<com.android.email.service.EmailBroadcastProcessorService: void setImapDeletePolicy(android.content.Context)>
<com.android.email.activity.MessageListFragment$1: void setField(long,boolean)>
<com.android.email.activity.MessageListFragment$2: void setField(long,boolean)>
<com.android.email.Controller: void setMessageReadSync(long,boolean)>
<com.android.email.activity.MailboxListFragment: com.android.email.activity.MailboxListFragment newInstance(long,long,boolean)>
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageRead(long,boolean)>
<com.android.email.service.AttachmentDownloadService: void addServiceIntentForTest(long,android.content.Intent)>
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog newInstance(com.android.email.activity.setup.AccountCheckSettingsFragment,java.lang.String)>
<com.android.email.Controller$ServiceCallback: void syncMailboxListStatus(long,int,int)>
<com.android.email.MessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMail(long)>
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)>
<com.android.email.mail.store.Pop3Store$Pop3Message: void setFlag(com.android.emailcommon.mail.Flag,boolean)>
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)>
<com.android.email.mail.store.Pop3Store$Pop3Folder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)>
<com.android.email.MessagingController: void copyOneMessageToProvider(com.android.emailcommon.mail.Message,com.android.emailcommon.provider.EmailContent$Message,int,android.content.Context)>
<com.android.email.NotificationController: void showDownloadForwardFailedNotification(com.android.emailcommon.provider.EmailContent$Attachment)>
<com.android.email.activity.MailboxListFragment: void onCreate(android.os.Bundle)>
<com.android.email.activity.MessageCompose: void setIntent(android.content.Intent)>
<com.android.email.Controller: void setMessageAnsweredOrForwarded(long,int)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadMore(long)>
<com.android.email.NotificationController: void showLoginFailedNotification(long)>