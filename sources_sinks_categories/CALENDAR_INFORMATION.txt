<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)>
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)>
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()>
<com.android.calendar.Utils: long getTardis()>
<java.util.Calendar: int getActualMinimum(int)>
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)>
<android.widget.CalendarView: int getDateTextAppearance()>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)>
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])>
<com.android.calendar.Event: java.lang.String getTitleAndLocation()>
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)>
<com.android.calendar.EventInfoFragment: long getStartMillis()>
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)>
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()>
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)>
<java.util.Calendar: java.util.Calendar getInstance()>
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)>
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)>
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)>
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)>
<java.util.GregorianCalendar: int getLeastMaximum(int)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()>
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)>
<android.widget.CalendarView: int getWeekDayTextAppearance()>
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)>
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.AsyncQueryService: int getNextToken()>
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)>
<com.android.calendarcommon2.Duration: long getMillis()>
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)>
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)>
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()>
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()>
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)>
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)>
<com.android.calendar.DayFragment: long getSupportedEventTypes()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)>
<com.android.calendar.DayOfMonthDrawable: int getOpacity()>
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)>
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()>
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)>
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)>
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)>
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<com.android.calendar.SearchActivity: long getSupportedEventTypes()>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()>
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)>
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)>
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()>
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)>
<com.android.calendar.CalendarController: long getEventId()>
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)>
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>
<java.util.Calendar: int getActualMaximum(int)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)>
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)>
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)>
<java.util.Calendar: java.lang.String toString()>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)>
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()>
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()>
<com.android.calendar.CalendarController: long getDateFlags()>
<java.util.Calendar: int getMinimalDaysInFirstWeek()>
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)>
<android.widget.CalendarView: int getFocusedMonthDateColor()>
<com.android.calendar.DayView: long getSelectedTimeInMillis()>
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)>
<com.android.calendar.Event: long getEndMillis()>
<android.widget.CalendarView: long getMaxDate()>
<com.android.calendar.CalendarController: int getPreviousViewType()>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)>
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.DayView: int getFirstVisibleHour()>
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)>
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()>
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.calendar.Event: int getColumn()>
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()>
<com.android.calendar.Event: int getMaxColumns()>
<android.widget.CalendarView: int getFirstDayOfWeek()>
<com.android.calendar.CalendarController: long getTime()>
<com.android.calendar.Utils: int getDisplayColorFromColor(int)>
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)>
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()>
<java.util.GregorianCalendar: int getGreatestMinimum(int)>
<com.android.calendar.EventInfoFragment: long getEventId()>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()>
<android.widget.CalendarView: long getDate()>
<android.widget.CalendarView$WeeksAdapter: int getCount()>
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()>
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<com.android.calendar.EventInfoFragment: long getEndMillis()>
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()>
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()>
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)>
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()>
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()>
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)>
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)>
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)>
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CalendarView: int getWeekNumberColor()>
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)>
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)>
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()>
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)>
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)>
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)>
<java.util.Calendar: long getTimeInMillis()>
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()>
<java.util.Calendar: java.util.Date getTime()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()>
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)>
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()>
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)>
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()>
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)>
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)>
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])>
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)>
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>
<java.util.GregorianCalendar: int getMaximum(int)>
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)>
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<java.util.GregorianCalendar: int getActualMinimum(int)>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)>
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()>
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()>
<com.android.calendar.CalendarController$EventInfo: int getResponse()>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)>
<com.android.calendar.Event: long getStartMillis()>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>
<com.android.calendar.DayView: int getEventsAlpha()>
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)>
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<java.util.Calendar: java.lang.Object clone()>
<com.android.calendar.CalendarController: int getViewType()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)>
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()>
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<java.util.Calendar: int getFirstDayOfWeek()>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.EditResponseHelper: int getWhichEvents()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()>
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)>
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()>
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()>
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)>
<android.widget.CalendarView: long getMinDate()>
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)>
<java.util.GregorianCalendar: int getActualMaximum(int)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: long getItemId(int)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)>
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()>
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)>
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()>
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()>
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)>
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)>
<java.util.Calendar: int get(int)>
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)>
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)>
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)>
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)>
<android.widget.CalendarView: int getShownWeekCount()>
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)>
<java.util.GregorianCalendar: int getMinimum(int)>
<com.android.calendar.month.SimpleWeekView: int getLastMonth()>
<android.widget.CalendarView: boolean getShowWeekNumber()>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Attendees: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$CalendarAlerts: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$CalendarAlerts: android.net.Uri CONTENT_URI_BY_INSTANCE,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Calendars: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$EventDays: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Events: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Events: android.net.Uri DELETED_CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$EventsEntity: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$ExtendedProperties: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Instances: android.net.Uri CONTENT_BY_DAY_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Instances: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$Reminders: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar$SyncState: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Calendar: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.calendar.EventInfoActivity: android.net.Uri CONTACT_DATA_WITH_PRESENCE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.calendar.CalendarProvider2: android.net.Uri SCHEDULE_ALARM_REMOVE_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.calendar.CalendarProvider2: android.net.Uri SCHEDULE_ALARM_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.calendar.month.MonthWeekEventsView: void setWeekParams(java.util.HashMap,java.lang.String)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)>
<com.android.calendar.CalendarEventModel: void addAttendees(java.lang.String,com.android.common.Rfc822Validator)>
<com.android.calendar.CalendarEventModel: void addAttendee(com.android.calendar.CalendarEventModel$Attendee)>
<com.android.calendar.EventGeometry: void setHourHeight(float)>
<com.android.calendar.Utils: android.content.Intent createEmailAttendeesIntent(android.content.res.Resources,java.lang.String,java.lang.String,java.util.List,java.util.List,java.lang.String)>
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)>
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,java.lang.String)>
<com.android.calendar.month.MonthByWeekAdapter: void setSelectedDay(android.text.format.Time)>
<com.android.calendar.DayView: void setMoreAllDayEventsTextAlpha(int)>
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)>
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.calendar.EventLoader: void loadEventsInBackground(int,java.util.ArrayList,int,java.lang.Runnable,java.lang.Runnable)>
<com.android.calendar.Utils: void setTodayIcon(android.graphics.drawable.LayerDrawable,android.content.Context,java.lang.String)>
<com.android.calendar.agenda.AgendaByDayAdapter: void setAsFirstDayAfterYesterday(int)>
<com.android.calendar.ExpandableTextView: void setText(java.lang.String)>
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<com.android.calendar.DayOfMonthDrawable: void setAlpha(int)>
<com.android.calendar.CalendarController: void setTime(long)>
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String)>
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)>
<com.android.calendar.event.AttendeesView: void setEnabled(boolean)>
<com.android.calendar.CalendarController: void launchViewEvent(long,long,long,int)>
<com.android.calendar.DayOfMonthDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$AsyncCalendarsUpdater: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)>
<com.android.calendar.AllInOneActivity: void setControlsOffset(int)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String[])>
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,boolean)>
<com.android.calendar.Utils: void setDefaultView(android.content.Context,int)>
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,boolean)>
<com.android.calendar.alerts.AlertUtils: void setAlertFiredInSharedPrefs(android.content.Context,long,long,long)>
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<com.android.calendar.DayOfMonthDrawable: void setDayOfMonth(int)>
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,int)>
<com.android.calendar.alerts.AlertUtils$1: void set(int,long,android.app.PendingIntent)>
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void onClick(android.view.View)>
<com.android.calendar.GeneralPreferences: void setDefaultValues(android.content.Context)>
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void setVisible(int,int)>
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)>
<com.android.calendar.agenda.AgendaListView: void setSelectedInstanceId(long)>
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)>
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)>
<com.android.calendar.Utils: void setUpSearchView(android.widget.SearchView,android.app.Activity)>
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)>
<com.android.calendar.alerts.AlertUtils: android.content.Intent buildEventViewIntent(android.content.Context,long,long,long)>
<com.android.calendar.agenda.AgendaWindowAdapter: void setSelectedView(android.view.View)>
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)>
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)>
<com.android.calendar.agenda.AgendaListView: void setHideDeclinedEvents(boolean)>
<com.android.calendar.month.MonthWeekEventsView: void setClickedDay(float)>
<com.android.calendar.alerts.AlertService$NotificationMgrWrapper: void notify(int,com.android.calendar.alerts.AlertService$NotificationWrapper)>
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)>
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)>
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)>
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>
<com.android.calendar.alerts.AlertUtils: android.content.ContentValues makeContentValues(long,long,long,long,int)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)>
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
<com.android.calendar.month.SimpleWeeksAdapter: void setSelectedDay(android.text.format.Time)>
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)>