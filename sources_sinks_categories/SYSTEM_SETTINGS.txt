<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)>
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)>
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)>
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)>
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)>
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)>
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()>
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()>
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)>
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()>
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)>
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()>
<android.webkit.WebSettings: boolean getSavePassword()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)>
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()>
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()>
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()>
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()>
<com.android.server.net.NetworkStatsCollection: long getStartMillis()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)>
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()>
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)>
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)>
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)>
<com.android.server.net.NetworkStatsCollection: long getEndMillis()>
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()>
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)>
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()>
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)>
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()>
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()>
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)>
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()>
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()>
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()>
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)>
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()>
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()>
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()>
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)>
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()>
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()>
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()>
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()>
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)>
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)>
<android.webkit.WebSettingsClassic: boolean getSavePassword()>
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)>
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)>
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)>
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()>
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()>
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()>
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()>
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getStartCount()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()>
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()>
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()>
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()>
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()>
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)>
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()>
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)>
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()>
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)>
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()>
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()>
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)>
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()>
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)>
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()>
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)>
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)>
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()>
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()>
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()>
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()>
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.server.am.BatteryStatsService: byte[] getStatistics()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()>
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()>
<com.android.internal.telephony.PhoneProxy: boolean getMute()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)>
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)>
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()>
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()>
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()>
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)>
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()>
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()>
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()>
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)>
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()>
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)>
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)>
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$Bookmarks: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$Secure: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.Settings$System: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.UserDictionary$Words: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.provider.UserDictionary: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherProvider: android.net.Uri CONTENT_APPWIDGET_RESET_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherSettings$Favorites: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.launcher2.LauncherSettings$Favorites: android.net.Uri CONTENT_URI_NO_NOTIFICATION,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri CONTENT_URI,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.test.ModelInterpreter: void print(java.lang.String)>
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.CallManager: void setMute(boolean)>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.ModelInterpreter: void setNextCallFailCause(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>
<android.webkit.DeviceMotionAndOrientationManager: void setUseMock()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)>
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaSubscriptionSource(int,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)>
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>
<com.android.internal.telephony.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>
<com.android.server.DeviceStorageMonitorService$CacheFileDeletedObserver: void onEvent(int,java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.server.am.ActivityManagerService: void dispatchUserSwitch(com.android.server.am.UserStartedState,int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)>
<com.android.internal.telephony.CallManager$1: void handleMessage(android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>
<com.android.internal.telephony.IccCardStatus: void setCardState(int)>
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)>
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>
<com.android.internal.telephony.test.SimulatedCommands: void setMute(boolean,android.os.Message)>
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>
<com.android.internal.telephony.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>
<com.android.internal.telephony.CallManager: boolean sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)>
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>
<com.android.internal.telephony.DataConnectionTracker: void putRecoveryAction(int)>
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)>
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>
<com.android.internal.telephony.CallManager: void setAudioMode()>
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)>
<com.android.internal.telephony.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void sendTerminalResponse(java.lang.String,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,int)>
<com.android.internal.telephony.test.SimulatedCommands: void setAutoProgressConnectingCall(boolean)>
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,int)>
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)>
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.test.ModelInterpreter: void sendUnsolicited(java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.test.SimulatedCommands: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>
<com.android.server.am.ActivityManagerService: boolean switchUser(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean,int)>
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setState(com.android.internal.telephony.DctConstants$State)>
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)>
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void sendCdmaSms(byte[],android.os.Message)>
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)>
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)>
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.test.ModelInterpreter: void println(java.lang.String)>
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)>
<com.android.internal.telephony.DataConnection: void setRetryCount(int)>
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.test.SimulatedCommands: void setCallWaiting(boolean,int,android.os.Message)>
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)>
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,int)>
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>
<com.android.internal.telephony.UiccCardApplication: void registerForNetworkLocked(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)>
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setPreferredVoicePrivacy(boolean,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)>
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.test.ModelInterpreter: void setNextDialFailImmediately(boolean)>
<com.android.internal.telephony.UiccCardApplication: void registerForReady(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)>
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.server.am.ActivityManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void saveClirSetting(int)>
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)>
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)>
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)>
<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)>
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>
<com.android.internal.telephony.CallerInfoAsyncQuery: void addQueryListener(int,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)>
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.app.IActivityManager$WaitResult,android.content.res.Configuration,android.os.Bundle,int)>
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)>
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>
<com.android.internal.telephony.CallManager: boolean canConference(com.android.internal.telephony.Call)>
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)>
<com.android.internal.telephony.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccCardStatus)>
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>
<android.telephony.ServiceState: void setStateOff()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>
<com.android.internal.telephony.CallManager: boolean startDtmf(char)>
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)>
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaRoamingPreference(int,android.os.Message)>
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
<com.android.internal.telephony.IccCardProxy: void setVoiceRadioTech(int)>
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCellInfoChanged(java.util.List)>
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void sendDtmf(char,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo)>
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>
<com.android.internal.telephony.RIL: void conference(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void setCLIR(int,android.os.Message)>
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>
<android.telephony.ServiceState: void setStateOutOfService()>
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)>
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>
<android.telephony.ServiceState: void setCssIndicator(int)>
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)>
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)>
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.ModelInterpreter: void setAutoProgressConnectingCall(boolean)>
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)>
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.test.SimulatedCommands: void setLocationUpdates(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)>
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int,int)>
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)>
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)>
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setPhoneType(int)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)>
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>
<com.android.internal.telephony.test.SimulatedCommands: void setBandMode(int,android.os.Message)>
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMessageWaiting(int,int)>
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>
<com.android.internal.telephony.test.SimulatedCommands: void setNextDialFailImmediately(boolean)>
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.test.SimulatedCommands: void setTTYMode(int,android.os.Message)>
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)>
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)>
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>
<android.telephony.CellSignalStrengthCdma: void setDefaultValues()>
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)>
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)>
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)>
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>
<com.android.internal.telephony.CallManager: void setEchoSuppressionEnabled(boolean)>
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.telephony.ApnContext: void setRetryCount(int)>
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)>
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void sendUSSD(java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DctConstants$State)>
<com.android.internal.telephony.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>
<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)>
<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])>
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastConfig(int[],android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.telephony.UiccCardApplication: void registerForLocked(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int,int)>
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelope(java.lang.String,android.os.Message)>